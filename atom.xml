<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>mtianyan&#39;s blog</title>
  
  <subtitle>天涯明月笙的博客小站(Github托管)</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.mtianyan.cn/"/>
  <updated>2018-02-02T12:40:13.952Z</updated>
  <id>http://blog.mtianyan.cn/</id>
  
  <author>
    <name>mtianyan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2018.2最新-Scrapy+elasticSearch+Django打造搜索引擎(三)</title>
    <link href="http://blog.mtianyan.cn/post/855680b2.html"/>
    <id>http://blog.mtianyan.cn/post/855680b2.html</id>
    <published>2018-02-02T12:36:40.000Z</published>
    <updated>2018-02-02T12:40:13.952Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>请问您今天要来个引擎吗？ 打好基础好上路学习</p></blockquote><div class="note warning"><p>最终项目上线演示地址: <a href="http://search.mtianyan.cn" target="_blank" rel="noopener">http://search.mtianyan.cn</a></p><ul><li>第三节：我们搞搞基础知识，可谓爬虫居家必备基础。<br>Github地址: <a href="https://github.com/mtianyan/ArticleSpider" target="_blank" rel="noopener">https://github.com/mtianyan/ArticleSpider</a></li></ul></div><a id="more"></a><h1 id="爬虫基础知识"><a href="#爬虫基础知识" class="headerlink" title="爬虫基础知识"></a>爬虫基础知识</h1><ol><li>正则表达式</li><li>深度优先和广度优先遍历算法</li><li>url去重的常见策略</li></ol><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><p><strong>scrapy vs requests+beautifulsoup</strong></p><ul><li>requests和beautifulsoup都只是库，scrapy是框架。</li><li>scrapy 可以加入requests和beautifulsoup</li><li>scrapy基于twisted(异步IO框架)，性能好</li><li>方便扩展,有很多内置功能</li><li>内置的<code>css</code>和<code>xpath selector</code>(lxml:c实现的框架)很方便，速度快</li></ul><blockquote><p>beautifulsoup最大的缺点就是慢。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install scrapy</span><br></pre></td></tr></table></figure><p>Failed building wheel for Twisted</p><p><a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted" target="_blank" rel="noopener">http://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted</a>  本地安装</p><h3 id="网页分类"><a href="#网页分类" class="headerlink" title="网页分类"></a>网页分类</h3><ol><li>静态网页</li><li>动态页面</li><li>webservice(restful api): 前台通过ajax与后台进行交互</li></ol><h3 id="爬虫能做什么？"><a href="#爬虫能做什么？" class="headerlink" title="爬虫能做什么？"></a>爬虫能做什么？</h3><ol><li>搜索引擎：百度 垂直领域搜索引擎(只爬某领域)</li><li>推荐引擎：今日头条</li><li>机器学习的数据样本</li><li>数据分析(金融数据分析) 舆情分析</li></ol><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>为什么必须会正则表达式？</p><p>应用场景: <code>1天前</code>中提取出<code>1</code></p><h3 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符:"></a>特殊字符:</h3><blockquote><p>可以判断是否匹配模式，字符串中提取指定字符</p></blockquote><ul><li><code>^</code>：代表以该字符为开头。如<code>^b</code>就是b为开头。</li><li><code>.</code>: 代表任意一个字符。如<code>^b.</code>就是b开头后面一个字母任意</li><li><code>*</code>: 代表前一个字符可以出现任意次（0个也可以）。如<code>^b.*</code>就是b开头后面可有任意数个任意字母</li><li><code>$</code>: 代表前一个字符为结尾符合。 如:<code>.*3$</code>就是以3为结尾的任意字符串</li><li><code>?</code>： 在限定次数词后加一个”?”，则表示匹配尽可能少的字符: 非贪婪匹配。<ul><li>一般情况从右往左匹配正则，非贪婪遇到符合最小条件就返回。</li><li><code>?</code>可以实现从左往右，非贪婪指遇到第一个就结束。<br><code>.*?(b.*?b).*</code>就是首先开始的b和找到的第一个b之间的字符串，不向后贪婪。</li></ul></li></ul><h3 id="Example-Code"><a href="#Example-Code" class="headerlink" title="Example Code"></a>Example Code</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line">__author__ = <span class="string">'mtianyan'</span></span><br><span class="line">__date__ = <span class="string">'2018/1/17 0017 16:20'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">line1 = <span class="string">"mtianyan123"</span></span><br><span class="line">line2 = <span class="string">"moooommtianyan123"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义正则表达式的字符串模式</span></span><br><span class="line"><span class="comment"># ^m代表以m开头；.代表任意字符；* 代表前面字符可以重复任意遍</span></span><br><span class="line"><span class="comment"># 3$代表以3为结尾</span></span><br><span class="line">regex_str1 = <span class="string">"^m.*3$"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 两个参数: 定义的字符串，以及我们要检验的字符串</span></span><br><span class="line"><span class="keyword">if</span> re.match(regex_str1, line1):</span><br><span class="line">    print(<span class="string">"yes"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认为贪婪模式: 反向由字符串模式从右向左匹配</span></span><br><span class="line"><span class="comment"># m前面无所谓啥，m和后一个m中间无所谓啥。后面也无所谓有啥。目标:moooom</span></span><br><span class="line"><span class="comment"># 括号括起来我们需要的字符串.也就是只提取这一部分。</span></span><br><span class="line">regex_str2 = <span class="string">".*(m.*m).*"</span></span><br><span class="line">match_obj = re.match(regex_str2, line2)</span><br><span class="line"><span class="keyword">if</span> match_obj:</span><br><span class="line">    <span class="comment"># 只取第一个括号东西。</span></span><br><span class="line">    <span class="keyword">print</span> (match_obj.group(<span class="number">1</span>))</span><br><span class="line"><span class="comment"># mm</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用?使他从左边开始但是右边还是贪婪模式匹配。从右匹配到右起第一个</span></span><br><span class="line">regex_str3 = <span class="string">".*?(m.*m).*"</span></span><br><span class="line">match_obj = re.match(regex_str3, line2)</span><br><span class="line"><span class="keyword">if</span> match_obj:</span><br><span class="line">    <span class="comment"># 只取第一个括号东西。</span></span><br><span class="line">    <span class="keyword">print</span> (match_obj.group(<span class="number">1</span>))</span><br><span class="line"><span class="comment"># moooomm</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用?使他从左边开始但是右边还是贪婪模式匹配。</span></span><br><span class="line"><span class="comment"># 在第二个m前也加问号。让它从左起开始。找这样的条件的b，不要继续向后贪婪</span></span><br><span class="line">regex_str4 = <span class="string">".*?(m.*?m).*"</span></span><br><span class="line">match_obj = re.match(regex_str4, line2)</span><br><span class="line"><span class="keyword">if</span> match_obj:</span><br><span class="line">    <span class="comment"># 只取第一个括号东西。</span></span><br><span class="line">    <span class="keyword">print</span> (match_obj.group(<span class="number">1</span>))</span><br><span class="line"><span class="comment"># moooom</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>两个问号都不加: 默认从右开始找匹配模式的字符，找到即返回。</li><li>加前面一个问号: 从左开始，但是会一直贪婪到最长的符合字符。因为后面m还是从右开始的。</li><li>后面加一个问号: 第二个字符从左开始找。</li><li>两个问号都加：从左开始找字符m 和 m</li></ul></blockquote><ul><li><code>+</code>: 代表前面的字符至少出现一次: 如<code>b.+b</code>指两个b之间至少一个字符</li></ul><blockquote><p><code>+</code> 与<code>*</code> 与<code>{2}</code>都属于限定词限定前面出现多少次</p></blockquote><ul><li><code>{2}</code> <code>{2,5}</code> <code>{2, }</code>: <ul><li>代表前面的字符出现2次。</li><li>代表前面的字符出现2到5次. </li><li>代表前面字符出现2次及两次以上</li></ul></li><li><code>|</code>：代表<code>或</code>的意思 <code>b|c</code>，在模式字符串从左到右, 看先匹配到那个。先找b</li><li><code>()</code>: 代表子字符串。如((a|b)123)代表group(1)为外层括号里的a123|b123；group(2)为内层括号值 <code>a</code> <code>b</code></li><li><code>[]</code>: 代表[]内的字符满足任意一个都可以。<ul><li>[abcdefg]123代表以abcdefg中一个字母开头的,后面是123的都可以。</li></ul></li><li><code>[0-9]</code> <code>[a-z]</code><ul><li>代表可以为0-9范围内任意一个字符</li><li>代表a-z范围任意一个字符 </li></ul></li><li><code>[^1]</code> <code>^</code>为取反，只要不等于1就可以</li></ul><blockquote><p>注: 进入[]的字符都不再具有特殊含义<code>[.*]</code>就指匹配到<code>.</code>或者<code>*</code></p></blockquote><ul><li><code>\s</code> <code>\S</code><ul><li><code>\s</code>代表匹配到一个空格。</li><li><code>\S</code>代表匹配到一个非空格</li></ul></li><li><code>\w</code> <code>\W</code><ul><li>匹配任意字符 等价: [a-zA-Z0-9_] </li><li>非单词字符</li></ul></li><li><code>[\u4E00-\u9FA5]</code>: 匹配中文汉字</li></ul><blockquote><p><code>&quot;study in 浙江大学&quot;</code> 匹配regex_str = <code>.*?[\u4E00-\u9FA5]+大学</code></p></blockquote><p>如果不加问号。则从右开始，只会匹配到江大学</p><ul><li><code>\d</code>: 匹配数字 </li></ul><p>例子: <code>&quot;xxx出生于2001年&quot;</code> 匹配<code>.*?(\d+)年</code></p><blockquote><p>不加?会只匹配到1.因为它从右往左找第一个符合条件的。</p><ul><li>加上问号，从左往右，找到符合条件的。</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line"></span><br><span class="line">line = &quot;XXX出生于2001年&quot;</span><br><span class="line"># line = &quot;XXX出生于2001/6/1&quot;</span><br><span class="line"># line = &quot;XXX出生于2001-6-1&quot;</span><br><span class="line"># line = &quot;XXX出生于2001-06-01&quot;</span><br><span class="line"># line = &quot;XXX出生于2001-06&quot;</span><br><span class="line"></span><br><span class="line">regex_str = &quot;.*出生于(\d&#123;4&#125;[年/-]\d&#123;1,2&#125;([月/-]\d&#123;1,2&#125;日|[月/-]\d&#123;1,2&#125;|[月/-]$|$))&quot;</span><br><span class="line"></span><br><span class="line">match_obj = re.match(regex_str, line)</span><br><span class="line">if match_obj:</span><br><span class="line">    print (match_obj.group(1))</span><br></pre></td></tr></table></figure><blockquote><p><code>([月/-]\d{1,2}日|[月/-]\d{1,2}|[月/-]$|$)</code>满足或的关系</p></blockquote><h2 id="深度优先和广度优先"><a href="#深度优先和广度优先" class="headerlink" title="深度优先和广度优先"></a>深度优先和广度优先</h2><ol><li>网站的树结构</li><li>深度优先算法和实现</li><li>广度优先算法和实现</li></ol><p>网站url树结构:</p><p>分层设计</p><blockquote><p>子域名：</p><ol><li>jobbole.com<br> 1.1 blog.bogbole.com<br> 1.2 python.bogbole.com<pre><code>1.1.1 python.bogbole.com/123</code></pre></li></ol></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180117/H8bebf1CmK.png?imageslim" alt="mark"></p><p>上图为网站的实际url结构图,可以看到其中的环路链接:</p><blockquote><p>从首页到某个具体页面节点。<br>但是下面的链接节点又会有链接指向首页</p></blockquote><h3 id="去重-建立已爬取url列表"><a href="#去重-建立已爬取url列表" class="headerlink" title="去重, 建立已爬取url列表"></a>去重, 建立已爬取url列表</h3><ol><li>深度优先</li><li>广度优先</li></ol><blockquote><p>跳过已爬取的链接, 对于二叉树的遍历问题</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180117/7HB135kB60.png?imageslim" alt="mark"></p><p>深度优先(递归实现)：</p><blockquote><p>顺着一条路，走到最深处。然后回头。</p></blockquote><p>输出: A-&gt;B-&gt;D-&gt;E-&gt;I-&gt;C-&gt;F-&gt;G-H (scrapy默认使用)</p><p>广度优先(队列实现):</p><blockquote><p>分层遍历：遍历完儿子辈。然后遍历孙子辈</p></blockquote><p>输出: A-&gt;B-&gt;C-&gt;D-&gt;E-&gt;F-&gt;G-&gt;H-&gt;I</p><p>Python实现深度优先过程code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">depth_tree</span><span class="params">(tree_node)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> tree_node <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">print</span> (tree_node._data)</span><br><span class="line">        <span class="keyword">if</span> tree_node._left <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> depth_tree(tree_node.left)</span><br><span class="line">        <span class="keyword">if</span> tree_node._right <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> depth_tree(tree_node,_right)</span><br></pre></td></tr></table></figure><p>递归太深没有跳出，会造成内存溢出。</p><p>Python实现广度优先过程code：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">level_queue</span><span class="params">(root)</span>:</span></span><br><span class="line">    <span class="comment">#利用队列实现树的广度优先遍历</span></span><br><span class="line">    <span class="keyword">if</span> root <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    my_queue = []</span><br><span class="line">    node = root</span><br><span class="line">    my_queue.append(node)</span><br><span class="line">    <span class="keyword">while</span> my_queue:</span><br><span class="line">        node = my_queue.pop(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">print</span> (node.elem)</span><br><span class="line">        <span class="keyword">if</span> node.lchild <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            my_queue.append(node.lchild)</span><br><span class="line">        <span class="keyword">if</span> node.rchild <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            my_queue.append(node.rchild)</span><br></pre></td></tr></table></figure><h2 id="爬虫去重策略"><a href="#爬虫去重策略" class="headerlink" title="爬虫去重策略"></a>爬虫去重策略</h2><ol><li>将访问过的url保存到<code>数据库</code>中,获取url时查询一下是否爬过了。</li><li>将url保存到<code>set</code>中。只需要<code>O(1)</code>的代价就可以查询到url</li><li>url经过<code>md5</code>等方法哈希后保存到set中，将<code>url压缩到固定长度</code>而且<code>不重复</code></li><li>用<code>bitmap</code>方法，将访问过的url通过<code>hash函数</code>映射到某一位.</li><li><code>bloomfilter</code>方法对bitmap进行改进，多重hash函数降低冲突可能性。</li></ol><blockquote><blockquote><p>方法2保守估计:<code>100000000*2byte*50</code>个字符/1024/1024/1024 = 9G,占用内存过大。</p></blockquote></blockquote><p>scrapy去重使用的是第三种方法:</p><blockquote><p>后面分布式scrapy-redis会讲解bloomfilter方法。hash函数会引起冲突，冲突解决。</p></blockquote><h2 id="Python字符串编码问题解决："><a href="#Python字符串编码问题解决：" class="headerlink" title="Python字符串编码问题解决："></a>Python字符串编码问题解决：</h2><ol><li>计算机只能处理数字，文本转换为数字才能处理，计算机中8个bit作为一个字节，<br>所以一个字节能表示的最大数字就是255。</li><li>计算机是美国人发明的，所以一个字节就可以标识所有单个字符<br>，所以ASCII(一个字节)编码就成为美国人的标准编码</li><li>但是ASCII处理中文明显不够，中文不止255个汉字，所以中国制定了GB2312编码<br>，用两个字节表示一个汉字。GB2312将ASCII也包含进去了。同理，日文，韩文，越来越多的国家为了解决这个问题就都发展了一套编码，标准越来越多，如果出现多种语言混合显示就一定会出现乱码</li><li>于是unicode出现了，通过16个bit, 32个bit.它将所有语言包含进去了。</li><li>看一下ASCII和unicode编码:<ul><li>字母A用ASCII编码十进制是65，二进制 0100 0001</li><li>汉字”中” 已近超出ASCII编码的范围，用unicode编码是20013二进制是01001110 00101101</li><li>A用unicode编码只需要前面补0二进制是 00000000 0100 0001</li></ul></li><li>乱码问题解决了，但是如果内容全是英文，unicode编码比ASCII编码需要多一倍的存储空间，传输也会变慢。</li><li>所以此时出现了可变长的编码”utf-8” ,把英文：1字节，汉字3字节，特别生僻的变成4-6字节，如果传输大量的英文，utf8作用就很明显。</li></ol><blockquote><p>Unicode编码虽然占用空间但是因为占用空间大小等额，在内存中处理会简单一些。</p></blockquote><p><strong>读取文件，进行操作时:转换为unicode编码进行处理</strong><br><strong>保存文件时，转换为utf-8编码。以便于传输</strong></p><p><img src="http://myphoto.mtianyan.cn/blog/180117/Lh08c5F83h.png?imageslim" alt="mark"></p><p>读文件进行decode(解码)操作转码为Unicode，但是decode必须指明原始编码方式。<br>Unicode编码 encode(编码) 操作转码为其他我们指定编码格式。</p><p>读文件的库都会自动将文件转换为Unicode编码，但需要我们指明编码。</p><p>Python3中将所有字符转换为Unicode。</p><p><strong>python2 默认编码格式为<code>ASCII</code>，Python3 默认编码为 <code>utf-8</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#python3</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.getdefaultencoding()</span><br><span class="line">s.encoding(<span class="string">'utf-8'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#python2</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.getdefaultencoding()</span><br><span class="line">s = <span class="string">"我和你"</span></span><br><span class="line">su = <span class="string">u"我和你"</span></span><br><span class="line">~~s.encode(<span class="string">"utf-8"</span>)<span class="comment">#会报错~~</span></span><br><span class="line">s.decode(<span class="string">"gb2312"</span>).encode(<span class="string">"utf-8"</span>)</span><br><span class="line">su.encode(<span class="string">"utf-8"</span>)</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180117/0g1DgADH7c.png?imageslim" alt="mark"></p><blockquote><p>内存中是通过Unicode进行编码的, s 是一个非Unicode的编码。windows下是gb2312编码。Linux下是utf-8的编码。</p></blockquote><p>encode方法之前，必须确保前面的变量是Unicode。</p><p><img src="http://myphoto.mtianyan.cn/blog/180117/36E2fEIGk0.png?imageslim" alt="mark"></p><p>说明windows中s确实是gb2312保存的，而且decode方法并不会直接改变字符串本身。而是返回一个编码过后的字符串。</p><p><img src="http://myphoto.mtianyan.cn/blog/180117/IleD7g92Ej.png?imageslim" alt="mark"></p><p>说明Linux中s是以utf-8保存的。encode编码之前必须走中间路径: 转换为Unicode</p><p><img src="http://myphoto.mtianyan.cn/blog/180117/k8IK9LIgmk.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180117/hIkchGf4cB.png?imageslim" alt="mark"></p><p>可以看到windows和Linux的默认编码格式都是ascii、</p><p>Python2文件头添加utf-8编码说明。可以使得读文件的解释器指定decode的参数。<br>Python3已经不用加了，因为它把默认的s取消掉了。直接将字符串全部当unicode处理。<br>可以直接编码。</p><p><img src="http://myphoto.mtianyan.cn/blog/180117/17KmkDlFf9.png?imageslim" alt="mark"></p><p>可以看到windows,Linux中Python3的默认编码为utf-8.</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;请问您今天要来个引擎吗？ 打好基础好上路学习&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;note warning&quot;&gt;&lt;p&gt;最终项目上线演示地址: &lt;a href=&quot;http://search.mtianyan.cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://search.mtianyan.cn&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第三节：我们搞搞基础知识，可谓爬虫居家必备基础。&lt;br&gt;Github地址: &lt;a href=&quot;https://github.com/mtianyan/ArticleSpider&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/mtianyan/ArticleSpider&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Scrapy分布式爬虫打造搜索引擎" scheme="http://blog.mtianyan.cn/categories/Scrapy%E5%88%86%E5%B8%83%E5%BC%8F%E7%88%AC%E8%99%AB%E6%89%93%E9%80%A0%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
    
      <category term="爬虫" scheme="http://blog.mtianyan.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="搜索引擎" scheme="http://blog.mtianyan.cn/tags/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
      <category term="Scrapy" scheme="http://blog.mtianyan.cn/tags/Scrapy/"/>
    
      <category term="Python" scheme="http://blog.mtianyan.cn/tags/Python/"/>
    
      <category term="Django" scheme="http://blog.mtianyan.cn/tags/Django/"/>
    
      <category term="ElasticSearch" scheme="http://blog.mtianyan.cn/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>2018.2最新-Scrapy+elasticSearch+Django打造搜索引擎(二)</title>
    <link href="http://blog.mtianyan.cn/post/fba5a099.html"/>
    <id>http://blog.mtianyan.cn/post/fba5a099.html</id>
    <published>2018-01-29T18:28:28.000Z</published>
    <updated>2018-02-02T12:40:13.952Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>请问您今天要来个引擎吗？ 工欲善其事必先利其器</p></blockquote><div class="note success"><p>最终项目上线演示地址: <a href="http://search.mtianyan.cn" target="_blank" rel="noopener">http://search.mtianyan.cn</a></p><ul><li>第二节：我们搞搞比利，搞搞环境的搭建。<br>Github地址: <a href="https://github.com/mtianyan/ArticleSpider" target="_blank" rel="noopener">https://github.com/mtianyan/ArticleSpider</a></li></ul></div><a id="more"></a><h1 id="开发环境搭建"><a href="#开发环境搭建" class="headerlink" title="开发环境搭建"></a>开发环境搭建</h1><ol><li>IDE: pycharm</li><li>数据库: mysql, redis, elasticsearch</li><li>开发环境 virtualenv</li></ol><p>这次的数据库只介绍mysql,后面两个会放到要用到的章节。</p><h2 id="Pycharm的安装和使用"><a href="#Pycharm的安装和使用" class="headerlink" title="Pycharm的安装和使用"></a>Pycharm的安装和使用</h2><p>Pycharm在windows和linux下的安装：</p><ol><li>Pycharm的安装(linux 和windows)</li></ol><p><strong>一定要下载专业版，社区免费版有很多功能缺失</strong></p><h3 id="windows下pycharm安装。"><a href="#windows下pycharm安装。" class="headerlink" title="windows下pycharm安装。"></a>windows下pycharm安装。</h3><blockquote><p>PyCharm 2017.3.2</p></blockquote><p>pycharm官方下载链接：<a href="https://www.jetbrains.com/pycharm/download/#section=windows" target="_blank" rel="noopener">https://www.jetbrains.com/pycharm/download/#section=windows</a></p><p><strong>我们要选择专业版（Professional）</strong>因为只有专业版才能够新建django项目,免费社区版不能。</p><p><strong>为Pycharm添加解释器：</strong></p><p><code>setting</code> - <code>Project Interpreter</code>：</p><p><img src="http://oerdwodsk.bkt.clouddn.com/blog/180103/E72AIkEB07.png?imageslim" alt="mark"></p><p><img src="http://oerdwodsk.bkt.clouddn.com/blog/180103/D3jB3C6A9g.png?imageslim" alt="mark"></p><p>一直定位到 <code>python.exe</code> 点击确认。</p><p>设置keymap: 设置快捷键。</p><h3 id="Linux下pycharm使用。"><a href="#Linux下pycharm使用。" class="headerlink" title="Linux下pycharm使用。"></a>Linux下pycharm使用。</h3><p>同样下载专业版。 Linux下的版本实际是一个绿色版本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd pycharm</span><br><span class="line">cd bin/</span><br><span class="line">./pycharm.sh</span><br></pre></td></tr></table></figure><p>设置通过命令直接启动。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br><span class="line"></span><br><span class="line">alias pycharm=&quot;bash /home//pycharm.sh&quot;</span><br><span class="line"></span><br><span class="line">source ~./bashrc</span><br></pre></td></tr></table></figure><h2 id="mysql和Navicat的安装和使用"><a href="#mysql和Navicat的安装和使用" class="headerlink" title="mysql和Navicat的安装和使用"></a>mysql和Navicat的安装和使用</h2><h3 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h3><p>百度”mysql for windows” 直接在百度软件中心下载即可</p><p><img src="http://myphoto.mtianyan.cn/blog/180106/J808E5JA1i.png?imageslim" alt="mark"></p><p>如果你的电脑跟我电脑一样空，推荐遵循我的：</p><ol><li>点击接受协议</li><li>选择Custom选项。(如果默认选项，会发生必要条件缺失：如我电脑没有VS和py3.4)</li></ol><p><img src="http://myphoto.mtianyan.cn/blog/180106/A7Cb96mEce.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180106/66L7DaJJCK.png?imageslim" alt="mark"></p><ul><li>下图页面点击<code>next</code>会显示我们不满足的条件，<code>back</code>后点击绿色箭头移除。</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180106/8C2KL0HaI4.png?imageslim" alt="mark"></p><ul><li>所有条件都达成，点击<code>Execute</code>，等待安装完成。</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180106/78kgLjJl4F.png?imageslim" alt="mark"></p><blockquote><p>均为绿色代表安装完成。</p></blockquote><ul><li>一直默认选择直到下图页面。设置密码，添加用户(可选)</li></ul><blockquote><p><strong>注意：记住自己设置的mysql密码</strong></p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180106/c8aLD2mdC4.png?imageslim" alt="mark"></p><blockquote><p>之后全部默认下一步。直到安装完成<code>Finish</code></p></blockquote><p>这时Navicat已经可以正常连接了。如果想让<code>mysql</code>命令在cmd下可使用。</p><p><code>C:\Program Files\MySQL\MySQL Server 5.7\bin</code> (自行替换为自己的mysql.exe地址)加入环境变量中。</p><p><img src="http://myphoto.mtianyan.cn/blog/180106/DL51BD687G.png?imageslim" alt="mark"></p><p>通过<code>mysql -uroot -p</code>命令可以进行登入mysql控制台。</p><p><img src="http://myphoto.mtianyan.cn/blog/180106/h1Aa2aJ0G4.png?imageslim" alt="mark"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure><p>修改bind adress: <code>0.0.0.0</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysql restart</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 授予所有权限其实可以细化，on`*.*`是一个正则表达式，表示所有的表赋权限。`root `代表通过root用户连接过来。 `%` 代表所有外部的ip ：当然也可以指明某一个ip.所有ip上只要是通过root 用户 Identity by`密码 `都可以访问我的所有表</span><br><span class="line">grant all privileges on *.* to &apos;root&apos;@&apos;%&apos; identified by &apos;ty158917&apos; with grant option;</span><br><span class="line"></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>Linux 安装 mysql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mysql-server</span><br><span class="line">ps aux|grep mysql</span><br><span class="line"></span><br><span class="line">mysql-uroot -p</span><br><span class="line"></span><br><span class="line">show databases;</span><br></pre></td></tr></table></figure><p>通过set py3获取py3安装路径。</p><h3 id="Navicat"><a href="#Navicat" class="headerlink" title="Navicat"></a>Navicat</h3><p>安装指南：下一步下一步。</p><p>下载地址：<a href="http://www.navicat.com.cn/download/navicat-for-mysql" target="_blank" rel="noopener">http://www.navicat.com.cn/download/navicat-for-mysql</a></p><p>我的安装目录: <code>C:\software\Navicat Premium 12</code></p><h2 id="virtualenv和virtualenvwrapper安装和配置"><a href="#virtualenv和virtualenvwrapper安装和配置" class="headerlink" title="virtualenv和virtualenvwrapper安装和配置"></a>virtualenv和virtualenvwrapper安装和配置</h2><h3 id="virtualenv介绍"><a href="#virtualenv介绍" class="headerlink" title="virtualenv介绍"></a>virtualenv介绍</h3><blockquote><p>每个应用可能需要各自拥有一套<code>独立</code>的Python运行环境。virtualenv就是用来为一个应用创建一套<code>隔离</code>的Python运行环境。</p></blockquote><p><strong>virtualenv优点：</strong></p><p><img src="http://myphoto.mtianyan.cn/blog/180106/AmbE1564gJ.png?imageslim" alt="mark"></p><p>它是将全局Python解释器进行私有化复制。<br>如果不使用虚拟环境，默认的<code>pip</code>安装都会安装到同一个目录(java是把自己需要的包放到自己项目目录)，不同项目使用起来会产生问题</p><h3 id="安装virtualenv"><a href="#安装virtualenv" class="headerlink" title="安装virtualenv"></a>安装virtualenv</h3><p>进入cmd，（确保自己的pip已经可用）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenv</span><br><span class="line">virtualenv testvir</span><br><span class="line"><span class="comment"># 在当前用户目录(win+r %HOMEPATH%可查看)生成</span></span><br><span class="line">cd %homepath%</span><br><span class="line">cd testvir</span><br><span class="line">cd Scripts</span><br><span class="line">activate.bat <span class="comment">#激活</span></span><br><span class="line">pip list </span><br><span class="line">deactivate.bat</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180106/lCIHhf568m.png?imageslim" alt="mark"></p><p>默认使用<code>virtualenv testvir</code>该命令，会将虚拟环境创建在我们当前用户目录。</p><p><strong>注意：</strong>我的目录在桌面是我的cmder设置的、还请自行<code>cd %homepath%</code>前往自己的目录</p><p>这样直接使用步骤有写过于繁琐。所以我们使用<code>virtualenvwrapper</code></p><h3 id="virtualenvwrapper安装"><a href="#virtualenvwrapper安装" class="headerlink" title="virtualenvwrapper安装"></a>virtualenvwrapper安装</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenvwrapper-win</span><br><span class="line">pip install virtualenvwrapper(Linux)</span><br></pre></td></tr></table></figure><ul><li>创建虚拟环境</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv DjangoTest</span><br></pre></td></tr></table></figure><p>会创建在<code>C:\Users\mtian\Envs</code>当前用户目录下的Envs目录。</p><p>修改<code>mkvirtualenv</code>创建的目录：新增环境变量<code>WORKON_HOME</code></p><p><img src="http://myphoto.mtianyan.cn/blog/180106/A2im5He9fK.png?imageslim" alt="mark"></p><ul><li><p>退出激活状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure></li><li><p>知道有哪些虚拟环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">workon</span><br></pre></td></tr></table></figure></li></ul><p>Linux下安装:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-virtualenv</span><br><span class="line"></span><br><span class="line">virtualenv venv --python=python3.5</span><br><span class="line">virtualenv venv --python=python2.7</span><br><span class="line"></span><br><span class="line">安装pip</span><br><span class="line"></span><br><span class="line">sudo python get-pip.py</span><br><span class="line"></span><br><span class="line">pip install virtualenvwrapper</span><br><span class="line"></span><br><span class="line">sudo find / -name virtualenvwrapper.sh</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180117/bGcgli0lhe.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180117/clBb27m150.png?imageslim" alt="mark"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv articlespider --python=python3.5</span><br><span class="line"></span><br><span class="line">rm -rf py3scrapy : 删除目录</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;请问您今天要来个引擎吗？ 工欲善其事必先利其器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;note success&quot;&gt;&lt;p&gt;最终项目上线演示地址: &lt;a href=&quot;http://search.mtianyan.cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://search.mtianyan.cn&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第二节：我们搞搞比利，搞搞环境的搭建。&lt;br&gt;Github地址: &lt;a href=&quot;https://github.com/mtianyan/ArticleSpider&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/mtianyan/ArticleSpider&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Scrapy分布式爬虫打造搜索引擎" scheme="http://blog.mtianyan.cn/categories/Scrapy%E5%88%86%E5%B8%83%E5%BC%8F%E7%88%AC%E8%99%AB%E6%89%93%E9%80%A0%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
    
      <category term="爬虫" scheme="http://blog.mtianyan.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="搜索引擎" scheme="http://blog.mtianyan.cn/tags/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
      <category term="Scrapy" scheme="http://blog.mtianyan.cn/tags/Scrapy/"/>
    
      <category term="Python" scheme="http://blog.mtianyan.cn/tags/Python/"/>
    
      <category term="Django" scheme="http://blog.mtianyan.cn/tags/Django/"/>
    
      <category term="ElasticSearch" scheme="http://blog.mtianyan.cn/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>2018.2最新-Scrapy+elasticSearch+Django打造搜索引擎(一)</title>
    <link href="http://blog.mtianyan.cn/post/54943bfb.html"/>
    <id>http://blog.mtianyan.cn/post/54943bfb.html</id>
    <published>2018-01-28T17:28:28.000Z</published>
    <updated>2018-02-02T12:40:13.952Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>请问您今天要来个引擎吗？ 看哭李彦宏, 震惊马化腾</p></blockquote><div class="note "><p>最终项目上线演示地址: <a href="http://search.mtianyan.cn" target="_blank" rel="noopener">http://search.mtianyan.cn</a></p><ul><li>第一节：开始我的表演之前, 先讲讲我们会学到什么，点上面链接看看我们能做一个什么。</li></ul><p>Github地址: <a href="https://github.com/mtianyan/ArticleSpider" target="_blank" rel="noopener">https://github.com/mtianyan/ArticleSpider</a></p></div><a id="more"></a><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>聚焦Python分布式爬虫必学框架Scrapy打造搜索引擎   </p><p>人工智能时代，数据先行。围绕着数据可以做的事情越来越多。</p><p><img src="http://myphoto.mtianyan.cn/blog/180108/e5GbhH3aEd.png?imageslim" alt="mark"></p><blockquote><p>比如上面这些领域所需要的数据都是可以通过爬虫来完成收集的。</p></blockquote><p>通过Scrapy分布式爬虫爬取数据，以及结合elasticsearch与Django搭建搜索引擎。</p><blockquote><p>适用人群：初学者，与想进阶的开发者。</p></blockquote><p>收获：获取想要的数据 &amp;&amp; 深入认知网络知识和编程知识。</p><h2 id="课程学习流程目录："><a href="#课程学习流程目录：" class="headerlink" title="课程学习流程目录："></a>课程学习流程目录：</h2><ol><li>环境配置和基础知识铺垫</li><li>爬取真实数据：三个主流网站(伯乐在线, 知乎, 拉钩网)</li><li>scrapy突破反爬虫技术</li><li>scrapy进阶开发</li><li>scrapy redis 分布式爬虫：可以快速搭建一套分布式爬虫。</li><li>elasticsearch django 实现搜索引擎</li></ol><h3 id="爬虫基础知识"><a href="#爬虫基础知识" class="headerlink" title="爬虫基础知识:"></a>爬虫基础知识:</h3><ol><li>正则表达式</li><li>深度优先和广度优先遍历算法</li><li>url去重的常见策略</li></ol><h3 id="爬取三个网站"><a href="#爬取三个网站" class="headerlink" title="爬取三个网站"></a>爬取三个网站</h3><blockquote><p>介绍完基础知识通过爬取：</p><p>技术社区(伯乐在线), 问答网站(知乎), 知名招聘网站(拉钩网) 来介绍Scrapy常用功能以及分析网站结构和网络请求。</p><p>学会通过<code>xpath</code> + <code>css</code> 提取数据, 爬取时也会使用模拟登录</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180108/laKD32bHGc.png?imageslim" alt="mark"></p><p>会对Scrapy的<code>spider</code> <code>item</code> <code>item loader</code> <code>pipeline</code> <code>feed export</code> <code>CrawSpider</code><br>都进行学习。</p><h3 id="介绍如何突破网站对于爬虫的限制："><a href="#介绍如何突破网站对于爬虫的限制：" class="headerlink" title="介绍如何突破网站对于爬虫的限制："></a>介绍如何突破网站对于爬虫的限制：</h3><p><img src="http://myphoto.mtianyan.cn/blog/180108/4DK05CiCe9.png?imageslim" alt="mark"></p><h3 id="scrapy进阶开发中介绍-scrapy的原理-基于scrapy的中间件开发。"><a href="#scrapy进阶开发中介绍-scrapy的原理-基于scrapy的中间件开发。" class="headerlink" title="scrapy进阶开发中介绍: scrapy的原理, 基于scrapy的中间件开发。"></a>scrapy进阶开发中介绍: scrapy的原理, 基于scrapy的中间件开发。</h3><p><img src="http://myphoto.mtianyan.cn/blog/180108/AAhf29Ddmj.png?imageslim" alt="mark"></p><blockquote><p>对于上面这些小的知识点也都进行讲解。</p></blockquote><h3 id="通过scrapy-redis搭建一套分布式爬虫。"><a href="#通过scrapy-redis搭建一套分布式爬虫。" class="headerlink" title="通过scrapy redis搭建一套分布式爬虫。"></a>通过scrapy redis搭建一套分布式爬虫。</h3><p>充分利用多台服务器效率。让爬取速度更快。</p><blockquote><ul><li>通过源码分析: 让大家理解scrapy-redis分布式爬虫</li><li>集成<code>bloomfilter</code>到scrapy-redis中</li></ul></blockquote><h3 id="elasticsearch-结合-django-制作搜索引擎"><a href="#elasticsearch-结合-django-制作搜索引擎" class="headerlink" title="elasticsearch 结合 django 制作搜索引擎"></a>elasticsearch 结合 django 制作搜索引擎</h3><p>elasticsearch 作为当前最流行的的分布式搜索引擎，被用到很多大公司。我们将用它结合django做一个搜索引擎。</p><blockquote><p>文章搜索 &amp;&amp; 问答搜索 &amp;&amp; 职位搜索</p></blockquote><p>下面还会有<code>热门搜索</code>和<code>我的搜索</code>。输入关键词之后<code>联想输入</code>点击搜索，进入详情页面。<br>对搜索关键字进行<code>标红处理</code>，对于数据进行了统计，可以收起左侧。右侧可以看到热门, 和我的记录, 下方有一个<code>分页</code>的效果。点击某一项会跳转到网站。</p><h2 id="课程的收获"><a href="#课程的收获" class="headerlink" title="课程的收获:"></a>课程的收获:</h2><ul><li>开发爬虫所需要用到的<code>技术</code>以及<code>网站分析技巧</code></li><li>理解<code>scrapy的原理</code>和所有组件的使用以及<code>分布式爬虫scrapy-redis</code>的使用和原理。</li><li>理解分布式开源搜索引擎<code>elasticsearch</code>的使用以及<code>搜索引擎的原理</code></li><li>体验<code>django</code>如何快速搭建网站</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;请问您今天要来个引擎吗？ 看哭李彦宏, 震惊马化腾&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;note &quot;&gt;&lt;p&gt;最终项目上线演示地址: &lt;a href=&quot;http://search.mtianyan.cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://search.mtianyan.cn&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一节：开始我的表演之前, 先讲讲我们会学到什么，点上面链接看看我们能做一个什么。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Github地址: &lt;a href=&quot;https://github.com/mtianyan/ArticleSpider&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/mtianyan/ArticleSpider&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Scrapy分布式爬虫打造搜索引擎" scheme="http://blog.mtianyan.cn/categories/Scrapy%E5%88%86%E5%B8%83%E5%BC%8F%E7%88%AC%E8%99%AB%E6%89%93%E9%80%A0%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
    
      <category term="爬虫" scheme="http://blog.mtianyan.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="搜索引擎" scheme="http://blog.mtianyan.cn/tags/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
      <category term="Scrapy" scheme="http://blog.mtianyan.cn/tags/Scrapy/"/>
    
      <category term="Python" scheme="http://blog.mtianyan.cn/tags/Python/"/>
    
      <category term="Django" scheme="http://blog.mtianyan.cn/tags/Django/"/>
    
      <category term="ElasticSearch" scheme="http://blog.mtianyan.cn/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>强力Django+杀手级Xadmin打造在线教育平台 - 系列完整版</title>
    <link href="http://blog.mtianyan.cn/post/8b4c6c13.html"/>
    <id>http://blog.mtianyan.cn/post/8b4c6c13.html</id>
    <published>2018-01-16T16:15:31.000Z</published>
    <updated>2018-02-02T12:40:13.964Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>「比更大还更大」(Bigger than Bigger)</p></blockquote><div class="note "><ul><li>初级复习: 写一个留言板来复习Django基础知识</li><li>项目实战: 使用Django+xadmin搭建一个在线教育网站<br>最终成果: <a href="http://mxonline.mtianyan.cn" target="_blank" rel="noopener">http://mxonline.mtianyan.cn</a></li></ul><p>GitHub代码仓库:<br><a href="https://github.com/mtianyan/Mxonline2" target="_blank" rel="noopener">https://github.com/mtianyan/Mxonline2</a></p></div><a id="more"></a><blockquote class="blockquote-center"><p>请开始你的表演是做一个项目的第一步</p></blockquote><div class="note "><p>使用Django+Xadmin打造在线教育平台</p><ul><li>第一章：项目介绍和课程介绍</li></ul><p>教程仓库地址1:<a href="https://github.com/mtianyan/DjangoGetStarted" target="_blank" rel="noopener">https://github.com/mtianyan/DjangoGetStarted</a></p></div><h1 id="项目演示和课程介绍"><a href="#项目演示和课程介绍" class="headerlink" title="项目演示和课程介绍"></a>项目演示和课程介绍</h1><p>Django是一个Python中Web开发的主流框架，被许多大型公司使用，如Google，豆瓣，YouTube，知乎，instagram:</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/a5h8mfid18.png?imageslim" alt="mark"></p><p>创业公司喜欢的web框架。严格按照互联网公司开发流程，写出优雅简练的代码。<br>循序渐进，细致入微。独立完成完整项目。学习完课程，找份Python web开发工作不在话下。</p><p>教程线上已部署地址: <a href="http://mxonline.mtianyan.cn" target="_blank" rel="noopener">http://mxonline.mtianyan.cn</a></p><p><strong>系统介绍：</strong></p><ul><li>系统具有完整的用户登录注册以及找回密码功能，拥有完整个人中心。</li><li>个人中心: 修改头像，修改密码，修改邮箱，可以看到我的课程以及我的收藏。可以删除收藏，我的消息。</li><li>导航栏: 公开课，授课讲师，授课机构，全局搜索。</li><li>点击<code>公开课</code>–&gt; 课程列表，排序-搜索。热门课程推荐，课程的分页。</li><li>点击<code>课程</code>–&gt; 课程详情页中对课程进行收藏，取消收藏。富文本展示课程内容。</li><li>点击<code>开始学习</code>–&gt; 课程的章节信息，课程的评论信息。课程资源的下载链接。</li><li>点击<code>授课讲师</code>–&gt;授课讲师列表页，对讲师进行人气排序以及分页，右边有讲师排行榜。</li><li>点击<code>讲师的详情页面</code>–&gt; 对讲师进行收藏和分享，以及讲师的全部课程。</li><li>导航栏: 授课机构有分页，排序筛选功能。</li><li>机构列表页右侧有快速提交我要学习的表单。</li><li>点击<code>机构</code>–&gt; 左侧：机构首页,机构课程，机构介绍，机构讲师。</li><li>后台管理系统可以<code>切换主题</code>。左侧每一个功能都有列表显示, 增删改查，筛选功能。</li><li>课程列表页可以对不同字段进行排序。选择多条记录进行删除操作。</li><li>课程列表页：过滤器-&gt;选择字段范围等,搜索,导出csv，xml，json。</li><li>课程新增页面上传图片，富文本的编辑。时间选择，添加章节，添加课程资源。</li><li>日志记录：记录后台人员的操作</li></ul><p>学完后还可以将本网站改造成<code>电商网站</code>,<code>在线旅游</code>等其他网站</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/2A76h7im9k.png?imageslim" alt="mark"></p><h2 id="开发环境搭建任务"><a href="#开发环境搭建任务" class="headerlink" title="开发环境搭建任务"></a>开发环境搭建任务</h2><p>windows下通过<code>pycharm</code>和<code>virtualenv</code>搭建开发环境</p><h2 id="django基础知识回顾任务"><a href="#django基础知识回顾任务" class="headerlink" title="django基础知识回顾任务"></a>django基础知识回顾任务</h2><p>照顾基础薄弱同学: 通过留言板功能回顾django基础知识。</p><p><img src="http://myphoto.mtianyan.cn/blog/180106/c91fA7Lb5e.png?imageslim" alt="mark"></p><h2 id="数据库设计和xadmin搭建后台管理系统任务"><a href="#数据库设计和xadmin搭建后台管理系统任务" class="headerlink" title="数据库设计和xadmin搭建后台管理系统任务"></a>数据库设计和xadmin搭建后台管理系统任务</h2><p>通过业务分析设计<code>django</code>的每个<code>app</code>，设计<code>app</code>下的<code>model</code>。设计<code>外键关系</code>，通过django的<code>migrate</code>设计生成数据表。</p><p>然后将这些<code>model</code>注册到<code>xadmin</code>当中。为每个model配置<code>搜索</code>,<code>过滤字段</code>，以及<code>列表页的显示字段</code>。配置xadmin的<code>主题选择</code>功能。</p><p><img src="http://upload-images.jianshu.io/upload_images/1779926-5e9910e92bdef649.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="后台设计工作"></p><h2 id="系统功能模块实现任务"><a href="#系统功能模块实现任务" class="headerlink" title="系统功能模块实现任务"></a>系统功能模块实现任务</h2><p><strong>实现所有后台功能 &amp; 面试中经常被提及的web开发知识。</strong></p><p><strong>几乎所有的django常用模块：</strong></p><ul><li><code>setting</code>配置</li><li><code>url</code>配置</li><li><code>view</code>书写</li><li><code>model</code>设计</li><li><code>form</code>和<code>modelform</code>的使用</li><li><code>templates</code>模板的使用</li><li><code>django</code>常用的内置函数</li></ul><h2 id="web系统知识以及网络安全任务"><a href="#web系统知识以及网络安全任务" class="headerlink" title="web系统知识以及网络安全任务"></a>web系统知识以及网络安全任务</h2><p><strong>防止一些攻击问题：</strong></p><ul><li>sql注入</li><li>xss攻击</li><li>crsf攻击</li></ul><p>这些攻击的原理以及防护措施</p><h2 id="xadmin扩展知识"><a href="#xadmin扩展知识" class="headerlink" title="xadmin扩展知识"></a>xadmin扩展知识</h2><p><strong>掌握更多可定制功能:</strong></p><ul><li>权限管理</li><li>权限配置</li><li>权限，用户，组之间的关系。</li><li>xadmin常用插件</li><li>如何自定义xadmin插件</li><li>xadmin的富文本编辑功能</li><li>xadmin的excel导入功能。</li></ul><p>还会用到一些开源的django开发库。</p><p><img src="http://myphoto.mtianyan.cn/blog/180106/eGhG2Kk51D.png?imageslim" alt="mark"></p><p>不管是想全面学习Django还是想做一个线上教育平台都可以满足要求。学习完Django,我们对于学习其他框架和通过Django搭建我们自己的系统，都会成为很简单的事情。</p><blockquote class="blockquote-center"><p>老话总是没错的，工欲善其事，苟…</p></blockquote><div class="note success"><p>使用Django+Xadmin打造在线教育平台</p><ul><li>第二章：windows下搭建开发环境<br>教你安装pycharm,mysql,navicat,python相关环境。<br>教程仓库地址1: <a href="https://github.com/mtianyan/DjangoGetStarted" target="_blank" rel="noopener">https://github.com/mtianyan/DjangoGetStarted</a></li></ul></div><h1 id="windows下搭建开发环境"><a href="#windows下搭建开发环境" class="headerlink" title="windows下搭建开发环境"></a>windows下搭建开发环境</h1><h2 id="2-1-pycharm-mysql-Navicat安装。"><a href="#2-1-pycharm-mysql-Navicat安装。" class="headerlink" title="2-1 pycharm,mysql,Navicat安装。"></a>2-1 pycharm,mysql,Navicat安装。</h2><p><strong>环境搭建：</strong></p><blockquote><ul><li>pycharm (我：PyCharm 2017.3.2)</li><li>mysql for windows(mysql-installer-community-5.7.20)</li><li>navicat for mysql(我：Navicat Premium）</li><li>python2.7</li></ul></blockquote><p> <strong>提醒：记住自己设置的mysql密码</strong></p><h3 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h3><p>百度”mysql for windows” 直接在百度软件中心下载即可</p><p><img src="http://myphoto.mtianyan.cn/blog/180106/J808E5JA1i.png?imageslim" alt="mark"></p><p>如果你的电脑跟我电脑一样空，推荐遵循我的：</p><ol><li>点击接受协议</li><li>选择Custom选项。(如果默认选项，会发生必要条件缺失：如我电脑没有VS和py3.4)</li></ol><p><img src="http://myphoto.mtianyan.cn/blog/180106/A7Cb96mEce.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180106/66L7DaJJCK.png?imageslim" alt="mark"></p><ul><li>下图页面点击<code>next</code>会显示我们不满足的条件，<code>back</code>后点击绿色箭头移除。</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180106/8C2KL0HaI4.png?imageslim" alt="mark"></p><ul><li>所有条件都达成，点击<code>Execute</code>，等待安装完成。</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180106/78kgLjJl4F.png?imageslim" alt="mark"></p><blockquote><p>均为绿色代表安装完成。</p></blockquote><ul><li>一直默认选择直到下图页面。设置密码，添加用户(可选)</li></ul><blockquote><p><strong>注意：记住自己设置的mysql密码</strong></p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180106/c8aLD2mdC4.png?imageslim" alt="mark"></p><blockquote><p>之后全部默认下一步。直到安装完成<code>Finish</code></p></blockquote><p>这时Navicat已经可以正常连接了。如果想让<code>mysql</code>命令在cmd下可使用。</p><p><code>C:\Program Files\MySQL\MySQL Server 5.7\bin</code> (自行替换为自己的mysql.exe地址)加入环境变量中。</p><p><img src="http://myphoto.mtianyan.cn/blog/180106/DL51BD687G.png?imageslim" alt="mark"></p><p>通过<code>mysql -uroot -p</code>命令可以进行登入mysql控制台。</p><p><img src="http://myphoto.mtianyan.cn/blog/180106/h1Aa2aJ0G4.png?imageslim" alt="mark"></p><h3 id="Navicat"><a href="#Navicat" class="headerlink" title="Navicat"></a>Navicat</h3><p>安装指南：下一步下一步。</p><p>下载地址：<a href="http://www.navicat.com.cn/download/navicat-for-mysql" target="_blank" rel="noopener">http://www.navicat.com.cn/download/navicat-for-mysql</a></p><p>我的安装目录: <code>C:\software\Navicat Premium 12</code></p><h3 id="PyCharm-2017-3-2"><a href="#PyCharm-2017-3-2" class="headerlink" title="PyCharm 2017.3.2"></a>PyCharm 2017.3.2</h3><p>pycharm官方下载链接：<a href="https://www.jetbrains.com/pycharm/download/#section=windows" target="_blank" rel="noopener">https://www.jetbrains.com/pycharm/download/#section=windows</a></p><p><strong>我们要选择专业版（Professional）</strong>因为只有专业版才能够新建django项目,免费社区版不能。</p><p><strong>为Pycharm添加解释器：</strong></p><p><code>setting</code> - <code>Project Interpreter</code>：</p><p><img src="http://oerdwodsk.bkt.clouddn.com/blog/180103/E72AIkEB07.png?imageslim" alt="mark"></p><p><img src="http://oerdwodsk.bkt.clouddn.com/blog/180103/D3jB3C6A9g.png?imageslim" alt="mark"></p><p>一直定位到 <code>python.exe</code> 点击确认。</p><h3 id="Python2-7安装"><a href="#Python2-7安装" class="headerlink" title="Python2.7安装"></a>Python2.7安装</h3><p>推荐阅读：<strong>Python开发环境搭建指南(Anaconda2,3共存)</strong></p><blockquote><p>推荐选择进阶版本, 方便升级到3.6。</p></blockquote><p><a href="http://blog.mtianyan.cn/post/230a7ad6.html">http://blog.mtianyan.cn/post/230a7ad6.html</a></p><h2 id="2-2-virtualenv安装和配置"><a href="#2-2-virtualenv安装和配置" class="headerlink" title="2-2 virtualenv安装和配置"></a>2-2 virtualenv安装和配置</h2><h3 id="virtualenv介绍"><a href="#virtualenv介绍" class="headerlink" title="virtualenv介绍"></a>virtualenv介绍</h3><blockquote><p>每个应用可能需要各自拥有一套<code>独立</code>的Python运行环境。virtualenv就是用来为一个应用创建一套<code>隔离</code>的Python运行环境。</p></blockquote><p><strong>virtualenv优点：</strong></p><p><img src="http://myphoto.mtianyan.cn/blog/180106/AmbE1564gJ.png?imageslim" alt="mark"></p><p>它是将全局Python解释器进行私有化复制。<br>如果不使用虚拟环境，默认的<code>pip</code>安装都会安装到同一个目录(java是把自己需要的包放到自己项目目录)，不同项目使用起来会产生问题</p><h3 id="安装virtualenv"><a href="#安装virtualenv" class="headerlink" title="安装virtualenv"></a>安装virtualenv</h3><p>进入cmd，（确保自己的pip已经可用）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenv</span><br><span class="line">virtualenv testvir</span><br><span class="line"><span class="comment"># 在当前用户目录(win+r %HOMEPATH%可查看)生成</span></span><br><span class="line">cd %homepath%</span><br><span class="line">cd testvir</span><br><span class="line">cd Scripts</span><br><span class="line">activate.bat <span class="comment">#激活</span></span><br><span class="line">pip list </span><br><span class="line">deactivate.bat</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180106/lCIHhf568m.png?imageslim" alt="mark"></p><p>默认使用<code>virtualenv testvir</code>该命令，会将虚拟环境创建在我们当前用户目录。</p><p><strong>注意：</strong>我的目录在桌面是我的cmder设置的、还请自行<code>cd %homepath%</code>前往自己的目录</p><p>这样直接使用步骤有写过于繁琐。所以我们使用<code>virtualenvwrapper</code></p><h3 id="virtualenvwrapper安装"><a href="#virtualenvwrapper安装" class="headerlink" title="virtualenvwrapper安装"></a>virtualenvwrapper安装</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenvwrapper-win</span><br><span class="line">pip install virtualenvwrapper(Linux)</span><br></pre></td></tr></table></figure><ul><li>创建虚拟环境</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv DjangoTest</span><br></pre></td></tr></table></figure><p>会创建在<code>C:\Users\mtian\Envs</code>当前用户目录下的Envs目录。</p><p>修改<code>mkvirtualenv</code>创建的目录：新增环境变量<code>WORKON_HOME</code></p><p><img src="http://myphoto.mtianyan.cn/blog/180106/A2im5He9fK.png?imageslim" alt="mark"></p><ul><li><p>退出激活状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure></li><li><p>知道有哪些虚拟环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">workon</span><br></pre></td></tr></table></figure></li><li><p>直接进入虚拟环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">workon DjangoTest</span><br></pre></td></tr></table></figure></li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180107/1cJK2F43I0.png?imageslim" alt="mark"></p><p><strong>注意</strong>前面的<code>(DjangoTest)</code>代表进入了虚拟环境。</p><p>执行<code>workon</code>命令之后，执行<code>pip install django==1.9.8</code>安装。</p><h2 id="2-3-Pycharm和Navicat的简单使用"><a href="#2-3-Pycharm和Navicat的简单使用" class="headerlink" title="2-3 Pycharm和Navicat的简单使用"></a>2-3 Pycharm和Navicat的简单使用</h2><h3 id="pycharm简单使用："><a href="#pycharm简单使用：" class="headerlink" title="pycharm简单使用："></a>pycharm简单使用：</h3><p><code>Setting -&gt; reopen</code>取消默认打开上一次项目</p><h4 id="新建项目并验证成功运行"><a href="#新建项目并验证成功运行" class="headerlink" title="新建项目并验证成功运行"></a>新建项目并验证成功运行</h4><ul><li>如何新建django项目：</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180106/d5a87Gid1f.png?imageslim" alt="mark"></p><blockquote><p>选择好自己的项目的解释器为我们新建的虚拟环境。</p></blockquote><p>新建<code>project</code>-&gt;<code>djangotestProj</code> 。别忘了为我们的虚拟环境安装<code>Django</code></p><ul><li>检查django环境是否安装好。<code>interpreter</code> </li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180106/6CjH0H1l5c.png?imageslim" alt="mark"></p><ul><li>点击导航栏的<code>run</code>可以直接运行我们的django项目</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180106/eKh4AC1mhB.png?imageslim" alt="mark"></p><blockquote><p>上图说明我们的django已经安装并且可以正常运行。</p></blockquote><p>点击浏览器打开<code>http://127.0.0.1:8000/</code>进行验证。</p><p><img src="http://myphoto.mtianyan.cn/blog/180106/0cFDmJdChd.png?imageslim" alt="mark"></p><p>出现上画面代表我们<strong>大功告成</strong></p><h4 id="设置eclipse快捷键-keymap"><a href="#设置eclipse快捷键-keymap" class="headerlink" title="设置eclipse快捷键 - keymap"></a>设置eclipse快捷键 - keymap</h4><p>选择<code>setting</code>搜索<code>keymap</code>设置<code>eclipse</code>快捷键</p><blockquote><p>比如 <code>ctrl + H</code> 全局搜索</p></blockquote><h4 id="Run-edit配置修改"><a href="#Run-edit配置修改" class="headerlink" title="Run edit配置修改"></a>Run edit配置修改</h4><p><img src="http://myphoto.mtianyan.cn/blog/180106/ifi4mGE7C9.png?imageslim" alt="mark"></p><p>点击上图中<code>run edit</code> 可对Django运行时的一些设置进行修改。</p><p>比如修改host为<code>0.0.0.0</code>，然后就可以设置监听本机ip。然后点击<code>run</code></p><p>进入<code>cmd</code>下输入<code>ipconfig</code>查询自己的ip</p><p><img src="http://myphoto.mtianyan.cn/blog/180106/6lCEGEAJjL.png?imageslim" alt="mark"></p><blockquote><p>例如我的是<code>192.168.0.4</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.168.0.4:8000/ 来访问。</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180106/7gBl6DHb6d.png?imageslim" alt="mark"></p><h4 id="目录颜色不同的原因"><a href="#目录颜色不同的原因" class="headerlink" title="目录颜色不同的原因"></a>目录颜色不同的原因</h4><p><img src="http://myphoto.mtianyan.cn/blog/180106/JAJCHgBflc.png?imageslim" alt="mark"></p><p>可以看到不同的目录颜色不同。这是我们可以进行设置的，为了可以做到智能提示。</p><p><img src="http://myphoto.mtianyan.cn/blog/180106/E2GFBe08Gb.png?imageslim" alt="mark"></p><p>右键可以将<code>template</code>目录<code>unmark</code></p><p><img src="http://myphoto.mtianyan.cn/blog/180106/3BicA3E8aj.png?imageslim" alt="mark"></p><p>可以看到上图目录是灰色的。但是我们<code>右键mark</code>为<code>source Root</code>目录，会变为蓝色。</p><p><img src="http://myphoto.mtianyan.cn/blog/180106/mLGD68DB8H.png?imageslim" alt="mark"></p><blockquote><p>这意味着我们在<code>import</code>时pycharm会根据设置智能提示。<br>如果不mark可能会出现很多我们在pycharm中报红色，<br>但是cmd确可以运行的情况。</p></blockquote><h3 id="navicat基本使用"><a href="#navicat基本使用" class="headerlink" title="navicat基本使用"></a>navicat基本使用</h3><h3 id="新建连接"><a href="#新建连接" class="headerlink" title="新建连接"></a>新建连接</h3><p><img src="http://myphoto.mtianyan.cn/blog/180106/D7FEGgIiC6.png?imageslim" alt="mark"></p><blockquote><p>点击新建一个mysql的连接。</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180106/hAB7KkaB29.png?imageslim" alt="mark"></p><blockquote><p>连接名自行设置，密码填自己安装mysql时设置的密码。</p></blockquote><h3 id="右键新建数据库"><a href="#右键新建数据库" class="headerlink" title="右键新建数据库"></a>右键新建数据库</h3><p><img src="http://myphoto.mtianyan.cn/blog/180106/maL6ccLG90.png?imageslim" alt="mark"></p><blockquote><p>数据库名自行设置，<code>utf-8</code> <code>utf_general_ci</code><br><strong>注意：这里请与图中选择一致。否则保存中文可能出错</strong></p></blockquote><h3 id="新建数据表"><a href="#新建数据表" class="headerlink" title="新建数据表"></a>新建数据表</h3><p>双击数据库<code>testdjango</code>使他变绿，然后选中表，然后右键新建表。或使用右侧<code>新建表</code>按钮</p><p><img src="http://myphoto.mtianyan.cn/blog/180106/Kd0cAeCj1H.png?imageslim" alt="mark"></p><p>输入必要的字段然后使用<code>ctrl + s</code> 进行保存并输入表名。</p><h3 id="增加数据"><a href="#增加数据" class="headerlink" title="增加数据"></a>增加数据</h3><blockquote><p>双击表，可以展示我们的数据，这时候我们可以自行修改值。<br>点击左下角可以新增更多行。并且状态栏会显示一些sql语句信息</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180106/GFCgBHH2fC.png?imageslim" alt="mark"></p><h3 id="设计表"><a href="#设计表" class="headerlink" title="设计表"></a>设计表</h3><p>右键设计表：我们可以添加字段</p><p><img src="http://myphoto.mtianyan.cn/blog/180106/ajiDfHmBim.png?imageslim" alt="mark"></p><h3 id="Sql语句查询"><a href="#Sql语句查询" class="headerlink" title="Sql语句查询"></a>Sql语句查询</h3><p>点击查询，新建查询。我们可以输入Sql语句进行查询。</p><p><img src="http://myphoto.mtianyan.cn/blog/180106/1b0h7dh3AC.png?imageslim" alt="mark"></p><h3 id="表的复制粘贴与数据库传输。数据库导入导出。"><a href="#表的复制粘贴与数据库传输。数据库导入导出。" class="headerlink" title="表的复制粘贴与数据库传输。数据库导入导出。"></a>表的复制粘贴与数据库传输。数据库导入导出。</h3><blockquote><p>Navicat支持我们把不同数据库的表之间的复制粘贴操作。<br>支持数据传输：点击工具数据传输</p></blockquote><p>导出：在数据库上右键我们可以<code>转储SQL文件</code>: 可以选择只转存结构。或连带数据一起。<br>导入：右键点击运行SQL文件。<br>对于表的操作：删除，清空等，在点击表的右键菜单里。</p><blockquote class="blockquote-center"><p>小项目不扫何以扫天下 </p></blockquote><div class="note success"><p>使用Django+Xadmin打造在线教育平台</p><ul><li>第三章：通过留言板功能回顾django基础知识<br>通过做一个小留言板，学习django基础知识<br>教程仓库地址1: <a href="https://github.com/mtianyan/DjangoGetStarted" target="_blank" rel="noopener">https://github.com/mtianyan/DjangoGetStarted</a></li></ul></div><h1 id="通过留言版功能回顾django基础知识"><a href="#通过留言版功能回顾django基础知识" class="headerlink" title="通过留言版功能回顾django基础知识"></a>通过留言版功能回顾django基础知识</h1><p>教程中本章对应上传的仓库为: <a href="https://github.com/mtianyan/DjangoGetStarted" target="_blank" rel="noopener">https://github.com/mtianyan/DjangoGetStarted</a></p><blockquote><p>对应第一次commit:留言板仓库初始化。内容截止3-1一章结束。</p></blockquote><ul><li>将对于django目录结构，使用Django快速搭建可以提交的表单页面，models.py , urls.py, views.py。</li><li>从数据库中取出数据展示到html中：Django Template的配置。</li><li>即django的基础知识通过这个留言板项目进行一个全面细致的学习。</li></ul><h2 id="3-1-django目录结构"><a href="#3-1-django目录结构" class="headerlink" title="3-1 django目录结构"></a>3-1 django目录结构</h2><p>django目录：</p><pre><code>projectname : 保存Django项目的urls,setting，uwsgi文件</code></pre><p>如下图新建一个Django项目<code>DjangoGetStarted</code>，使用我们上章节中已存在的虚拟环境<code>DjangoTest</code> (里面已经装好了django)</p><p><img src="http://myphoto.mtianyan.cn/blog/180106/BKLg4JDJCe.png?imageslim" alt="mark"></p><h3 id="django自动生成的目录"><a href="#django自动生成的目录" class="headerlink" title="django自动生成的目录"></a>django自动生成的目录</h3><p>初始化完成后的目录如下：(如果不是，那么你们可能创建的不是django项目)</p><p><img src="http://myphoto.mtianyan.cn/blog/180106/3aIIDddEmc.png?imageslim" alt="mark"></p><p>可以看到主目录<code>DjangoGetStarted</code>与项目目录<code>DjangoGetStarted</code></p><ul><li>DjangoGetStarted(文件夹)：    <ul><li>setting.py： 项目全局配置文件</li><li>urls.py： 主要的urls配置入口</li><li>wsgi.py： 是Django启动需要的文件。</li></ul></li><li>templates(文件夹)： 放置html文件</li><li>manage.py： 启动Django需要的主要文件。(主要的Django命令都通过manage.py运行)</li></ul><h3 id="还需要我们自己创建的目录"><a href="#还需要我们自己创建的目录" class="headerlink" title="还需要我们自己创建的目录"></a>还需要我们自己创建的目录</h3><p>app是Django里一个一个应用的文件夹单位。</p><p>通过 <code>Tools -&gt; Run manage.py Task</code>创建app：</p><p><img src="http://myphoto.mtianyan.cn/blog/180106/lFgLChlhdc.png?imageslim" alt="mark"></p><h4 id="startapp-message"><a href="#startapp-message" class="headerlink" title="startapp message"></a>startapp message</h4><p>可以看到当输入<code>startapp message</code>之后，创建了<code>message</code>应用。并存放在了：与项目目录同级目录。</p><p><img src="http://myphoto.mtianyan.cn/blog/180106/Ef2F5Bf7FA.png?imageslim" alt="mark"></p><h4 id="新建static目录"><a href="#新建static目录" class="headerlink" title="新建static目录"></a>新建static目录</h4><p>使用<code>static</code>目录来存放网站的静态文件：js，css，图片等。</p><h4 id="新建log目录"><a href="#新建log目录" class="headerlink" title="新建log目录"></a>新建log目录</h4><p>使用<code>log</code>目录来存放网站的日志文件</p><h4 id="新建media目录"><a href="#新建media目录" class="headerlink" title="新建media目录"></a>新建media目录</h4><p>使用<code>media</code>目录存放用户上传的图片等资源。</p><h4 id="解决项目大了之后app过多问题"><a href="#解决项目大了之后app过多问题" class="headerlink" title="解决项目大了之后app过多问题"></a>解决项目大了之后app过多问题</h4><ol><li>新建文件夹 <code>apps</code></li><li>将<code>message</code>文件夹拖入<code>apps</code>文件夹内：会自动生成<code>__init__.py</code>文件表明这是一个包。使得apps文件夹可导入。</li></ol><p><img src="http://myphoto.mtianyan.cn/blog/180106/3625a0imed.png?imageslim" alt="mark"></p><blockquote><p>这时我们就会发现在导入我们的message的内容就得配置较长的路径。</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180107/k10eEBg357.png?imageslim" alt="mark"></p><blockquote><p>每次前面都得加上<code>apps.</code>，这可烦死人啦。</p></blockquote><p><strong>解决方案奉上</strong></p><blockquote><p>将<code>apps</code>目录右键<code>mark</code>成<code>Source Root</code>(Mark 方法查看第一章pycharm简单使用：目录颜色不同的原因)</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180107/I9255edkaF.png?imageslim" alt="mark"></p><p>mark成功之后<strong>变蓝</strong>(变绿的话，只能摸摸头了，当然选择原谅)，然后可以直接使用短路径进行import</p><h4 id="Mark后Pycharm-不报错，Cmd下运行报错。"><a href="#Mark后Pycharm-不报错，Cmd下运行报错。" class="headerlink" title="Mark后Pycharm 不报错，Cmd下运行报错。"></a>Mark后Pycharm 不报错，Cmd下运行报错。</h4><p>Mark后pycharm知道这是一个项目的<code>Souce Root</code>路径了，但是cmd并不知道。</p><blockquote><p>在项目目录下通过cmd命令行使用<code>python manage.py runserver</code></p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180107/2043A3KagE.png?imageslim" alt="mark"></p><blockquote><p>pycharm中mark只是pycharm自身可以进行识别短路径。</p></blockquote><p><strong>解决方案：</strong></p><blockquote><p>我们在setting文件中配置我们的<code>apps</code>路径:</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180107/IhD2bJDI6K.png?imageslim" alt="mark"></p><blockquote><p>图解读：我们需要在setting中向上图一样设置,程序就会接着报错。(换了一个错误了，滑稽脸)</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.insert(<span class="number">0</span>,os.path.join(BASE_DIR,<span class="string">'apps'</span>))</span><br></pre></td></tr></table></figure><p>上述代码为将apps拼接项目绝对路径后的路径插入当前系统的环境变量path中，这样就可以成功解决(个屁屁啊)。</p><p>成功性测试(测试已失败)：</p><blockquote><p>这个import放到manage.py文件是不行的 你把manage.py中这行删除 因为django整个的配置还没有启动好 import django的model是不行的，</p></blockquote><p>插播：忘了失败吧，我偷学下面方法养你。</p><p><strong>终极解决：将这个<code>import</code>方法比如urls.py.等可以成功启动。</strong>或者自行删除该import。</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/b230j2d65e.png?imageslim" alt="mark"></p><p>红色警告：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">You have unapplied migrations; your app may not work properly </span><br><span class="line">until they are applied. Run &apos;python manage.py migrate&apos; to apply them.</span><br></pre></td></tr></table></figure></p><p>是因为我们没有进行数据库<code>models</code>进行初始化<code>migrate</code>.</p><p><code>python manage.py migrate</code>我们之后会用到，现在不要做。</p><h3 id="github仓库项目初始化第一次commit。"><a href="#github仓库项目初始化第一次commit。" class="headerlink" title="github仓库项目初始化第一次commit。"></a>github仓库项目初始化第一次commit。</h3><p><img src="http://myphoto.mtianyan.cn/blog/180107/aFheliD18B.png?imageslim" alt="mark"></p><blockquote><p>输入用户名密码，点击login。</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180107/ci4AKb7Lb0.png?imageslim" alt="mark"></p><blockquote><p>选择左侧导航中<code>Git</code> 设置你的git.exe的路径</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180107/6Af7m9cI0i.png?imageslim" alt="mark"></p><p>点击<code>Share project on GitHub</code>会弹出下图窗口</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/JjH1FjmB0i.png?imageslim" alt="mark"></p><p>填写你的项目<code>名称</code>，<code>描述</code>。点击<code>share</code>。</p><p>会弹窗让你选择需要上传的项目文件与commit信息。然后将项目上传至github。</p><p><strong>我教程中上传的仓库为:  <a href="https://github.com/mtianyan/DjangoGetStarted" target="_blank" rel="noopener">https://github.com/mtianyan/DjangoGetStarted</a></strong></p><blockquote><p>对应第一次commit:留言板仓库初始化。内容截止3-1一章结束。</p></blockquote><h2 id="3-2-配置表单页面"><a href="#3-2-配置表单页面" class="headerlink" title="3-2 配置表单页面"></a>3-2 配置表单页面</h2><blockquote><p>上节教程(来学习本节前置条件):</p></blockquote><ul><li>对应第一次commit: 留言板仓库初始化。内容截止3-1一章结束。</li></ul><p><strong>github仓库地址：<a href="https://github.com/mtianyan/DjangoGetStarted" target="_blank" rel="noopener">https://github.com/mtianyan/DjangoGetStarted</a></strong></p><blockquote><p>本节我们学习将表单页面配置进django项目中</p></blockquote><h3 id="必要的该说的，该了解的"><a href="#必要的该说的，该了解的" class="headerlink" title="必要的该说的，该了解的"></a>必要的该说的，该了解的</h3><p><strong>前置条件：</strong></p><blockquote><p>你已经学习了前面教程。将项目的文件夹目录结构，setting配置等修改完毕与我保持一致。</p></blockquote><p>本节通过Django快速的配置一个<strong>留言板页面</strong>来学习</p><p>Django从请求到响应的整个完整流程。为我们开发在线教育平台打下基础。</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/ghebBaKDDa.png?imageslim" alt="mark"></p><p>上图便是本节教程所要用到的静态页面: 前往Github下载：<code>form.html</code></p><blockquote><p>具体的业务：填写信息 -&gt; 然后点击提交 -&gt;数据被存储到数据库。</p></blockquote><p>这个<code>html</code>是一个单文件，里面已经包含了<code>css</code> <code>js</code>内容。</p><h3 id="将html文件整合进项目操作步骤"><a href="#将html文件整合进项目操作步骤" class="headerlink" title="将html文件整合进项目操作步骤"></a>将html文件整合进项目操作步骤</h3><h4 id="将html文件直接复制进templates目录"><a href="#将html文件直接复制进templates目录" class="headerlink" title="将html文件直接复制进templates目录."></a>将<code>html</code>文件直接复制进<code>templates</code>目录.</h4><p><img src="http://myphoto.mtianyan.cn/blog/180107/bd7L9HEbB1.png?imageslim" alt="mark"></p><h4 id="创建static目录下的css文件夹-和-static-js"><a href="#创建static目录下的css文件夹-和-static-js" class="headerlink" title="创建static目录下的css文件夹 和 static/js"></a>创建<code>static目录下的css文件夹</code> 和 <code>static/js</code></h4><ul><li>在css中再新建一个<code>style.css</code></li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180107/7L3m4291JK.png?imageslim" alt="mark"></p><ul><li><code>form.html</code>中点击<code>&lt;style&gt;</code>标签左侧减号。将style内容收成一行。然后把这一行内容<strong>剪切粘贴到</strong><code>style.css</code></li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180107/EJHc2DdkK2.png?imageslim" alt="mark"></p><ul><li><p>粘贴进去之后，<strong>将首尾两个<code>&lt;style&gt;</code>删除</strong>,<code>shift + tab</code>可以将css格式化更整齐。</p></li><li><p>在<code>form.html</code>新建<code>&lt;link&gt;</code>来引入css。(文件里其实已经先加上了，学一种操作而已)</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/static/css/style.css"</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置Django连接Mysql数据库"><a href="#配置Django连接Mysql数据库" class="headerlink" title="配置Django连接Mysql数据库"></a>配置Django连接Mysql数据库</h3><p>在<code>setting.py</code> 大概80行找到:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    &apos;default&apos;: &#123;</span><br><span class="line">        &apos;ENGINE&apos;: &apos;django.db.backends.sqlite3&apos;,</span><br><span class="line">        &apos;NAME&apos;: os.path.join(BASE_DIR, &apos;db.sqlite3&apos;),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是Django默认与自己项目根目录下的<code>db.sqlite3</code>连接的设置。</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/00e3abbbFJ.png?imageslim" alt="mark"></p><p>我们的项目是与<code>mysql</code>连接，所以我们要改成如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    &apos;default&apos;: &#123;</span><br><span class="line">        &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;,</span><br><span class="line">        &apos;NAME&apos;: &apos;testdjango&apos;,</span><br><span class="line">        &apos;USER&apos;: &apos;root&apos;,</span><br><span class="line">        &apos;PASSWORD&apos;: &apos;密码&apos;,</span><br><span class="line">        &apos;HOST&apos;: &quot;127.0.0.1&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的<code>name</code>应设置为我们中在Navicat中新建的数据库名字。<strong>名字一定要保持一致</strong></p><p>这时要将我们之前建的表提前<strong>全部删除</strong>掉。</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/g8l89KCfam.png?imageslim" alt="mark"></p><h4 id="配置mysql驱动和seeting文件。"><a href="#配置mysql驱动和seeting文件。" class="headerlink" title="配置mysql驱动和seeting文件。"></a>配置mysql驱动和seeting文件。</h4><p>点击<code>Tools 菜单下 Run manage.py Task</code>我们会发现报错了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">    raise ImproperlyConfigured(&quot;Error loading MySQLdb module: %s&quot; % e)</span><br><span class="line">django.core.exceptions.ImproperlyConfigured: Error loading MySQLdb module: No module named MySQLdb</span><br></pre></td></tr></table></figure><blockquote><p>由错误信息我们可以看出是因为没有安装数据库驱动模块<code>MySQLdb</code></p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180107/lJKDjik9Cb.png?imageslim" alt="mark"></p><p><code>cmd</code>下<code>workon</code>进我们的虚拟环境目录。<code>pip install mysql-python</code><br>然后会发现报错：</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/65Gad4D4l9.png?imageslim" alt="mark"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">_mysql.c(42) : fatal error C1083: Cannot open include file: &apos;config-win.h&apos;: </span><br><span class="line">No such file or directory error: command </span><br><span class="line">&apos;&quot;C:\Users\mtian\AppData\Local\Programs\Common\Microsoft\Visual C ++ </span><br><span class="line">for Python\9.0\VC\Bin\amd64\cl.exe&quot;&apos; failed with exit status 2</span><br></pre></td></tr></table></figure><p>前往地址 <a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#mysql-python" target="_blank" rel="noopener">https://www.lfd.uci.edu/~gohlke/pythonlibs/#mysql-python</a></p><p>下载<code>MySQL_python_1.2.5_cp27_none_win_amd64.whl</code>到本地,放到桌面。<br>然后使用下面命令进行安装：注意是在虚拟环境下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd Desktop</span><br><span class="line">pip install MySQL_python-1.2.5-cp27-none-win_amd64.whl</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180107/G60aadGLkJ.png?imageslim" alt="mark"></p><p>这个时候我们再次点击<code>Tools 菜单下 Run manage.py Task</code>会看到已经没有刚才的错误。<br><img src="http://myphoto.mtianyan.cn/blog/180107/4mF5KmaCKj.png?imageslim" alt="mark"><br>但是会有红框里的警告，<strong>面向强迫症解决方案是</strong>在<code>setting.py</code> 新增<code>STATIC_ROOT = &#39;/static/&#39;</code></p><p>但其实现在还没有用到这个参数。后面用到我们再配置。(推荐自行克服强迫症)</p><p>输入下面命令来生成表:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">makemigrations</span><br><span class="line">migrate</span><br></pre></td></tr></table></figure></p><p><img src="http://myphoto.mtianyan.cn/blog/180107/gaaL4hlAGj.png?imageslim" alt="mark"></p><p>这时我们去Navicat查看会发现为我们生成了很多表。</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/bK273a3j4D.png?imageslim" alt="mark"></p><p>这些都是Django系统默认的<strong>内置</strong>数据表。</p><p>做完这些操作我们可以点击<code>Run</code>来运行项目，<br>然后到<code>http://127.0.0.1:8000/</code>来访问看是否运行成功。成功页面(It worked)</p><h3 id="配置form页面展示出来："><a href="#配置form页面展示出来：" class="headerlink" title="配置form页面展示出来："></a>配置form页面展示出来：</h3><p><code>DjangoGetStarted/urls.py</code>修改如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^admin/'</span>, admin.site.urls),</span><br><span class="line">    url(<span class="string">r'^form/$'</span>, getform) <span class="comment">#这行是新增加的.</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>新增加<code>url(r&#39;^form/$&#39;, getform)</code>,<code>^</code>是代表以<code>form</code>为开头，<code>$</code>代表以<code>/</code>结尾的地址。<br>这里<code>getform</code> 是对于这个<code>url</code>的相应处理的<code>view</code>。我们先去创建一个.</p><p><code>message/views.py</code>添加如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getform</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'message_form.html'</span>)</span><br></pre></td></tr></table></figure><p><code>request</code> 参数是一个django的<code>http request</code>对象。(基础)<br>这里我们可以按住<code>ctrl</code> + <code>左键</code> 跟踪到我们的<code>render</code>函数里面。<br><code>Alt + 左箭头</code> 回来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">render</span><span class="params">(request, template_name,...)</span>:</span></span><br></pre></td></tr></table></figure><p>源代码解读：可以看到我们的<code>render</code>需要一个<code>request对象</code>和<code>template_name</code>参数</p><p><strong>注意：记性好的还记得我们提供的源文件是form.html</strong></p><blockquote><p>知识点：django内置了很多html页面，form会先从内置中寻找。所以我们得改。</p></blockquote><p>因此我们需要右键如下图<code>Refactor</code>修改<code>from.html</code> 为<code>message_form</code></p><p><img src="http://myphoto.mtianyan.cn/blog/180107/l0I7CGB2Be.png?imageslim" alt="mark"></p><p>如果我们的项目在运行，<code>ctrl + s</code>会自动重启我们的项目。</p><p>这时我们有了view，我们可以去配置完整的url了(前面已经配完整的检查一遍)：</p><p><code>DjangoGetStarted/urls.py</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from message.views import getform</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(r&apos;^admin/&apos;, admin.site.urls),</span><br><span class="line">    url(r&apos;^form/$&apos;, getform)</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p><strong>这里我们不能加括号</strong>否则会变成方法的调用。</p><p>按住<code>ctrl</code> + <code>render</code> 跟踪到我们的<code>url</code>函数里面查看源码如下:可以看到它除过一组正则表达式，还需要接收一个view对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">def url(regex, view,...):</span><br></pre></td></tr></table></figure><p>如果<code>getform</code>加上括号会报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TypeError: getform() takes exactly 1 argument (0 given)</span><br></pre></td></tr></table></figure><p>访问<code>http://127.0.0.1:8000/</code> 正常结果：Page not found</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Using the URLconf defined in DjangoGetStarted.urls, Django tried these URL patterns, in this order:</span><br><span class="line"></span><br><span class="line">^admin/</span><br><span class="line">^form/$</span><br></pre></td></tr></table></figure><p>是因为我们在url中加入了个人的配置<code>^form/$</code>,它就不会采用默认配置了。</p><p>原因：(源码探究标记点)</p><p>这时访问：<a href="http://127.0.0.1:8000/form/" target="_blank" rel="noopener">http://127.0.0.1:8000/form/</a></p><p>旧版本pycharm会报：<code>TemplateDoesNotExist</code>错误。我的新版本pycharm并没有出现。</p><p>重要代码在<code>DjangoGetStarted/settings.py</code> 60行左右</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 指明我们的templates目录路径</span><br><span class="line">&apos;DIRS&apos;: [os.path.join(BASE_DIR, &apos;templates&apos;)]</span><br><span class="line"># 老版本pycharm创建django项目该值为空。</span><br></pre></td></tr></table></figure><p>现在再次访问 <a href="http://127.0.0.1:8000/form/" target="_blank" rel="noopener">http://127.0.0.1:8000/form/</a></p><p><strong>页面出来了但是样式没有。static目录下的css文件提示没有找到。</strong></p><p><img src="http://myphoto.mtianyan.cn/blog/180107/73EjmflBe9.png?imageslim" alt="mark"></p><p>Setting中静态文件的配置，这是因为我们setting中的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">STATIC_URL = &apos;/static/&apos;</span><br></pre></td></tr></table></figure><p>只说明了目录的名称。并没有指明查找的根路径。添加下面代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">STATIC_URL = &apos;/static/&apos;</span><br><span class="line">STATICFILES_DIRS = [</span><br><span class="line">    os.path.join(BASE_DIR, &apos;static&apos;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>过程中看似不停的出错</strong>，其实是为了让大家更好记住该记住的。</p><h3 id="项目配置流程图"><a href="#项目配置流程图" class="headerlink" title="项目配置流程图"></a>项目配置流程图</h3><p>我们刚才是以倒序：</p><ol><li>把html文件放进来</li><li>通过简单的url配置来访问html。</li><li>发现找不到页面，所以我们设置setting中<code>DIRS</code></li><li>文件找到了又说找不到静态文件，我们设置了<code>STATICFILES_DIRS</code></li></ol><p><img src="http://myphoto.mtianyan.cn/blog/180107/ihf44icl9d.png?imageslim" alt="mark"></p><p>这是我们的整体流程图，推荐新建一个项目再按照正向流程图来一遍。</p><p>后面我们的工作会围绕从<code>migration生成数据表往下的内容</code>展开。</p><p>GitHub地址：<a href="https://github.com/mtianyan/DjangoGetStarted" target="_blank" rel="noopener">https://github.com/mtianyan/DjangoGetStarted</a></p><blockquote><p>本节结束对应于commit：</p></blockquote><h2 id="3-3-django-orm介绍与model设计"><a href="#3-3-django-orm介绍与model设计" class="headerlink" title="3-3 django orm介绍与model设计"></a>3-3 django orm介绍与model设计</h2><p>上节教程完成后代码(来学习本节前置条件):</p><p><strong>github仓库地址：<a href="https://github.com/mtianyan/DjangoGetStarted" target="_blank" rel="noopener">https://github.com/mtianyan/DjangoGetStarted</a></strong></p><ul><li>对应commit: 留言板前端页面展示。本次内容截止教程3-2结束。</li></ul><blockquote><p>可能现在你还在通过手写sql语句来操作数据库，当我们有了orm，数据库操作变得很简单。这一小节我们来学习Django中的orm。</p></blockquote><h3 id="原生sql-与-orm"><a href="#原生sql-与-orm" class="headerlink" title="原生sql 与 orm"></a>原生sql 与 orm</h3><p>没有orm 的情况下message/views.py代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import MySQLdb</span><br><span class="line"></span><br><span class="line"># 使用原生sql获取书的列表</span><br><span class="line">def book_list(request):</span><br><span class="line">    # 创建到数据库的连接: 指明用户名，数据库，密码</span><br><span class="line">    db = MySQLdb.connect(user = &apos;me&apos;, db=&apos;mydb&apos;, passwd=&apos;secret&apos;, host=&apos;localhost&apos;)</span><br><span class="line">    # 创建一个游标对象执行器</span><br><span class="line">    cursor = db.cursor()</span><br><span class="line">    # 书写我们需要的sql语句</span><br><span class="line">    cursor.execute(&apos;SELECT name FROM books ORDER BY name&apos;)</span><br><span class="line">    # 对于fetchall()的结果做遍历，将遍历回来的结果当做数组，取第0个值name。</span><br><span class="line">    names = [row[0] for row in cursor.fetchall()]</span><br><span class="line">    db.close()</span><br></pre></td></tr></table></figure><p>可不可以让数据库字段的查询和使用类的一个属性一样简单？没错登登登：orm上场了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">book:name</span><br><span class="line"></span><br><span class="line">book.name</span><br><span class="line">book.save()</span><br></pre></td></tr></table></figure><p>Django的orm就是为了让我们不再写上面那样的语句，而是像使操作数据库像使用类和类属性一样。</p><h3 id="创建我们的models"><a href="#创建我们的models" class="headerlink" title="创建我们的models"></a>创建我们的models</h3><blockquote><p>verbose_name:对象的人类可读的名称，单数:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">verbose_name = <span class="string">"pizza"</span></span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class Meta，内嵌于 UserMessage 这个类的定义中</span><br><span class="line">如果 class Publisher 是顶格的，那么 class Meta 在它之下要缩进4个空格－－按 Python 的传统</span><br><span class="line">你可以在任意一个 模型 类中使用 Meta 类，来设置一些与特定模型相关的选项。</span><br><span class="line">如：设置ordering = [&apos;name&apos;]，默认地都会按 name 字段排序</span><br></pre></td></tr></table></figure><p>message/models.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 继承于django.db.models.Model</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserMessage</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># 设置最大长度，verbose_name在后台显示字段会用到</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">20</span>, verbose_name=<span class="string">u"用户名"</span>)</span><br><span class="line">    <span class="comment"># Django提供内置的邮箱字段会帮忙验证` default_validators = [validators.validate_email]`</span></span><br><span class="line">    email = models.EmailField(verbose_name=<span class="string">u"邮箱"</span>)</span><br><span class="line">    address = models.CharField(max_length=<span class="number">100</span>, verbose_name=<span class="string">u"联系地址"</span>)</span><br><span class="line">    message = models.CharField(max_length=<span class="number">500</span>, verbose_name=<span class="string">u"留言信息"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">u"用户留言信息"</span></span><br><span class="line">        <span class="comment"># db_table ，这里我们让它自动生成所以不用指定</span></span><br></pre></td></tr></table></figure><p>这时我们执行<code>makemigrations messages</code>会发现并没有改动。</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/bCK3e2eF9C.png?imageslim" alt="mark"></p><blockquote><p>因为setting中我们没有注册我们的app: message</p></blockquote><p><strong>注意：新建的app都要在setting中注册</strong></p><h3 id="在setting中注册我们的app"><a href="#在setting中注册我们的app" class="headerlink" title="在setting中注册我们的app"></a>在setting中注册我们的app</h3><p>DjangoGetStarted/settings.py 大概36行<code>INSTALLED_APPS</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">`INSTALLED_APPS`</span><br><span class="line">[</span><br><span class="line">    前面的不用变，后面新增下一行</span><br><span class="line">    &apos;message&apos;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这时候我们重新运行<code>Tools 菜单下 Run manage.py Task</code>会提示：</p><p>如果提示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SyntaxError: Non-ASCII character &apos;\xe7&apos; in file D:\CodeSpace\PythonProject\DjangoGetStarted\apps\message\models.py on line</span><br></pre></td></tr></table></figure></p><p>请注意可能你忘记在写过中文的地方加上:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#coding: utf-8</span><br></pre></td></tr></table></figure><p><strong>注意必须加在第一或二行。</strong></p><p>然后执行下面命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">makemigrations message</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180107/7j9GC32b44.png?imageslim" alt="mark"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">migrate message 生成数据表</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180107/dbKECKEBFg.png?imageslim" alt="mark"></p><p>前往Navicat验证：</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/26GK5BjhCd.png?imageslim" alt="mark"></p><blockquote><p>可以看到我们的数据表已经创建成功。默认数据表名称为<code>app名称_类名转换为小写</code><br>自动生成的id作为主键。</p></blockquote><h3 id="Models讲解"><a href="#Models讲解" class="headerlink" title="Models讲解"></a>Models讲解</h3><p>除过普通的对应数据库的字段类型如<code>CharField</code>，还有很多高级类型。如<code>EmailField</code>提供email验证。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">models.ForeignKey     # 外键</span><br><span class="line">models.DateTimeField  # 时间字段</span><br><span class="line">models.IntegerField   # 整型</span><br><span class="line">models.IPAddressField # IP地址</span><br><span class="line">models.FileField      # 上传文件</span><br><span class="line">models.ImageField     # 图片</span><br></pre></td></tr></table></figure><blockquote><p>ctrl按住+左键点击<code>models</code> 进入之后点击<code>fields</code>拖到文件开始可以看到所有字段：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">__all__ = [str(x) for x in (</span><br><span class="line">    &apos;AutoField&apos;, &apos;BLANK_CHOICE_DASH&apos;, &apos;BigIntegerField&apos;, &apos;BinaryField&apos;,</span><br><span class="line">    &apos;BooleanField&apos;, &apos;CharField&apos;, &apos;CommaSeparatedIntegerField&apos;, &apos;DateField&apos;,</span><br><span class="line">    &apos;DateTimeField&apos;, &apos;DecimalField&apos;, &apos;DurationField&apos;, &apos;EmailField&apos;, &apos;Empty&apos;,</span><br><span class="line">    &apos;Field&apos;, &apos;FieldDoesNotExist&apos;, &apos;FilePathField&apos;, &apos;FloatField&apos;,</span><br><span class="line">    &apos;GenericIPAddressField&apos;, &apos;IPAddressField&apos;, &apos;IntegerField&apos;, &apos;NOT_PROVIDED&apos;,</span><br><span class="line">    &apos;NullBooleanField&apos;, &apos;PositiveIntegerField&apos;, &apos;PositiveSmallIntegerField&apos;,</span><br><span class="line">    &apos;SlugField&apos;, &apos;SmallIntegerField&apos;, &apos;TextField&apos;, &apos;TimeField&apos;, &apos;URLField&apos;,</span><br><span class="line">    &apos;UUIDField&apos;,</span><br><span class="line">)]</span><br></pre></td></tr></table></figure><h4 id="介绍字段参数"><a href="#介绍字段参数" class="headerlink" title="介绍字段参数"></a>介绍字段参数</h4><p><code>CharField</code>必须指明默认最大长度。<code>null=True,blank=True</code>指明字段可以为空<br><code>defalut = &quot; &quot;</code>指定默认值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name = models.CharField(max_length=20,null=True,blank=True, verbose_name=u&quot;用户名&quot;)</span><br></pre></td></tr></table></figure></p><p>id是自动生成的，如果需要自定义主键,message/models.py中添加字段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">object_id = models.CharField(primary_key=True, verbose_name=&quot;主键&quot;)</span><br></pre></td></tr></table></figure><p>此时点击<code>Tools 菜单下 Run manage.py Task</code>输入<code>makemigrations message</code></p><p><img src="http://myphoto.mtianyan.cn/blog/180107/IA82jEgmAG.png?imageslim" alt="mark"></p><p><strong>知识点：CharField必须指明最大长度</strong></p><p>object_id改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">object_id = models.CharField(primary_key=True, max_length=50 ,verbose_name=&quot;主键&quot;)</span><br></pre></td></tr></table></figure><p>这时点击<code>Tools 菜单下 Run manage.py Task</code>输入<code>makemigrations message</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">You are trying to add a non-nullable field <span class="string">'object_id'</span> to usermessage without a default; we can<span class="string">'t do that (the database needs something to populate existing rows).</span></span><br><span class="line"><span class="string">Please select a fix:</span></span><br><span class="line"><span class="string"> 1) Provide a one-off default now (will be set on all existing rows)</span></span><br><span class="line"><span class="string"> 2) Quit, and let me add a default in models.py</span></span><br></pre></td></tr></table></figure><p>根据提示信息，我们需要给<code>object_id</code>添加默认值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">object_id = models.CharField(primary_key=True, max_length=50,default=&quot;&quot;, verbose_name=&quot;主键&quot;)</span><br></pre></td></tr></table></figure><p><strong>get新知识点：object_id必须有默认值</strong></p><p>输入<code>2</code> 退出：然后输入<code>makemigrations message</code></p><p><img src="http://myphoto.mtianyan.cn/blog/180107/0HhH9l2B9G.png?imageslim" alt="mark"></p><p>再输入下面命令生成数据表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">migrate message</span><br></pre></td></tr></table></figure></p><blockquote><p>可以看到上图过程中会告诉我们做了哪些变化，如删除了默认系统生成的主键<code>id</code><br>,变更了<code>name</code>。新增了我们的<code>object_id</code></p></blockquote><p>前往Navicat验证右键设计表：</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/0hADe4ggDG.png?imageslim" alt="mark"></p><p>可以看到<code>object_id</code>已经成为我们的新主键。</p><h4 id="介绍Meta信息："><a href="#介绍Meta信息：" class="headerlink" title="介绍Meta信息："></a>介绍Meta信息：</h4><p>Meta信息中我们可以指定常见的类型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db_table = &quot;user_meassage&quot;</span><br></pre></td></tr></table></figure><p>自定义后生成表，表名会与我们的保持一致。而不会前缀<code>appname</code>如：<code>message_</code></p><blockquote><p>这里因为我们已经生成过了，就不要做验证改变表名了。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ordering = &apos;-object_id&apos;</span><br></pre></td></tr></table></figure><p>ordering指定默认排序字段,如：就会以object_id倒序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">verbose_name_plural = u&quot;用户留言信息&quot;</span><br></pre></td></tr></table></figure><p>verbose_name_plural：复数信息，便于人阅读。否则会在后台显示<code>用户留言信息s</code></p><p>已经学习完毕了<code>orm</code>将数据表映射表。<br>github地址：<a href="https://github.com/mtianyan/DjangoGetStarted" target="_blank" rel="noopener">https://github.com/mtianyan/DjangoGetStarted</a><br>此节结束对应github commit:</p><blockquote><p>留言板数据库orm映射成表完成。内容截止教程3-3结束。</p></blockquote><h2 id="3-4-django-model的增删改"><a href="#3-4-django-model的增删改" class="headerlink" title="3-4 django model的增删改"></a>3-4 django model的增删改</h2><p><strong>github仓库地址：<a href="https://github.com/mtianyan/DjangoGetStarted" target="_blank" rel="noopener">https://github.com/mtianyan/DjangoGetStarted</a></strong></p><ul><li>上小节完成代码对应commit: 留言板数据库orm映射成表完成。内容截止教程3-3结束。</li></ul><p>在<code>message/views.py</code>中:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> UserMessage</span><br></pre></td></tr></table></figure><p>将我们刚才创建的model，import进来。<code>.</code>代表是与当前同级的目录。</p><p>按照下图所示添加一条测试数据。</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/IBga4E2FGh.png?imageslim" alt="mark"></p><p>然后再我们的<code>getform</code>方法内部添加下面代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def getform(request):</span><br><span class="line">    # UserMessage默认的数据管理器objects。</span><br><span class="line">    # 方法all()是将所有数据返回成一个queryset类型(django的内置类型)</span><br><span class="line">    all_message = UserMessage.objects.all()</span><br><span class="line"></span><br><span class="line">    #我们可以对于all_message进行遍历操作</span><br><span class="line">    for message in all_message:</span><br><span class="line">        # 每个message实际就是一个UserMessage对象（这时我们就可以使用对象的相关方法）。</span><br><span class="line">        print message.name</span><br><span class="line"></span><br><span class="line">    return render(request, &apos;message_form.html&apos;)</span><br></pre></td></tr></table></figure></p><p>调试过程：</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/FGChlB50k7.png?imageslim" alt="mark"></p><ul><li><p>点击上图小红框位置，打上断点。</p></li><li><p>点击Run -&gt; debug后：在浏览器里打开：<code>http://127.0.0.1:8000/form/</code></p></li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180107/mAebKF06m9.png?imageslim" alt="mark"></p><ul><li>弹出上图代表已进入断点。</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180107/0cb6GGiGDa.png?imageslim" alt="mark"></p><ul><li><p>此时鼠标左键点击：all_message.可以看到这是一个<code>{QuerySet}类型的对象，里面存放着[&lt;UserMessage: UserMessage object&gt;]</code></p></li><li><p>按<code>f6</code>使运行到下一步。此时下方的值窗口内可以看到message的值。说明我们成功取到了数据库的值。</p></li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180107/hJgD3AC3c2.png?imageslim" alt="mark"></p><h3 id="filter取出指定要求值"><a href="#filter取出指定要求值" class="headerlink" title="filter取出指定要求值"></a>filter取出指定要求值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">all_message = UserMessage.objects.filter(name=&apos; mtianyan&apos;, address=&apos;西安&apos;)</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180107/Eal2Ldj6e8.png?imageslim" alt="mark"></p><p>按照上面调试过程重新调试可以看到我们同样取出了值。</p><p>小练习：将名字改为与自己数据库存放值不同的。查看结果。</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/IChf8L7ecd.png?imageslim" alt="mark"></p><blockquote><p>变成了空列表，说明一切正确。</p></blockquote><h3 id="将数据存入数据库"><a href="#将数据存入数据库" class="headerlink" title="将数据存入数据库"></a>将数据存入数据库</h3><p>了解：django/db/models/base.py 源码中提供save方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(self, force_insert=False, force_update=False, using=None,</span></span></span><br><span class="line"><span class="function"><span class="params">             update_fields=None)</span>:</span></span><br></pre></td></tr></table></figure></p><p>getform方法中添加代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 存储部分</span></span><br><span class="line"></span><br><span class="line">   <span class="comment"># 首先实例化一个对象</span></span><br><span class="line">   user_message = UserMessage()</span><br><span class="line"></span><br><span class="line">   <span class="comment"># 为对象增加属性</span></span><br><span class="line">   user_message.name = <span class="string">"mtianyan2"</span></span><br><span class="line">   user_message.message = <span class="string">"blog.mtianyan.cn"</span></span><br><span class="line">   user_message.address = <span class="string">"西安"</span></span><br><span class="line">   user_message.email = <span class="string">"1147727180@qq.com"</span></span><br><span class="line">   user_message.object_id = <span class="string">"efgh"</span></span><br><span class="line"></span><br><span class="line">   <span class="comment"># 调用save方法进行保存</span></span><br><span class="line">   user_message.save()</span><br></pre></td></tr></table></figure><ul><li>打上断点：如下图。</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180107/3b7aeEg0KE.png?imageslim" alt="mark"></p><ul><li>一直惦记f6单步调试，直到如下图：蓝色到<code>return</code>语句</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180107/m2fF7j38dC.png?imageslim" alt="mark"></p><p>可以在下方值窗口查看到值</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/bg6ICDcI9I.png?imageslim" alt="mark"></p><h3 id="Navicat进行验证"><a href="#Navicat进行验证" class="headerlink" title="Navicat进行验证"></a>Navicat进行验证</h3><blockquote><p>可以看到成功的添加了数据<code>mtianyan2</code></p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180107/DiBKcaJd8A.png?imageslim" alt="mark"></p><h3 id="如何从html的提交中取到数据并保存进数据库"><a href="#如何从html的提交中取到数据并保存进数据库" class="headerlink" title="如何从html的提交中取到数据并保存进数据库"></a>如何从html的提交中取到数据并保存进数据库</h3><p>templates/message_form.html：</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/glha3bHaC8.png?imageslim" alt="mark"></p><blockquote><p>method是post。action就是指向我们在urls.py中配置的<code>/form/</code><br><strong>前面必须加斜杠指根路径下form</strong><br>里面的input会自动把值传递给后台：这时我们就可以在getform中取到刚才传递过来的值。</p></blockquote><p>运行项目：然后输入需要填写的值。点击提交：出现403错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Forbidden (403)</span><br><span class="line">CSRF verification failed. Request aborted.</span><br></pre></td></tr></table></figure><blockquote><p>根据提示：我们的页面没有进行crsf的验证，这时django的安全机制，不允许任意form都往后台提交。</p></blockquote><p><strong>知识点：所以我们需要在html页面中加入csrf_token</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% csrf_token %&#125;</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180107/chCamk6JDk.png?imageslim" alt="mark"></p><p>原有那行删除掉。打上断点</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/3cCBcF96eC.png?imageslim" alt="mark"></p><p>刷新页面并提交。这时候在值窗口可以看到request对象下的POST中存放着我们提交的数据。内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;QueryDict: &#123;u&apos;message&apos;: [u&apos;\u54c8\u54c8&apos;], u&apos;address&apos;: [</span><br><span class="line">u&apos;\u897f\u5b89\u5e02&apos;], u&apos;csrfmiddlewaretoken&apos;: [</span><br><span class="line">u&apos;uIYSMOTWPJBPOPucRwd3uDaWtCzeEaem&apos;], u&apos;name&apos;: [</span><br><span class="line">u&apos;\u5929\u6daf\u660e\u6708\u7b19&apos;], u&apos;email&apos;: [u&apos;1147727180@qq.com&apos;]&#125;&gt;</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180107/3BL02H2ljG.png?imageslim" alt="mark"></p><blockquote><p>数据以dict：key-value 形式存储 key是由如下图html中的name所决定对应的。</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180107/c2lIdeH2A1.png?imageslim" alt="mark"></p><h3 id="数据库新增。"><a href="#数据库新增。" class="headerlink" title="数据库新增。"></a>数据库新增。</h3><p><code>request.POST</code>中数据取出，存入<code>user_message</code>对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># html表单部分</span></span><br><span class="line"></span><br><span class="line">   <span class="comment"># 此处对应html中的method="post"，表示我们只处理post请求</span></span><br><span class="line">   <span class="keyword">if</span> request.method == <span class="string">"POST"</span>:</span><br><span class="line">       <span class="comment"># 就是取字典里key对应value值而已。取name，取不到默认空</span></span><br><span class="line">       name = request.POST.get(<span class="string">'name'</span>, <span class="string">''</span>)</span><br><span class="line">       message = request.POST.get(<span class="string">'message'</span>, <span class="string">''</span>)</span><br><span class="line">       address = request.POST.get(<span class="string">'address'</span>, <span class="string">''</span>)</span><br><span class="line">       email = request.POST.get(<span class="string">'email'</span>, <span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">       <span class="comment"># 实例化对象</span></span><br><span class="line">       user_message = UserMessage()</span><br><span class="line"></span><br><span class="line">       <span class="comment"># 将html的值传入我们实例化的对象.</span></span><br><span class="line">       user_message.name = name</span><br><span class="line">       user_message.message = message</span><br><span class="line">       user_message.address = address</span><br><span class="line">       user_message.email = email</span><br><span class="line">       user_message.object_id = <span class="string">"ijkl"</span></span><br><span class="line"></span><br><span class="line">       <span class="comment"># 调用save方法进行保存</span></span><br><span class="line">       user_message.save()</span><br></pre></td></tr></table></figure><ul><li>打断点在下图位置：</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180107/gblC5dg219.png?imageslim" alt="mark"></p><ul><li>进入调试：点击点击method：是get请求。因为我们并没有按提交按钮，而是get这个网页</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180107/heblbcAf4h.png?imageslim" alt="mark"></p><ul><li>点击f8继续运行我们的项目 浏览器中填写表单内容点提交。</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180107/33ECK331eE.png?imageslim" alt="mark"></p><blockquote><p>因为这次是表单提交，已经变成了post方式。按<code>f6</code>进行单步调试。</p></blockquote><p>一直单步到如下图蓝色</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/4Ck700a9Ea.png?imageslim" alt="mark"></p><p>这时候值浏览窗口可以看到</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/i22jKb99Bh.png?imageslim" alt="mark"></p><blockquote><p>检查我们的user_message对象的属性是否已经全部添加进去，</p></blockquote><p>使用f8 继续项目并前往Navicat验证</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/0mJgFKbi9k.png?imageslim" alt="mark"></p><blockquote><p>可以看到我们的数据库中已经新增，标志着我们已经成功存入数据。</p></blockquote><h3 id="删除数据。"><a href="#删除数据。" class="headerlink" title="删除数据。"></a>删除数据。</h3><p>对于查询到的数据做删除：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法2 :filter取出指定条件值，逗号代表and 必须同时满足两个条件才返回。</span></span><br><span class="line">all_message = UserMessage.objects.filter(name=<span class="string">'mtianyan'</span>, address=<span class="string">'西安'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我的数据库里保存着可以匹配到该条数据的一行。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除操作：使用delete方法删除all_message</span></span><br><span class="line"></span><br><span class="line">all_message.delete()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> message <span class="keyword">in</span> all_message:</span><br><span class="line">        <span class="comment"># 删除取到的message对象</span></span><br><span class="line">        message.detele()</span><br><span class="line">        <span class="comment"># print message.name</span></span><br></pre></td></tr></table></figure><p>点击run并访问：<a href="http://127.0.0.1:8000/form/" target="_blank" rel="noopener">http://127.0.0.1:8000/form/</a><br>进入Navicat进行验证。</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/BamdmLI1Ec.png?imageslim" alt="mark"></p><blockquote><p>可以看到我们的那条mtianyan + 西安的数据已经被删除。</p></blockquote><p><strong>至此：我们已经学会了新增，删除，查询。</strong></p><p>本节结束github对应commit：</p><blockquote><p>django model的增删改数据库。本次内容截止教程3-4。 </p></blockquote><h2 id="3-5-django-url-templates配置"><a href="#3-5-django-url-templates配置" class="headerlink" title="3-5 django url templates配置"></a>3-5 django url templates配置</h2><blockquote><p>项目Github地址：<a href="https://github.com/mtianyan/DjangoGetStarted" target="_blank" rel="noopener">https://github.com/mtianyan/DjangoGetStarted</a><br>本节开始对应对应Github的commit：django model的增删改数据库。本次内容截止教程3-4。</p></blockquote><p>本节将介绍url的配置，以及如何将数据库数据填充回前台html页面。</p><p>情景：只允许用户修改<code>mtianyan</code>，如果没有就添加，如果有就回填使用户可以修改。</p><h3 id="取出数据"><a href="#取出数据" class="headerlink" title="取出数据"></a>取出数据</h3><p>message/views.py中的getform方法中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">message = <span class="keyword">None</span></span><br><span class="line">all_message = UserMessage.objects.filter(name=<span class="string">'mtianyan'</span>, address=<span class="string">'西安'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># if 判断是否存在数据</span></span><br><span class="line"><span class="keyword">if</span> all_message:</span><br><span class="line">    <span class="comment"># all_message是一个list，可以使用切片。</span></span><br><span class="line">    message = all_message[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><blockquote><p>这里注意把前几节写的删除掉</p></blockquote><h3 id="将数据回填至html中"><a href="#将数据回填至html中" class="headerlink" title="将数据回填至html中"></a>将数据回填至html中</h3><h4 id="修改return-render"><a href="#修改return-render" class="headerlink" title="修改return render"></a>修改return render</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">return render(request, &apos;message_form.html&apos;,&#123;</span><br><span class="line">        &quot;my_message&quot; : message</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>这里前面的”my_meassage”是我们可以自行命名的。会有一个<code>my_message</code>对象随着返回前端页面。</p></blockquote><h4 id="在前端页面中放入值。"><a href="#在前端页面中放入值。" class="headerlink" title="在前端页面中放入值。"></a>在前端页面中放入值。</h4><p>为input系列标签添加<code>value</code>: 使用<code>my_message.name</code>取到我们传递过来的<code>my_message</code>对象的属性值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input id=&quot;name&quot; type=&quot;text&quot; name=&quot;name&quot;  </span><br><span class="line">value=&quot;&#123;&#123; my_message.name &#125;&#125;&quot; class=&quot;error&quot; placeholder=&quot;请输入您的姓名&quot;/&gt;</span><br></pre></td></tr></table></figure><blockquote><p>请自行完成姓名，邮箱，联系地址三个<code>input</code>标签。</p></blockquote><p>为<code>textarea</code>标签添加值</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/F60Dl7jf93.png?imageslim" alt="mark"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;textarea id=&quot;message&quot; name=&quot;message&quot;  </span><br><span class="line">placeholder=&quot;请输入你的建议&quot;&gt;&#123;&#123; my_message.message &#125;&#125;&lt;/textarea&gt;</span><br></pre></td></tr></table></figure><p>运行项目，访问：<a href="http://127.0.0.1:8000/form/" target="_blank" rel="noopener">http://127.0.0.1:8000/form/</a></p><p><img src="http://myphoto.mtianyan.cn/blog/180107/27BFK0ieIL.png?imageslim" alt="mark"></p><blockquote><p>成功！！我们已经将后台数据库数据成功展示到前台。</p></blockquote><h3 id="template模板渲染中的一些用法。"><a href="#template模板渲染中的一些用法。" class="headerlink" title="template模板渲染中的一些用法。"></a>template模板渲染中的一些用法。</h3><blockquote><p>在我们的template模板中也就是form.html中，不允许我们写Python的语法，<br>它提供了一套自己的内建标签。</p></blockquote><p><a href="https://docs.djangoproject.com/en/2.0/ref/templates/builtins/" target="_blank" rel="noopener">官方文档中template内建标签用法传送门</a></p><h4 id="常用的几种模板标签介绍："><a href="#常用的几种模板标签介绍：" class="headerlink" title="常用的几种模板标签介绍："></a>常用的几种模板标签介绍：</h4><h5 id="if-else"><a href="#if-else" class="headerlink" title="if - else"></a><code>if - else</code></h5><p>官方提供模板如下：</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/mhJlLmCiLh.png?imageslim" alt="mark"></p><p>个人实践：</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/Ahch4LBcKd.png?imageslim" alt="mark"></p><p>满足if运行结果：</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/kBb2Ak6ec0.png?imageslim" alt="mark"></p><p>不满足if：如改为<code>my_message.name == &quot;mtianyan1&quot;</code>运行结果：</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/5c6fK8mDAK.png?imageslim" alt="mark"></p><h5 id="ifequal-amp-ifnotequal"><a href="#ifequal-amp-ifnotequal" class="headerlink" title="ifequal &amp; ifnotequal"></a><code>ifequal</code> &amp; <code>ifnotequal</code></h5><p><img src="http://myphoto.mtianyan.cn/blog/180107/he6fBLk1le.png?imageslim" alt="mark"></p><p>官方文档解释：<code>ifequal a b</code> 相当于<code>f a == b</code>.<code>ifnotequal</code>则相当于<code>if a != b</code></p><p>个人实践：<br><img src="http://myphoto.mtianyan.cn/blog/180107/ihKmHmCLcD.png?imageslim" alt="mark"></p><p>结果为：未找到中文昵称</p><h5 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h5><p><img src="http://myphoto.mtianyan.cn/blog/180107/DccKL0EB4C.png?imageslim" alt="mark"></p><p>官方文档解释：其实就是切片操作。从头开始切到第n个。</p><p>个人实践：</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/m8jJE8KEae.png?imageslim" alt="mark"></p><blockquote><p>本来<code>mtianyan</code> 与 <code>mtianyan1</code>是不同的，但是切片后前八位相同。<br>运行结果显示 ：<code>对应中文昵称：天涯明月笙</code></p></blockquote><h3 id="URl的别名设置技巧"><a href="#URl的别名设置技巧" class="headerlink" title="URl的别名设置技巧"></a>URl的别名设置技巧</h3><p>DjangoGetStarted/urls.py：</p><p>为<code>r&#39;^form/$&#39;</code>添加别名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url(<span class="string">r'^form/$'</span>, getform, name = <span class="string">"form_new"</span>)</span><br></pre></td></tr></table></figure><p>前往html中修改action地址为下面所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&quot;&#123;% url &quot;form_new&quot; %&#125;&quot; method=&quot;post&quot; class=&quot;smart-green&quot;&gt;</span><br></pre></td></tr></table></figure><p>这时我们如果改动urls.py中的<code>r&#39;^form/$&#39;</code>不需要再修改前端代码中值。</p><h3 id="url先后顺序问题"><a href="#url先后顺序问题" class="headerlink" title="url先后顺序问题"></a>url先后顺序问题</h3><p><strong>注意</strong>url匹配规则中一定不要忘记<code>/$</code>符号代表以<code>form/</code>结束的才会有效。不会向后继续匹配。比如没有<code>/$</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url(r&apos;^form&apos;, getform, name=&quot;form_new&quot;)</span><br></pre></td></tr></table></figure><p>这时我们进入浏览器访问时输入<code>http://127.0.0.1:8000/formemmm</code>都可以被响应。</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/aehl7G2K20.png?imageslim" alt="mark"></p><p>特别是如果底下还配置有被这个规则包含的条目，会产生被写在更靠前的拦截住得不到正确处理的Bug。</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/jm5AJLLmGd.png?imageslim" alt="mark"></p><blockquote><p>上图我们是想要让formtest响应admin.site.urls。但是会被form提前拦截住。</p></blockquote><p>所以我们一定要注意加上<code>/$</code>符号。</p><p>至此我们完成了留言板项目：学习到了Django必备的基础知识。<br>下一章我们将开始我们的进阶学习：开发在线教育平台网站。</p><p>本章结束：</p><blockquote><p>对应Commit: 留言板项目学习完成，本次内容截止教程3-5。完结，撒花。<br>项目Github地址：<a href="https://github.com/mtianyan/DjangoGetStarted" target="_blank" rel="noopener">https://github.com/mtianyan/DjangoGetStarted</a></p></blockquote><blockquote class="blockquote-center"><p>数据基础决定上层建筑 </p></blockquote><div class="note warning"><p> 设计数据库是整个项目的第一项工作:</p><ul><li>完成django的app设计 &amp; 完成app中的models设计</li></ul><p>Django1.9.8对应github: <a href="https://github.com/mtianyan/Mxonline2" target="_blank" rel="noopener">https://github.com/mtianyan/Mxonline2</a><br>Django2.0.1对应github: <a href="https://github.com/mtianyan/Mxonline3" target="_blank" rel="noopener">https://github.com/mtianyan/Mxonline3</a></p></div><h1 id="完成django的app设计-amp-完成app中的models设计"><a href="#完成django的app设计-amp-完成app中的models设计" class="headerlink" title="完成django的app设计 &amp; 完成app中的models设计"></a>完成django的app设计 &amp; 完成app中的models设计</h1><h2 id="4-1-使用py3-6和django1-11开发系统前注意事项"><a href="#4-1-使用py3-6和django1-11开发系统前注意事项" class="headerlink" title="4-1 使用py3.6和django1.11开发系统前注意事项"></a>4-1 使用py3.6和django1.11开发系统前注意事项</h2><p>直接通过Python3.6和django最新版本来开发我们的系统的一些注意事项。</p><blockquote><p>原版本: Python 2.7 &amp; django 1.9.8<br>现在版本：Python 3.6 &amp; django 1.11</p></blockquote><p>我个人使用: 3.5 + django2.0.1 &amp; 2.7 + django 1.9.8</p><p>直接从3.6上手，开始工作，而不用做完2.7再转换。</p><blockquote><p>代码几乎100%兼容2.7 &amp; 3.6</p></blockquote><h3 id="虚拟环境问题"><a href="#虚拟环境问题" class="headerlink" title="虚拟环境问题"></a>虚拟环境问题</h3><blockquote><p>Python2.7 与 Python3.x共存并创建虚拟环境。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv -p C:\...\python.exe mxonline</span><br></pre></td></tr></table></figure><h3 id="设计model的时候的-unicode-方法"><a href="#设计model的时候的-unicode-方法" class="headerlink" title="设计model的时候的__unicode__方法"></a>设计model的时候的<code>__unicode__</code>方法</h3><p>Python2.7 中:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__unicode__</span>:</span></span><br><span class="line"><span class="keyword">return</span> self.name</span><br></pre></td></tr></table></figure><p>Python 3.x中:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="keyword">return</span> self.name</span><br></pre></td></tr></table></figure></p><blockquote><p>3.x下重载Unicode不会报错，但是会在后台显示有问题。</p></blockquote><h3 id="安装Python的mysql驱动时不能用之前的-MYSQL-python"><a href="#安装Python的mysql驱动时不能用之前的-MYSQL-python" class="headerlink" title="安装Python的mysql驱动时不能用之前的 MYSQL python"></a>安装Python的mysql驱动时不能用之前的 MYSQL python</h3><blockquote><p>这个网址是windows下python包安装的居家必备良品，建议收藏。</p></blockquote><p><a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#mysql-python" target="_blank" rel="noopener">https://www.lfd.uci.edu/~gohlke/pythonlibs/#mysql-python</a></p><p>应该改用<code>Mysqlclient</code>来替换我们的<code>MySQl-python</code></p><blockquote><p>接口是一样的。所以以后建议直接用Mysqlclient，因为它2, 3版本都有。</p></blockquote><h3 id="通过源码方式安装xadmin时。"><a href="#通过源码方式安装xadmin时。" class="headerlink" title="通过源码方式安装xadmin时。"></a>通过源码方式安装xadmin时。</h3><blockquote><p>Github 搜索 <code>mxonline_resources</code>，将里面的Xadmin放进extras_apps中。<br>就不用官方的了。</p></blockquote><p>django 2.0.1 的修复bug版可以使用我的:</p><p><a href="https://github.com/mtianyan/xadmin_django2.0.1" target="_blank" rel="noopener">https://github.com/mtianyan/xadmin_django2.0.1</a></p><blockquote><p>也可以直接使用官方的新版，已经支持了Python3.6</p></blockquote><p>Xadmin安装一定要安装依赖包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">django-crispy-forms=1.6.0</span><br><span class="line">django-import-export&gt;=0.5.1</span><br><span class="line">django-reversion~=2.0.0</span><br><span class="line">django-formtools</span><br><span class="line">future==0.15.2</span><br><span class="line">httplib2==0.9.2</span><br><span class="line">six==1.10.0</span><br></pre></td></tr></table></figure><h3 id="使用DjangoUeditor"><a href="#使用DjangoUeditor" class="headerlink" title="使用DjangoUeditor"></a>使用DjangoUeditor</h3><p>官方的不支持Python3, 去<code>mxonline_resource</code>目录下载兼容Python3的版本。<br>放入<code>extras_apps</code></p><h2 id="4-2-django-app-设计"><a href="#4-2-django-app-设计" class="headerlink" title="4-2 django-app 设计"></a>4-2 django-app 设计</h2><blockquote><p>数据库设计</p></blockquote><h3 id="根据app设计-models"><a href="#根据app设计-models" class="headerlink" title="根据app设计 models"></a>根据app设计 models</h3><h3 id="数据表生成与修改"><a href="#数据表生成与修改" class="headerlink" title="数据表生成与修改"></a>数据表生成与修改</h3><p>授课机构提供讲师录制课程，学员完成在线学习。</p><ul><li>全局头部：用户消息 &amp; 个人中心: 没有登录时，就是登录注册</li><li>对于公开课，授课讲师，授课机构进行搜索。</li><li>轮播图，课程，机构，页脚</li><li>公开课：分页公开课，右边热门推荐。</li><li>点进课程：课程详情页。详情: 后台富文本。右边是课程机构的介绍。收藏 或学习</li><li>章节信息 &amp; 课程资源下载 &amp; 评论</li><li>授课讲师: 授课讲师列表页,  讲师排行榜。分页。</li><li>点进讲师: 看到课程。</li><li>授课机构: 类别筛选，机构性质，所在地区 &amp; 排序。用户提交表单，我要学习, 机构排名.</li><li>个人中心: 修改密码, 修改头像, 个人信息, 我的课程, 我的收藏, 我的消息。</li></ul><p>app大致会有<code>用户模块</code>,<code>课程模块</code>,<code>授课教师</code>与<code>授课机构</code>。</p><p><img src="http://myphoto.mtianyan.cn/blog/180108/DB9D66LmaJ.png?imageslim" alt="mark"></p><p>多一个operation app 是因为数据库的需要。后面会讲。</p><h2 id="4-3-新建项目"><a href="#4-3-新建项目" class="headerlink" title="4-3 新建项目"></a>4-3 新建项目</h2><h3 id="Python2-7-创建虚拟环境。"><a href="#Python2-7-创建虚拟环境。" class="headerlink" title="Python2.7 创建虚拟环境。"></a>Python2.7 创建虚拟环境。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv mxonline2</span><br></pre></td></tr></table></figure><p>安装django</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django==1.9.8</span><br></pre></td></tr></table></figure><blockquote><p>注意Python2下此处必须用1.9.8</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180108/JJamFecfhC.png?imageslim" alt="mark"></p><h3 id="Python3-x-创建虚拟环境"><a href="#Python3-x-创建虚拟环境" class="headerlink" title="Python3.x 创建虚拟环境"></a>Python3.x 创建虚拟环境</h3><p>如果你已经通过我的博文《Python开发环境搭建指南(Anaconda2,3共存)》<br>搭建了完美的共存环境使用下面命令创建虚拟环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv -p D:\softEnvDown\Anaconda2\envs\py3\python.exe mxonline3</span><br></pre></td></tr></table></figure><blockquote><p>-p后面路径为自己的Python3的exe文件路径。</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180108/i6lKIGdE93.png?imageslim" alt="mark"></p><blockquote><p>官方说明的最新稳定版为2.0.1(2018-01-08 19:37:06)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">workon mxonline3</span><br><span class="line">pip install django==2.0.1</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180108/I1fF3aL00H.png?imageslim" alt="mark"></p><p>至此我们的两个虚拟环境都已经准备好了。</p><h3 id="新建Python2-下Project"><a href="#新建Python2-下Project" class="headerlink" title="新建Python2 下Project"></a>新建Python2 下Project</h3><p>为Mxonline2 配置环境 <code>mxonline2</code></p><p><img src="http://myphoto.mtianyan.cn/blog/180108/3Ic2ehmkGK.png?imageslim" alt="mark"></p><p>注意一直定位到Python.exe。</p><h4 id="安装mysql驱动。"><a href="#安装mysql驱动。" class="headerlink" title="安装mysql驱动。"></a>安装mysql驱动。</h4><p>下载<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#mysql-python中" target="_blank" rel="noopener">https://www.lfd.uci.edu/~gohlke/pythonlibs/#mysql-python中</a><br>mysqlclient‑1.3.12‑cp34‑cp34m‑win_amd64.whl进行本地安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">workon mxonline2</span><br><span class="line">pip install mysqlclient-1.3.12-cp27-cp27m-win_amd64.whl</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180108/8dK5e5clJB.png?imageslim" alt="mark"></p><h3 id="新建Python3-下Project"><a href="#新建Python3-下Project" class="headerlink" title="新建Python3 下Project"></a>新建Python3 下Project</h3><p>为Mxonline3 配置环境 <code>mxonline3</code></p><p><img src="http://myphoto.mtianyan.cn/blog/180108/383ceKe92C.png?imageslim" alt="mark"></p><blockquote><p>注意一直定位到Python.exe。</p></blockquote><h4 id="安装mysql驱动。-1"><a href="#安装mysql驱动。-1" class="headerlink" title="安装mysql驱动。"></a>安装mysql驱动。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">workon mxonline3</span><br><span class="line">pip install mysqlclient</span><br></pre></td></tr></table></figure><h3 id="setting中配置"><a href="#setting中配置" class="headerlink" title="setting中配置"></a>setting中配置</h3><p>Mxonline2/settings.py:<br>Mxonline3/settings.py:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    &apos;default&apos;: &#123;</span><br><span class="line">        &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;,</span><br><span class="line">        &apos;NAME&apos;: &apos;mxonline2&apos;,</span><br><span class="line">        &apos;USER&apos;: &apos;root&apos;,</span><br><span class="line">        &apos;PASSWORD&apos;: &apos;你的密码&apos;,</span><br><span class="line">        &apos;HOST&apos;:&apos;127.0.0.1&apos;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    &apos;default&apos;: &#123;</span><br><span class="line">        &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;,</span><br><span class="line">        &apos;NAME&apos;: &apos;mxonline3&apos;,</span><br><span class="line">        &apos;USER&apos;: &apos;root&apos;,</span><br><span class="line">        &apos;PASSWORD&apos;: &apos;你的密码&apos;,</span><br><span class="line">        &apos;HOST&apos;:&apos;127.0.0.1&apos;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="前往Navicat新建数据库"><a href="#前往Navicat新建数据库" class="headerlink" title="前往Navicat新建数据库"></a>前往Navicat新建数据库</h3><p>mxonline2 &amp; mxonline3</p><h4 id="进行数据库初始化makemigrations"><a href="#进行数据库初始化makemigrations" class="headerlink" title="进行数据库初始化makemigrations"></a>进行数据库初始化makemigrations</h4><p>点击<code>Tools 菜单下 Run manage.py Task</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">makemigrations</span><br><span class="line">migrate</span><br></pre></td></tr></table></figure><blockquote><p>2,3操作一致</p></blockquote><p>点击 RUn edit</p><p><img src="http://myphoto.mtianyan.cn/blog/180108/al0KDCbiK6.png?imageslim" alt="mark"></p><p>可以为2,3配置不同的port。比如2: 8002 &amp; 3: 8003</p><p>2: 点击run运行: django1.9.8成功画面如下。</p><p><img src="http://myphoto.mtianyan.cn/blog/180108/628mmAGLID.png?imageslim" alt="mark"></p><p>3: 点击run运行: django2.0.1成功画面如下。</p><p><img src="http://myphoto.mtianyan.cn/blog/180108/GeEcJgAbEA.png?imageslim" alt="mark"></p><p>这时我们的项目就新建成功。</p><p>此处对应commit:</p><blockquote><p>项目初始化成功: 完成数据库Migration初始化。 对应4-3</p></blockquote><h2 id="4-4-自定义userprofile"><a href="#4-4-自定义userprofile" class="headerlink" title="4-4 自定义userprofile"></a>4-4 自定义userprofile</h2><p>点击<code>Tools 菜单下 Run manage.py Task</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startapp users</span><br></pre></td></tr></table></figure><h3 id="编写我们的model设计user表。"><a href="#编写我们的model设计user表。" class="headerlink" title="编写我们的model设计user表。"></a>编写我们的model设计user表。</h3><p>系统自动生成的user表如下:</p><p><img src="http://myphoto.mtianyan.cn/blog/180108/H6jBl0IKjb.png?imageslim" alt="mark"></p><ul><li>id: 主键, password 密码, last_login Django自动记录用户最后登录时间,。</li><li>is_superuser 表明用户是否是超级用户(后台管理会用到)。</li><li>username 用户名字段不要随便改动, email 邮箱, </li><li>is_staff 表示是否是员工(后台管理会用到)。</li><li>is_active 用户是否是激活状态, date_joined 注册时间。</li></ul><blockquote><p>我们需要扩展我们自己的需求字段。</p></blockquote><p>个人中心页面中:</p><p><img src="http://myphoto.mtianyan.cn/blog/180108/mghmfD45hJ.png?imageslim" alt="mark"></p><p>可以看到我们还需要的有：</p><ul><li>昵称: nickname</li><li>生日: birthday</li><li>性别: gender</li></ul><p>User表的自定义方法可以查看django官方文档。<br>我们既想保留原有字段，又想有新字段。</p><p>users/models.py(3把Unicode改为str)添加代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> AbstractUser</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserProfile</span><span class="params">(AbstractUser)</span>:</span></span><br><span class="line">    <span class="comment"># 自定义的性别选择规则</span></span><br><span class="line">    GENDER_CHOICES = (</span><br><span class="line">        (<span class="string">"male"</span>, <span class="string">u"男"</span>),</span><br><span class="line">        (<span class="string">"female"</span>, <span class="string">u"女"</span>)</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 昵称</span></span><br><span class="line">    nick_name = models.CharField(max_length=<span class="number">50</span>, verbose_name=<span class="string">u"昵称"</span>, default=<span class="string">""</span>)</span><br><span class="line">    <span class="comment"># 生日，可以为空</span></span><br><span class="line">    birthday = models.DateField(verbose_name=<span class="string">u"生日"</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>)</span><br><span class="line">    <span class="comment"># 性别 只能男或女，默认女</span></span><br><span class="line">    gender = models.CharField(</span><br><span class="line">        max_length=<span class="number">5</span>,</span><br><span class="line">        verbose_name=<span class="string">u"性别"</span>,</span><br><span class="line">        choices=GENDER_CHOICES,</span><br><span class="line">        default=<span class="string">"female"</span>)</span><br><span class="line">    <span class="comment"># 地址</span></span><br><span class="line">    address = models.CharField(max_length=<span class="number">100</span>, verbose_name=<span class="string">"地址"</span>, default=<span class="string">""</span>)</span><br><span class="line">    <span class="comment"># 电话</span></span><br><span class="line">    mobile = models.CharField(max_length=<span class="number">11</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>)</span><br><span class="line">    <span class="comment"># 头像 默认使用default.png</span></span><br><span class="line">    image = models.ImageField(</span><br><span class="line">        upload_to=<span class="string">"image/%Y/%m"</span>,</span><br><span class="line">        default=<span class="string">u"image/default.png"</span>,</span><br><span class="line">        max_length=<span class="number">100</span></span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># meta信息，即后台栏目名</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">"用户信息"</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重载Unicode方法，打印实例会打印username，username为继承自abstractuser</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__unicode__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.username</span><br></pre></td></tr></table></figure><p>点进<code>AbstractUser</code>可以看到这个models里面就有我们默认表的那些字段。</p><p>因为Image字段需要用到<code>pillow</code>所以需要安装该库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pillow</span><br></pre></td></tr></table></figure><p><strong>注意：CharField必须有max_length, Imagefield实际也是charfield所以也要有max_length</strong></p><h4 id="setting设置INSTALLED-APPS-amp-AUTH-USER-MODEL。"><a href="#setting设置INSTALLED-APPS-amp-AUTH-USER-MODEL。" class="headerlink" title="setting设置INSTALLED_APPS &amp; AUTH_USER_MODEL。"></a>setting设置INSTALLED_APPS &amp; AUTH_USER_MODEL。</h4><ul><li>INSTALLED_APPS注册app</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;users&apos;</span><br></pre></td></tr></table></figure><ul><li>重载AUTH_USER_MODEL</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 此处重载是为了使我们的UserProfile生效</span><br><span class="line">AUTH_USER_MODEL = &quot;users.UserProfile&quot;</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180108/JDik7FIb8k.png?imageslim" alt="mark"></p><p>点击<code>Tools 菜单下 Run manage.py Task</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">makemigrations users</span><br><span class="line">migrate users</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180108/ijGBh98JL6.png?imageslim" alt="mark"></p><blockquote><p>上图中可以看到数据库做出的改动。输入: yes</p></blockquote><h3 id="进入Navicat进行验证"><a href="#进入Navicat进行验证" class="headerlink" title="进入Navicat进行验证"></a>进入Navicat进行验证</h3><p><img src="http://myphoto.mtianyan.cn/blog/180108/79bbD88gJD.png?imageslim" alt="mark"></p><p>如上图可以看到我们的表已经生成成功。</p><h3 id="附加Python3下不同与报错："><a href="#附加Python3下不同与报错：" class="headerlink" title="附加Python3下不同与报错："></a>附加Python3下不同与报错：</h3><p>将Unicode方法改为str方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 重载__str__方法，打印实例会打印username，username为继承自AbstractUser</span><br><span class="line">def __str__(self):</span><br><span class="line">    return self.username</span><br></pre></td></tr></table></figure></p><p>报错: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">django.db.migrations.exceptions.InconsistentMigrationHistory: Migration</span><br><span class="line">admin.0001_initial is applied before its dependency users.0001_initial on</span><br><span class="line">database &apos;default&apos;</span><br></pre></td></tr></table></figure><p>解决方案:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">删除数据库中 除了auth_user的其他表</span><br></pre></td></tr></table></figure><p>然后执行命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">makemigrations</span><br><span class="line">migrate</span><br><span class="line">makemigrations users</span><br><span class="line">migrate users</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180108/gBLe65jc53.png?imageslim" alt="mark"></p><blockquote><p>共11张表，同期django1.9.8会产生13张表</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180108/C3h6f7d4J5.png?imageslim" alt="mark"></p><blockquote><p>我推测是因为在django2.0版本中。我们如果自定义了userProfile并且在setting中进行了设置。那么auth_user将不再拥有多的表。</p></blockquote><p>下次不要再初始化时执行makemigrations &amp; migrate。当我们设计userProfile完成之后再执行。</p><p>本小节完成对应commit:</p><blockquote><p>完成USerProfile models书写。makemigrations &amp; migrate 建表成功。对应4-4</p></blockquote><h2 id="4-5-user-modesl-py设计"><a href="#4-5-user-modesl-py设计" class="headerlink" title="4-5 user modesl.py设计"></a>4-5 user modesl.py设计</h2><p>循环引用:</p><blockquote><p>设计app时每个app都有model</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180109/LedJLC8e34.png?imageslim" alt="mark"></p><p>如图：我们在user中定义usercourse记录用户学习的课程。会有两个外键：user和course。<br>我们就会<code>import Courses.models</code></p><p>如果用户对课程的评论：会放在 <code>Courses.models</code>当中。评论我们需要保存相应的用户。<br>我们就会<code>import User.models</code></p><p>循环import会出错。a与b相互调用，造成等待。</p><h3 id="解决循环引用-分层设计"><a href="#解决循环引用-分层设计" class="headerlink" title="解决循环引用: 分层设计"></a>解决循环引用: 分层设计</h3><p>目前已有app：users courses organization</p><p>另外一个app高于这些app的层级。<code>operation</code>.上一层app可以import下层的app。</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/kmDB89IcFF.png?imageslim" alt="mark"></p><p>上节中: 自定义<code>userprofile</code> 覆盖默认<code>user</code>表</p><p>user中还需要添加的(前提是这些功能比较独立):</p><ul><li>EmailVerifyRecord - 邮箱验证码</li><li>PageBanner - 轮播图</li></ul><p>观察轮播图:</p><blockquote><ol><li>图片 2. 点击图片地址 3. 轮播图序号(控制前后)</li></ol></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180109/fg4J5a2Kb5.png?imageslim" alt="mark"></p><p>users/models.py中添加代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 邮箱验证码model</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmailVerifyRecord</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    SEND_CHOICES = (</span><br><span class="line">        (<span class="string">"register"</span>, <span class="string">u"注册"</span>),</span><br><span class="line">        (<span class="string">"forget"</span>, <span class="string">u"找回密码"</span>)</span><br><span class="line">    )</span><br><span class="line">    code = models.CharField(max_length=<span class="number">20</span>, verbose_name=<span class="string">u"验证码"</span>)</span><br><span class="line">    <span class="comment"># 未设置null = true blank = true 默认不可为空</span></span><br><span class="line">    email = models.EmailField(max_length=<span class="number">50</span>, verbose_name=<span class="string">u"邮箱"</span>)</span><br><span class="line">    send_type = models.CharField(choices=SEND_CHOICES, max_length=<span class="number">10</span>)</span><br><span class="line">    <span class="comment"># 这里的now得去掉(),不去掉会根据编译时间。而不是根据实例化时间。</span></span><br><span class="line">    send_time = models.DateTimeField(default=datetime.now)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">"邮箱验证码"</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 轮播图model</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Banner</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">100</span>, verbose_name=<span class="string">u"标题"</span>)</span><br><span class="line">    image = models.ImageField(</span><br><span class="line">        upload_to=<span class="string">"banner/%Y/%m"</span>,</span><br><span class="line">        verbose_name=<span class="string">u"轮播图"</span>,</span><br><span class="line">        max_length=<span class="number">100</span>)</span><br><span class="line">    url = models.URLField(max_length=<span class="number">200</span>, verbose_name=<span class="string">u"访问地址"</span>)</span><br><span class="line">    <span class="comment"># 默认index很大靠后。想要靠前修改index值。</span></span><br><span class="line">    index = models.IntegerField(default=<span class="number">100</span>, verbose_name=<span class="string">u"顺序"</span>)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">u"添加时间"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">u"轮播图"</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br></pre></td></tr></table></figure><p>从上往下: 第一块区域import官方包，第二块import第三方。(PEP8)</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/8cmDm7ADf8.png?imageslim" alt="mark"></p><p>如下图: 我们一共创建了三个数据表: Structure可以查看到</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/7ABfdDCf7C.png?imageslim" alt="mark"></p><blockquote><p>与用户相关的评论啊，点赞啊。学习的课程啊并没有放进来，因为那些独立性不高。<br>容易产生循环引用。我们把那些放到operation中。</p></blockquote><p>本小节完成，对应commit:</p><blockquote><p>Usermodel添加邮箱验证码，首页轮播图。对应4-5</p></blockquote><h2 id="4-6-course-models-py编写"><a href="#4-6-course-models-py编写" class="headerlink" title="4-6 course models.py编写"></a>4-6 course models.py编写</h2><p>点击 <code>Tools 菜单下 Run manage.py Task</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startapp courses</span><br></pre></td></tr></table></figure><p>course中需要那些表:</p><ul><li>课程本身需要一张表</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180109/c9eBEHb0mL.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180109/75hlgK7481.png?imageslim" alt="mark"></p><ul><li><p>点进去之后点击开始学习。</p></li><li><p>课程基本信息需要一张表, 章节表与课程表存在(一个课程对应多个章节)</p></li><li>章节表中：章节的名称。 章节与视频(一个章节对应多个视频)</li></ul><p>结构: 课程本身–(一对多)&gt;章节-(一对多)-&gt;视频信息</p><p>资源下载放在课程里面的。一个课程对应多个资源</p><p>共四张表：课程本身–(一对多)&gt;章节-(一对多)-&gt;视频信息 &amp; 资源表</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/Kec5994359.png?imageslim" alt="mark"></p><p>courses/models.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 课程信息表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Course</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    DEGREE_CHOICES = (</span><br><span class="line">        (<span class="string">"cj"</span>, <span class="string">u"初级"</span>),</span><br><span class="line">        (<span class="string">"zj"</span>, <span class="string">u"中级"</span>),</span><br><span class="line">        (<span class="string">"gj"</span>, <span class="string">u"高级"</span>)</span><br><span class="line">    )</span><br><span class="line">    name = models.CharField(max_length=<span class="number">50</span>, verbose_name=<span class="string">u"课程名"</span>)</span><br><span class="line">    desc = models.CharField(max_length=<span class="number">300</span>, verbose_name=<span class="string">u"课程描述"</span>)</span><br><span class="line">    <span class="comment"># TextField允许我们不输入长度。可以输入到无限大。暂时定义为TextFiled，之后更新为富文本</span></span><br><span class="line">    detail = models.TextField(verbose_name=<span class="string">u"课程详情"</span>)</span><br><span class="line">    degree = models.CharField(choices=DEGREE_CHOICES, max_length=<span class="number">2</span>)</span><br><span class="line">    <span class="comment"># 使用分钟做后台记录(存储最小单位)前台转换</span></span><br><span class="line">    learn_times = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">u"学习时长(分钟数)"</span>)</span><br><span class="line">    <span class="comment"># 保存学习人数:点击开始学习才算</span></span><br><span class="line">    students = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">u"学习人数"</span>)</span><br><span class="line">    fav_nums = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">u"收藏人数"</span>)</span><br><span class="line">    image = models.ImageField(</span><br><span class="line">        upload_to=<span class="string">"courses/%Y/%m"</span>,</span><br><span class="line">        verbose_name=<span class="string">u"封面图"</span>,</span><br><span class="line">        max_length=<span class="number">100</span>)</span><br><span class="line">    <span class="comment"># 保存点击量，点进页面就算</span></span><br><span class="line">    click_nums = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">u"点击数"</span>)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">u"添加时间"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">u"课程"</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br></pre></td></tr></table></figure><p>下面来编写章节 &amp; 视频 &amp; 课程资源:<code>courses/models.py</code></p><p>一对多, 多对一都可以使用django的外键来完成。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 章节</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lesson</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># 因为一个课程对应很多章节。所以在章节表中将课程设置为外键。</span></span><br><span class="line">    <span class="comment"># 作为一个字段来让我们可以知道这个章节对应那个课程</span></span><br><span class="line">    course = models.ForeignKey(Course, verbose_name=<span class="string">u"课程"</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">100</span>, verbose_name=<span class="string">u"章节名"</span>)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">u"添加时间"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">u"章节"</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 每章视频</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Video</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># 因为一个章节对应很多视频。所以在视频表中将章节设置为外键。</span></span><br><span class="line">    <span class="comment"># 作为一个字段来存储让我们可以知道这个视频对应哪个章节.</span></span><br><span class="line">    lesson = models.ForeignKey(Lesson, verbose_name=<span class="string">u"章节"</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">100</span>, verbose_name=<span class="string">u"视频名"</span>)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">u"添加时间"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">u"视频"</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 课程资源</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CourseResource</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># 因为一个课程对应很多资源。所以在课程资源表中将课程设置为外键。</span></span><br><span class="line">    <span class="comment"># 作为一个字段来让我们可以知道这个资源对应那个课程</span></span><br><span class="line">    course = models.ForeignKey(Course, verbose_name=<span class="string">u"课程"</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">100</span>, verbose_name=<span class="string">u"名称"</span>)</span><br><span class="line">    <span class="comment"># 这里定义成文件类型的field，后台管理系统中会直接有上传的按钮。</span></span><br><span class="line">    <span class="comment"># FileField也是一个字符串类型，要指定最大长度。</span></span><br><span class="line">    download = models.FileField(</span><br><span class="line">        upload_to=<span class="string">"course/resource/%Y/%m"</span>,</span><br><span class="line">        verbose_name=<span class="string">u"资源文件"</span>,</span><br><span class="line">        max_length=<span class="number">100</span>)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">u"添加时间"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">u"课程资源"</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br></pre></td></tr></table></figure><p>通过Structure可以看到我们刚才设计的四张表</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/e3081f8bJh.png?imageslim" alt="mark"></p><p>本小节完毕, 对应commit:</p><blockquote><p>设计完成课程app中四张数据表: 课程，章节，视频，资源。对应4-6</p></blockquote><h2 id="4-7-organization-modesl-py设计"><a href="#4-7-organization-modesl-py设计" class="headerlink" title="4-7 organization modesl.py设计"></a>4-7 organization modesl.py设计</h2><p>新建课程机构app:</p><p>点击<code>Tools 菜单下 Run manage.py Task</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startapp organization</span><br></pre></td></tr></table></figure><p>课程是属于机构的, 机构有机构类别，城市等字段。讲师实体。<br>我要学习的提交表单会与用户关联，存放在机构。</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/K1faIbEA3A.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180109/1L2lebKCl0.png?imageslim" alt="mark"></p><p>其中课程数，学习人数可以动态统计。机构地址，机构经典课程。</p><blockquote><p>机构讲师，机构课程可以通过外键获取到, 不保存到机构中。</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180109/DlgdiG6K16.png?imageslim" alt="mark"></p><blockquote><p>讲师大概所需要的字段如图所示。</p></blockquote><p>organization/models.py 代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding : utf-8</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 城市字典</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CityDict</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">20</span>, verbose_name=<span class="string">u"城市"</span>)</span><br><span class="line">    <span class="comment"># 城市描述：备用不一定展示出来</span></span><br><span class="line">    desc = models.CharField(max_length=<span class="number">200</span>, verbose_name=<span class="string">u"描述"</span>)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">u"添加时间"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">u"城市"</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 课程机构</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CourseOrg</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">50</span>, verbose_name=<span class="string">u"机构名称"</span>)</span><br><span class="line">    <span class="comment"># 机构描述，后面会替换为富文本展示</span></span><br><span class="line">    desc = models.TextField(verbose_name=<span class="string">u"机构描述"</span>)</span><br><span class="line">    click_nums = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">u"点击数"</span>)</span><br><span class="line">    fav_nums = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">u"收藏数"</span>)</span><br><span class="line">    image = models.ImageField(</span><br><span class="line">        upload_to=<span class="string">"org/%Y/%m"</span>,</span><br><span class="line">        verbose_name=<span class="string">u"封面图"</span>,</span><br><span class="line">        max_length=<span class="number">100</span>)</span><br><span class="line">    address = models.CharField(max_length=<span class="number">150</span>, verbose_name=<span class="string">u"机构地址"</span>)</span><br><span class="line">    <span class="comment"># 一个城市可以有很多课程机构，通过将city设置外键，变成课程机构的一个字段</span></span><br><span class="line">    <span class="comment"># 可以让我们通过机构找到城市</span></span><br><span class="line">    city = models.ForeignKey(CityDict, verbose_name=<span class="string">u"所在城市"</span>)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">u"添加时间"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">u"课程机构"</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 讲师</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># 一个机构会有很多老师，所以我们在讲师表添加外键并把课程机构名称保存下来</span></span><br><span class="line">    <span class="comment"># 可以使我们通过讲师找到对应的机构</span></span><br><span class="line">    org = models.ForeignKey(CourseOrg, verbose_name=<span class="string">u"所属机构"</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">50</span>, verbose_name=<span class="string">u"教师名称"</span>)</span><br><span class="line">    work_years = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">u"工作年限"</span>)</span><br><span class="line">    work_company = models.CharField(max_length=<span class="number">50</span>, verbose_name=<span class="string">u"就职公司"</span>)</span><br><span class="line">    work_position = models.CharField(max_length=<span class="number">50</span>, verbose_name=<span class="string">u"公司职位"</span>)</span><br><span class="line">    points = models.CharField(max_length=<span class="number">50</span>, verbose_name=<span class="string">u"教学特点"</span>)</span><br><span class="line">    click_nums = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">u"点击数"</span>)</span><br><span class="line">    fav_nums = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">u"收藏数"</span>)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">u"添加时间"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">u"教师"</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180109/fi284KlfDk.png?imageslim" alt="mark"></p><blockquote><p>可以看到我们一共创建了三张表：分别是城市，课程机构，讲师。</p></blockquote><p>本小节对应commit:</p><blockquote><p>课程机构app：城市，机构，讲师表书写完毕。对应4-7</p></blockquote><h2 id="4-8-operation-models-py设计"><a href="#4-8-operation-models-py设计" class="headerlink" title="4-8 operation models.py设计"></a>4-8 operation models.py设计</h2><p>分析需要那些表:</p><ul><li>用户可以提交我要学习的个人需求。</li><li>学员的课程评论信息</li><li>收藏：可以收藏公开课, 授课讲师, 授课机构, 用户消息提醒。</li><li>个人中心：我的课程说明用户和课程之间的学习关系也需要保存。</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180109/5k6HkC49im.png?imageslim" alt="mark"></p><p>新建操作app:</p><p>点击<code>Tools 菜单下 Run manage.py Task</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startapp operation</span><br></pre></td></tr></table></figure><p>operation/models.py添加代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 引入我们CourseComments所需要的外键models</span></span><br><span class="line"><span class="keyword">from</span> users.models <span class="keyword">import</span> UserProfile</span><br><span class="line"><span class="keyword">from</span> courses.models <span class="keyword">import</span> Course</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户我要学习表单</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserAsk</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">20</span>, verbose_name=<span class="string">u"姓名"</span>)</span><br><span class="line">    mobile = models.CharField(max_length=<span class="number">11</span>, verbose_name=<span class="string">u"手机"</span>)</span><br><span class="line">    course_name = models.CharField(max_length=<span class="number">50</span>, verbose_name=<span class="string">u"课程名"</span>)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">u"添加时间"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">u"用户咨询"</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户对于课程评论</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CourseComments</span><span class="params">(models.Model)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 会涉及两个外键: 1. 用户， 2. 课程。import进来</span></span><br><span class="line">    course = models.ForeignKey(Course, verbose_name=<span class="string">u"课程"</span>)</span><br><span class="line">    user = models.ForeignKey(UserProfile, verbose_name=<span class="string">u"用户"</span>)</span><br><span class="line">    comments = models.CharField(max_length=<span class="number">250</span>, verbose_name=<span class="string">u"评论"</span>)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">u"评论时间"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">u"课程评论"</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户对于课程,机构，讲师的收藏</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserFavorite</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># 会涉及四个外键。用户，课程，机构，讲师import</span></span><br><span class="line">    TYPE_CHOICES = (</span><br><span class="line">        (<span class="number">1</span>, <span class="string">u"课程"</span>),</span><br><span class="line">        (<span class="number">2</span>, <span class="string">u"课程机构"</span>),</span><br><span class="line">        (<span class="number">3</span>, <span class="string">u"讲师"</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    user = models.ForeignKey(UserProfile, verbose_name=<span class="string">u"用户"</span>)</span><br><span class="line">    <span class="comment"># course = models.ForeignKey(Course, verbose_name=u"课程")</span></span><br><span class="line">    <span class="comment"># teacher = models.ForeignKey()</span></span><br><span class="line">    <span class="comment"># org = models.ForeignKey()</span></span><br><span class="line">    <span class="comment"># fav_type =</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 机智版</span></span><br><span class="line">    <span class="comment"># 直接保存用户的id.</span></span><br><span class="line">    fav_id = models.IntegerField(default=<span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 表明收藏的是哪种类型。</span></span><br><span class="line">    fav_type = models.IntegerField(</span><br><span class="line">        choices=TYPE_CHOICES,</span><br><span class="line">        default=<span class="number">1</span>,</span><br><span class="line">        verbose_name=<span class="string">u"收藏类型"</span>)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">u"评论时间"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">u"用户收藏"</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户消息表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserMessage</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">        <span class="comment"># 因为我们的消息有两种:发给全员和发给某一个用户。</span></span><br><span class="line">        <span class="comment"># 所以如果使用外键，每个消息会对应要有用户。很难实现全员消息。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 机智版 为0发给所有用户，不为0就是发给用户的id</span></span><br><span class="line">    user = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">u"接收用户"</span>)</span><br><span class="line">    message = models.CharField(max_length=<span class="number">500</span>, verbose_name=<span class="string">u"消息内容"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 是否已读: 布尔类型 BooleanField False未读,True表示已读</span></span><br><span class="line">    has_read = models.BooleanField(default=<span class="keyword">False</span>, verbose_name=<span class="string">u"是否已读"</span>)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">u"添加时间"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">u"用户消息"</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户课程表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserCourse</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># 会涉及两个外键: 1. 用户， 2. 课程。import进来</span></span><br><span class="line">    course = models.ForeignKey(Course, verbose_name=<span class="string">u"课程"</span>)</span><br><span class="line">    user = models.ForeignKey(UserProfile, verbose_name=<span class="string">u"用户"</span>)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">u"添加时间"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">u"用户课程"</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br></pre></td></tr></table></figure><p>至此：我们的五张operation下的数据表models设计完成</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/BHHfi6Gj2J.png?imageslim" alt="mark"></p><h3 id="setting中配置添加app"><a href="#setting中配置添加app" class="headerlink" title="setting中配置添加app"></a>setting中配置添加app</h3><p><img src="http://myphoto.mtianyan.cn/blog/180109/9IJa5kgFAG.png?imageslim" alt="mark"></p><p>本小节对应commit:</p><blockquote><p>operation下的models设计,用户: 课程&amp;消息&amp;收藏&amp;评论&amp;我要学习.并在setting中进行了注册。对应4-8</p></blockquote><h2 id="4-9-数据表生成以及apps目录建立"><a href="#4-9-数据表生成以及apps目录建立" class="headerlink" title="4-9 数据表生成以及apps目录建立"></a>4-9 数据表生成以及apps目录建立</h2><blockquote><p>学习如何通过刚才设计的models生成数据库对应的表</p></blockquote><p>点击<code>Tools 菜单下 Run manage.py Task</code>:</p><h3 id="Python2与Python3不同"><a href="#Python2与Python3不同" class="headerlink" title="Python2与Python3不同:"></a>Python2与Python3不同:</h3><p>Python2下可能会报一些<code>noASCII</code>错误:</p><p>只需要在对应你写了中文的第一行加上:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># encoding: utf-8</span><br></pre></td></tr></table></figure><h3 id="Python3-django2-0-1-会报错"><a href="#Python3-django2-0-1-会报错" class="headerlink" title="Python3(django2.0.1)会报错:"></a>Python3(django2.0.1)会报错:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">org = models.ForeignKey(CourseOrg, verbose_name=u&quot;所属机构&quot;)</span><br><span class="line">TypeError: __init__() missing 1 required positional argument: &apos;on_delete&apos;</span><br></pre></td></tr></table></figure><blockquote><p>这是因为在2.0.1中，外键关系必须指明删除时的操作。</p></blockquote><p>比如：出租车都归属于出租车公司。如果出租车公司倒闭了，那这些汽车该怎么处理。<br>必须自己指明: 我觉得可以直接进行级联删除。</p><p>django提供了:</p><ul><li><code>CASCADE</code></li><li><code>PROTECT</code></li><li><code>SET_NULL</code></li><li><code>SET_DEFAULT</code></li></ul><p>等选项。我选择了<code>CASCADE</code>删除。</p><p>将(dajngo 2.0.1)项目中所有的外键修改为如下面代码所示：</p><blockquote><p>也就是添加了<code>on_delete=models.CASCADE</code>使其级联删除。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org = models.ForeignKey(CourseOrg, on_delete=models.CASCADE, verbose_name=<span class="string">u"所属机构"</span>)</span><br></pre></td></tr></table></figure><h3 id="makemirgration-amp-migrate生成表"><a href="#makemirgration-amp-migrate生成表" class="headerlink" title="makemirgration &amp; migrate生成表"></a>makemirgration &amp; migrate生成表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">makemirgration</span><br><span class="line">migrate</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180109/mdib8gdGHc.png?imageslim" alt="mark"></p><p>上图为makemirgration过程中输出的信息。可以看到我们做出的改动</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/B01J3JChmd.png?imageslim" alt="mark"></p><p>此时我们查看app目录中migrations文件夹可以看到产生的新文件。</p><p><code>operation/migrations/0001_initial.py:</code></p><blockquote><p>可以看到里面也是Python的语法。他会帮我们生成数据表。<br>以后每次<code>migrations</code>时都会生成新的initial文件。这是很重要的变动文件，不能随意删除。</p></blockquote><p>打开Navicat可以看到django的数据库中有它默认的django_migrations表</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/i7Cc4HHBgh.png?imageslim" alt="mark"></p><p>双击django_migrations表可以看到我们migration的记录。</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/kE5Fc9kjc7.png?imageslim" alt="mark"></p><blockquote><p>会记录哪个app下的哪个initial.py已经运行了。</p></blockquote><p>进入Navicat进行成功性验证:</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/Bd16J68e9k.png?imageslim" alt="mark"></p><blockquote><p>可以看到我们的表已经生成成功,命名规则为: app名称 + 我们的类名变成小写</p></blockquote><h3 id="把我们的四个app放到一个文件夹下。"><a href="#把我们的四个app放到一个文件夹下。" class="headerlink" title="把我们的四个app放到一个文件夹下。"></a>把我们的四个app放到一个文件夹下。</h3><ul><li>新建Python的package: apps </li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180109/7l4AG2maAD.png?imageslim" alt="mark"></p><ul><li>把四个app都拖进apps中去。</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180109/mGLjCiL8aj.png?imageslim" alt="mark"></p><p>去掉<code>searchfor</code>的勾选。拖进去之后会报错，说找不到那些import的模块了。</p><p>解决方案：右键<code>Mark</code>为<code>sourceRoot</code>。根目录下找不到的，会去apps下搜索。</p><p>但是这时候cmd下还是会报错。</p><p>解决方案(图来源于我的<code>DjangoGetStarted</code>教程):</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/IhD2bJDI6K.png?imageslim" alt="mark"></p><p>同理,插入第0是希望它先搜索我们app下东西：</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/biF9eAhLHi.png?imageslim" alt="mark"></p><h4 id="成功性验证"><a href="#成功性验证" class="headerlink" title="成功性验证"></a>成功性验证</h4><p><img src="http://myphoto.mtianyan.cn/blog/180109/hJc05K1b28.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180109/BH84IH9beb.png?imageslim" alt="mark"></p><blockquote><p>可以看到Django已经可以正常run成功了。</p></blockquote><h3 id="第四章总结"><a href="#第四章总结" class="headerlink" title="第四章总结"></a>第四章总结</h3><ul><li>我们设计了app</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180109/bbbKglA0LI.png?imageslim" alt="mark"></p><ul><li>设计了user models.py</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180109/5ehi0hDB3C.png?imageslim" alt="mark"></p><ul><li>循环引用</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180109/8f32C0imcE.png?imageslim" alt="mark"></p><blockquote><p>得出我们需要创建一个更高层次的app。分层设计，operation在更高层。</p></blockquote><ul><li>Courses models.py </li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180109/e60fJjHeEa.png?imageslim" alt="mark"></p><ul><li>organization models.py</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180109/jg51D6Baj7.png?imageslim" alt="mark"></p><ul><li>operation models.py</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180109/3CLeJ5LCeD.png?imageslim" alt="mark"></p><p>通过makemigrations 生成表的变动 &amp; migrate<br>每个app下的migration目录的用途，和数据库中django_migration<br>将所有app放到同一个目录之下。</p><p>本章结束对应commit:</p><blockquote><p>数据表全部生成，migration目录&amp;表django_migration。将app放到apps目录。对应4-9.<br>第四章结束！撒花。</p></blockquote><blockquote class="blockquote-center"><p>总之，我们要拿来。我们要或使用，或存放，或毁灭。 - 鲁迅 </p></blockquote><div class="note "><p> 既然有django提供的强大admin,我们便要拿来用喽。</p><ul><li>使用xadmin，通过adminx,将已有model注册进后台。快速搭建可用的后台系统。</li></ul></div><h1 id="xadmin快速搭建可用的后台系统"><a href="#xadmin快速搭建可用的后台系统" class="headerlink" title="xadmin快速搭建可用的后台系统"></a>xadmin快速搭建可用的后台系统</h1><h2 id="django-admin介绍"><a href="#django-admin介绍" class="headerlink" title="django admin介绍"></a>django admin介绍</h2><p>上一章我们进行了需求分析和数据库设计。本章我们来快速搭建一个可用的后台管理系统。</p><p>后台管理系统特点：</p><ul><li>权限管理</li><li>少前端样式。(样式一般不是很看重)，</li><li>快速开发</li></ul><p>django的后台管理系统是一套智能的管理系统。<br>django的杀手锏之一就是admin管理系统。</p><p>admin在项目新建时就已经为我们生成好了。</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/97kgi66hBJ.png?imageslim" alt="mark"></p><p>Django的admin也是一个app，在我们新建项目时就创建好了。<br>而且会自动在url中配置好了链接。</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/BdL32DBc99.png?imageslim" alt="mark"></p><p>访问:<a href="http://127.0.0.1:8000/admin/" target="_blank" rel="noopener">http://127.0.0.1:8000/admin/</a></p><p>可以看到admin的登录窗口。</p><p>Django是不会自动生成admin的用户的，需要我们自己去命令生成。</p><h3 id="createsuperuser"><a href="#createsuperuser" class="headerlink" title="createsuperuser"></a>createsuperuser</h3><p>点击<code>Tools 菜单下 Run manage.py Task</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">createsuperuser</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180109/ggemFK9lAJ.png?imageslim" alt="mark"></p><p>输入自己的用户名密码。</p><p>报错:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django.db.utils.DataError: (1406, &quot;Data too long for column &apos;gender&apos; at row 1&quot;)</span><br></pre></td></tr></table></figure><blockquote><p>gender中female是6位。而我们最大长度只有5.</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180109/ie29f0bI0a.png?imageslim" alt="mark"></p><p>修改后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">makemigrations users</span><br><span class="line">migrate users</span><br></pre></td></tr></table></figure><p>然后重新<code>createsuperuser</code></p><p>使用自己定义的用户名密码可以登进系统。</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/C0h63A68F5.png?imageslim" alt="mark"></p><blockquote><p>默认是用户名 + 密码。后面会讲到如何实现用户名 或 邮箱和密码登录。</p></blockquote><h3 id="修改setting中对应语言，时区，以及数据库写入时间。"><a href="#修改setting中对应语言，时区，以及数据库写入时间。" class="headerlink" title="修改setting中对应语言，时区，以及数据库写入时间。"></a>修改setting中对应语言，时区，以及数据库写入时间。</h3><p>修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 语言改为中文</span><br><span class="line">LANGUAGE_CODE = &apos;zh-hans&apos;</span><br><span class="line"></span><br><span class="line"># 时区改为上海</span><br><span class="line">TIME_ZONE = &apos;Asia/Shanghai&apos;</span><br><span class="line"># 数据库存储使用时间，True时间会被存为UTC的时间</span><br><span class="line">USE_TZ = False</span><br></pre></td></tr></table></figure><p>点击运行可以看到如下图被换成汉语的效果:</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/L3fGhdb7C6.png?imageslim" alt="mark"></p><p>注意: django 2.0.1 并不会看到汉化后的默认页面。只有admin被汉化了。</p><p>组对应数据表: auth_group</p><p>在Django的admin中可以把上章的表都注册进来。对于表进行任意的增删改查。</p><p>默认其实会把user也注册进来的，但是因为我们通过userProfile覆盖了user。所以没有显示。</p><h3 id="注册UserProfile进来"><a href="#注册UserProfile进来" class="headerlink" title="注册UserProfile进来"></a>注册UserProfile进来</h3><p>users/admin.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 因为同一个目录，所以可以直接.models</span></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> UserProfile</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写一个管理器:命名, model+Admin</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserProfileAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将UserProfile注册进我们的admin中, 并为它选择管理器</span></span><br><span class="line">admin.site.register(UserProfile,UserProfileAdmin)</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180109/c58F6dg549.png?imageslim" alt="mark"></p><blockquote><p>可以看到我们的用户信息就注册进来了。</p></blockquote><p><code>USERS</code> 是用户所在表名称。</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/Fk7G3EkDC4.png?imageslim" alt="mark"></p><p>进入页面可以看到Django为我们把每个不同类型的字段生成了不同的前端样式。</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/761bBAhbJl.png?imageslim" alt="mark"></p><blockquote><p>Django会自动帮我们把密码加密，而且不能反解。单向性。</p></blockquote><p>如果出现错误, 可能是<code>initial</code>文件在我们拖入apps时路径被改变。之后我们添加了环境变量, 前面再加上apps就会报错。</p><p>这时把<code>initial.py</code> 中路径进行修改。</p><p>错误2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">新增用户信息提示：</span><br><span class="line">Cannot add or update a child row: a foreign key constraint fails</span><br><span class="line">(1452, &apos;Cannot add or update a child row: a foreign key constraint fails </span><br><span class="line">`mxonline`.`django_admin_log`, CONSTRAINT `django_admin_log_user_id_c564eba6_fk_auth_user_id` </span><br><span class="line">FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`))&apos;)</span><br></pre></td></tr></table></figure><blockquote><p>解决方案1: 不用解决，之后换Xadmin就好了。</p></blockquote><p>解决方案2: 在setting的databases中添加以下代码取消外键检查</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    &apos;default&apos;: &#123;</span><br><span class="line">        &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;,</span><br><span class="line">        &apos;NAME&apos;: &apos;mxonline2&apos;,</span><br><span class="line">        &apos;USER&apos;: &apos;root&apos;,</span><br><span class="line">        &apos;PASSWORD&apos;: &apos;你的密码&apos;,</span><br><span class="line">        &apos;HOST&apos;:&apos;127.0.0.1&apos;,</span><br><span class="line">        &apos;OPTIONS&apos;: &#123;</span><br><span class="line">          &quot;init_command&quot;: &quot;SET foreign_key_checks=0;&quot;,</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180109/l4mGKFaGm4.png?imageslim" alt="mark"></p><p>实验成功为了不影响后面，把options删除</p><p>本小节结束对应commit:</p><blockquote><p>admin中添加管理器&amp;注册。时区,语言,utc(False).数据库中选项参数。female的长度修改, createsuperuser.对应5-1</p></blockquote><h2 id="xadmin的安装"><a href="#xadmin的安装" class="headerlink" title="xadmin的安装"></a>xadmin的安装</h2><p>一套基于admin, 比admin更强大的系统。</p><ol><li>通过pip安装</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install xadmin</span><br></pre></td></tr></table></figure><h3 id="Python3-amp-Django2-0-1安装官方适配Django2-0的包"><a href="#Python3-amp-Django2-0-1安装官方适配Django2-0的包" class="headerlink" title="Python3 &amp; Django2.0.1安装官方适配Django2.0的包"></a>Python3 &amp; Django2.0.1安装官方适配Django2.0的包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install git+git://github.com/sshwsfc/xadmin.git@django2</span><br></pre></td></tr></table></figure><p>xadmin可以把我们的后台做的很强大，可扩展。</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/2c3el2afjg.png?imageslim" alt="mark"></p><p>可以看到它同时下载了很多其他依赖包。</p><h3 id="注册Xadmin-与-crispy-forms"><a href="#注册Xadmin-与-crispy-forms" class="headerlink" title="注册Xadmin 与 crispy-forms"></a>注册Xadmin 与 crispy-forms</h3><p>Mxonline2/settings.py的INSTALLED_APPS中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&apos;xadmin&apos;,</span><br><span class="line">&apos;crispy_forms&apos;</span><br></pre></td></tr></table></figure><p>然后把urls中默认admin指向Xadmin</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入x admin，替换admin</span></span><br><span class="line"><span class="keyword">import</span> xadmin</span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^xadmin/'</span>, xadmin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>Python3 Django2.0.1 的url的配置中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(&apos;xadmin/&apos;, xadmin.site.urls),</span><br></pre></td></tr></table></figure><p><strong>注意：Django 2.0.1中不需要加<code>r</code>也不需要加<code>^</code></strong></p><p>将我们原来写的user/admin.py中代码注释掉。</p><p>此时直接运行项目会报错，因为我们Xadmin的默认数据表并没有migarte</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ProgrammingError: (1146, &quot;Table &apos;mxonline2.xadmin_usersettings&apos; doesn&apos;t exist&quot;)</span><br><span class="line">[09/Jan/2018 06:40:27] &quot;GET /xadmin/ HTTP/1.1&quot; 500 150414</span><br></pre></td></tr></table></figure><p>点击<code>Tools 菜单下 Run manage.py Task</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">makemigrations</span><br><span class="line">migrate</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180109/bgleKlg6kJ.png?imageslim" alt="mark"></p><blockquote><p>可以看到已经被应用成功。</p></blockquote><p>前往Navicat进行验证。</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/Al734ikfA4.png?imageslim" alt="mark"></p><blockquote><p>可以看到新增的表。</p></blockquote><p>Xadmin的后台采用的是bootstrap。</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/7ccm6L5BG7.png?imageslim" alt="mark"></p><blockquote><p>后面我们会介绍如何制作插件</p></blockquote><h3 id="源码安装："><a href="#源码安装：" class="headerlink" title="源码安装："></a>源码安装：</h3><p>github: <a href="https://github.com/sshwsfc/xadmin" target="_blank" rel="noopener">https://github.com/sshwsfc/xadmin</a></p><p>下载或<code>git clone</code>将源码下载到本地。</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/KFaKi4gC3C.png?imageslim" alt="mark"></p><blockquote><p>解压后将Xadmin文件夹复制到我们的项目中。</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180109/FbJeCbijh4.png?imageslim" alt="mark"></p><h4 id="Python3版本源码安装-与url配置不同"><a href="#Python3版本源码安装-与url配置不同" class="headerlink" title="Python3版本源码安装:与url配置不同"></a>Python3版本源码安装:与url配置不同</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b django2 https://github.com/sshwsfc/xadmin.git</span><br></pre></td></tr></table></figure><p>其余操作一样。</p><h3 id="新建extra-apps，并在setting中注册地址"><a href="#新建extra-apps，并在setting中注册地址" class="headerlink" title="新建extra_apps，并在setting中注册地址"></a>新建extra_apps，并在setting中注册地址</h3><p>新建new package:  extra_apps</p><blockquote><p>使用该目录存放我们的第三方插件，将Xadmin移入。<br>右键mark为SourceRoot, 但是这时候cmd下回报错。</p></blockquote><p>所以在setting.py中加入。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sys.path.insert(<span class="number">0</span>,os.path.join(BASE_DIR, <span class="string">'extra_apps'</span>))</span><br></pre></td></tr></table></figure><blockquote><p>因为我们的source目录已经有Xadmin了，就不会再去系统环境中找了。这时候卸载我们的Xadmin。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">workon mxonline2</span><br><span class="line">pip uninstall xadmin</span><br></pre></td></tr></table></figure><p>但是他的依赖包我们还需要，所以只需要卸载Xadmin。此时我们运行会报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">    from future.utils import iteritems</span><br><span class="line">ImportError: No module named future.utils</span><br></pre></td></tr></table></figure><p>安装必要的包:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pip install future</span><br><span class="line">pip install six</span><br><span class="line">pip install httplib2</span><br><span class="line">pip install django-import-export</span><br></pre></td></tr></table></figure><p>此时又可以成功运行了</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/kmCI61m81H.png?imageslim" alt="mark"></p><p>日志记录：后台管理人员做的操作都会生成一条记录。</p><p>源码安装优点:</p><ul><li>xadmin新特性</li><li>对于源码进行自己的修改。</li></ul><p>本小节结束对应commit:</p><blockquote><p>Xadmin的安装与源码安装，配置setting中extra_apps. 对应5-2</p></blockquote><h2 id="users-app-的model注册"><a href="#users-app-的model注册" class="headerlink" title="users app 的model注册"></a>users app 的model注册</h2><h3 id="遗留问题-django2-0-1使用xadmin时。如验证码等带dateTimefield区域出错。"><a href="#遗留问题-django2-0-1使用xadmin时。如验证码等带dateTimefield区域出错。" class="headerlink" title="遗留问题: django2.0.1使用xadmin时。如验证码等带dateTimefield区域出错。"></a>遗留问题: django2.0.1使用xadmin时。如验证码等带dateTimefield区域出错。</h3><p>xadmin/widgets.py</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/I3F7K6KhLf.png?imageslim" alt="mark"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">input_html = [ht <span class="keyword">for</span> ht <span class="keyword">in</span> super(AdminSplitDateTime, self).render(</span><br><span class="line">    name, value, attrs).split(<span class="string">'/&gt;&lt;'</span>) <span class="keyword">if</span> ht != <span class="string">''</span>]</span><br><span class="line">        <span class="keyword">if</span> (len(input_html) &gt; <span class="number">1</span>):</span><br><span class="line">            input_html[<span class="number">0</span>] = input_html[<span class="number">0</span>] + <span class="string">"/&gt;"</span></span><br><span class="line">            input_html[<span class="number">1</span>] = <span class="string">"&lt;"</span> + input_html[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180109/KiBgGKCgLI.png?imageslim" alt="mark"></p><blockquote><p>此时可以看到已经运行正常</p></blockquote><h3 id="真正开始"><a href="#真正开始" class="headerlink" title="真正开始"></a>真正开始</h3><p>Xadmin是基于Django的admin来开发的，所以Xadmin也继承了许多admin的用法。</p><ul><li>比如: models的注册。</li></ul><p>UserProfile已经被自动注册进去了，我们从验证码开始注册。</p><p>我们需要新建一个<code>adminx.py</code>文件，Xadmin会自动搜寻这种命名的文件。</p><h3 id="新建py文件的初始化模板"><a href="#新建py文件的初始化模板" class="headerlink" title="新建py文件的初始化模板"></a>新建py文件的初始化模板</h3><p><img src="http://myphoto.mtianyan.cn/blog/180109/22J8la5G8c.png?imageslim" alt="mark"></p><p>新建users/adminx.py：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># encoding: utf-8</span><br><span class="line">__author__ = &apos;mtianyan&apos;</span><br><span class="line">__date__ = &apos;2018/1/9 0009 08:02&apos;</span><br><span class="line"></span><br><span class="line">import xadmin</span><br><span class="line"></span><br><span class="line">from .models import EmailVerifyRecord</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 创建admin的管理类,这里不再是继承admin，而是继承object</span><br><span class="line">class EmailVerifyRecordAdmin(object):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xadmin.site.register(EmailVerifyRecord, EmailVerifyRecordAdmin)</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180109/3LEG0j7e2h.png?imageslim" alt="mark"></p><blockquote><p>可以看到这时候访问已经有邮箱验证码了。</p></blockquote><p>邮箱验证码这几个字就是我们代码中Meta中verbose_name定义的:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">    verbose_name = <span class="string">"邮箱验证码"</span></span><br><span class="line">    verbose_name_plural = verbose_name</span><br></pre></td></tr></table></figure><p><code>verbose_name_plural</code>是<code>verbose_name</code>的复数形式。</p><p>字段的verbose_name会直接显示在后台。<code>sendtype</code>和<code>sendtime</code>没有设置所以直接显示了英文。</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/BL45eAhd66.png?imageslim" alt="mark"></p><blockquote><p>可以看到我们添加验证码成功。注意:上节版本中我们进行了: makemigaration &amp; migrate。<br>但是它是pip安装的Xadmin的数据表生成。我们卸载之后，源码安装需要重新运行进行数据迁移。(django需要通过app文件夹下的init文件来记录表的更改记录，pip的都卸了，所以就没法找到了)</p></blockquote><p>会报错:</p><blockquote><p>Xadmin_log不存在错误。只需要运行这两条命令即可。</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180109/8A5cED00eC.png?imageslim" alt="mark"></p><h4 id="解决后台部分英文显示"><a href="#解决后台部分英文显示" class="headerlink" title="解决后台部分英文显示"></a>解决后台部分英文显示</h4><blockquote><p>全部models中字段自行添加verbose_name</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180109/GG009ClkEE.png?imageslim" alt="mark"></p><p>这里就不贴出来了，自行检查都加上(没写出的请自行修改全部加上verbose_name)。</p><h4 id="解决EmailVerifyRecord-object显示"><a href="#解决EmailVerifyRecord-object显示" class="headerlink" title="解决EmailVerifyRecord object显示"></a>解决EmailVerifyRecord object显示</h4><blockquote><p><strong>全部</strong>(没写出的请自行修改)model，py2:重载<code>__unicode</code> py3:重载<code>__str__</code></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重载Unicode方法使后台不再直接显示object</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__unicode__</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&#123;0&#125;(&#123;1&#125;)'</span>.format(self.code,self.email)</span><br></pre></td></tr></table></figure><blockquote><p>上面代码是python的自身基础语法。</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180109/F45LiKCF16.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180109/gb0kBFIJKH.png?imageslim" alt="mark"></p><h4 id="配置显示列"><a href="#配置显示列" class="headerlink" title="配置显示列"></a>配置显示列</h4><p><img src="http://myphoto.mtianyan.cn/blog/180109/0mbjJe5ImK.png?imageslim" alt="mark"></p><p>users/adminx.py的管理器中设置list_display:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 创建admin的管理类,这里不再是继承admin，而是继承object</span><br><span class="line">class EmailVerifyRecordAdmin(object):</span><br><span class="line">    # 配置后台我们需要显示的列</span><br><span class="line">    list_display = [&apos;code&apos;, &apos;email&apos;,&apos;send_type&apos;, &apos;send_time&apos;]</span><br></pre></td></tr></table></figure><blockquote><p>list_display可以使用列表或元祖，建议使用列表。否则元组只有一个元素，忘记加逗号就会报错。</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180109/aj9gJbeJJJ.png?imageslim" alt="mark"></p><p>选择框的生成是因为我们加上了<code>choices</code></p><h4 id="配置搜索searchfield"><a href="#配置搜索searchfield" class="headerlink" title="配置搜索searchfield"></a>配置搜索searchfield</h4><p>users/adminx.py的管理器中EmailVerifyRecordAdmin添加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置搜索字段,不做时间搜索</span></span><br><span class="line">search_fields =  [<span class="string">'code'</span>, <span class="string">'email'</span>,<span class="string">'send_type'</span>]</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180109/fDclFJl6el.png?imageslim" alt="mark"></p><p>再添加一条数据验证搜索功能</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/8lLa4IIadB.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180109/FcAJjJcAAm.png?imageslim" alt="mark"></p><h4 id="xadmin导出csv中文乱码解决"><a href="#xadmin导出csv中文乱码解决" class="headerlink" title="xadmin导出csv中文乱码解决"></a>xadmin导出csv中文乱码解决</h4><p><img src="http://myphoto.mtianyan.cn/blog/180109/am4cLCB69D.png?imageslim" alt="mark"></p><blockquote><p>将<code>charset=utf-8</code> 改为<code>charset=gbk</code></p></blockquote><h4 id="xadmin导出xml报错"><a href="#xadmin导出xml报错" class="headerlink" title="xadmin导出xml报错"></a>xadmin导出xml报错</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TypeError at /xadmin/users/emailverifyrecord/</span><br><span class="line">unicode argument expected, got &apos;str&apos;</span><br></pre></td></tr></table></figure><blockquote><p>io.StringIO这个库新版本的python3直接往这个库中加入了一些新的内容，使得该库在Python2.7中较为混乱。</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180109/HcG0a8g2Ef.png?imageslim" alt="mark"></p><blockquote><p>将StringIo变为BytesIO</p></blockquote><h4 id="通过时间筛选字段。"><a href="#通过时间筛选字段。" class="headerlink" title="通过时间筛选字段。"></a>通过时间筛选字段。</h4><p>users/adminx.py的管理器中EmailVerifyRecordAdmin添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 配置筛选字段</span><br><span class="line">list_filter =  [&apos;code&apos;, &apos;email&apos;,&apos;send_type&apos;, &apos;send_time&apos;]</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180109/FhLLheAi2f.png?imageslim" alt="mark"></p><h3 id="Django的admin-Xadmin和其他系统区别"><a href="#Django的admin-Xadmin和其他系统区别" class="headerlink" title="Django的admin, Xadmin和其他系统区别"></a>Django的admin, Xadmin和其他系统区别</h3><blockquote><p>不像php等其他语言是一个功能模块一个功能设计的。<br>Django是对于每张表增删改查的管理器，我们可以在增删改成的基础上加上我们自己的后台逻辑。<br>因此某种程度可以说他是不依赖于具体业务的。不管啥系统后台都是由表组成。</p></blockquote><p>不依赖于后台逻辑，又可以加上逻辑。</p><h3 id="user-models的注册"><a href="#user-models的注册" class="headerlink" title="user/models的注册"></a>user/models的注册</h3><p>users/adminx.py中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 创建banner的管理类</span><br><span class="line">class BannerAdmin(object):</span><br><span class="line">    list_display = [&apos;title&apos;, &apos;image&apos;, &apos;url&apos;,&apos;index&apos;, &apos;add_time&apos;]</span><br><span class="line">    search_fields = [&apos;title&apos;, &apos;image&apos;, &apos;url&apos;,&apos;index&apos;]</span><br><span class="line">    list_filter = [&apos;title&apos;, &apos;image&apos;, &apos;url&apos;,&apos;index&apos;, &apos;add_time&apos;]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 将model与admin管理器进行关联注册</span><br><span class="line">xadmin.site.register(Banner, BannerAdmin)</span><br></pre></td></tr></table></figure><p>此时后台页面。</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/0L58d277Ba.png?imageslim" alt="mark"></p><blockquote><p>可以自行测试轮播图是否可以新建成功。</p></blockquote><p>本小节结束对应commit:</p><blockquote><p>usersmodels三张表注册进xadmin, 配置搜索过滤展示字段，修复xadmin导出xml错误,导出csv乱码，Unicode重载。对应5-3</p></blockquote><p>py3(django2.0.1):</p><blockquote><p>usersmodels三张表注册进xadmin, 配置搜索过滤展示字段，修复xadmin导出csv乱码，修复django2.0.1的indexError, str重载。对应5-3</p></blockquote><h2 id="剩余app-model注册"><a href="#剩余app-model注册" class="headerlink" title="剩余app model注册"></a>剩余app model注册</h2><h3 id="courses注册"><a href="#courses注册" class="headerlink" title="courses注册"></a>courses注册</h3><p>新建courses/adminx.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line">__author__ = <span class="string">'mtianyan'</span></span><br><span class="line">__date__ = <span class="string">'2018/1/9 0009 20:10'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Course, Lesson, Video, CourseResource</span><br><span class="line"><span class="keyword">import</span> xadmin</span><br><span class="line"></span><br><span class="line"><span class="comment"># Course的admin管理器</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CourseAdmin</span><span class="params">(object)</span>:</span></span><br><span class="line">    list_display = [</span><br><span class="line">        <span class="string">'name'</span>,</span><br><span class="line">        <span class="string">'desc'</span>,</span><br><span class="line">        <span class="string">'detail'</span>,</span><br><span class="line">        <span class="string">'degree'</span>,</span><br><span class="line">        <span class="string">'learn_times'</span>,</span><br><span class="line">        <span class="string">'students'</span>]</span><br><span class="line">    search_fields = [<span class="string">'name'</span>, <span class="string">'desc'</span>, <span class="string">'detail'</span>, <span class="string">'degree'</span>, <span class="string">'students'</span>]</span><br><span class="line">    list_filter = [</span><br><span class="line">        <span class="string">'name'</span>,</span><br><span class="line">        <span class="string">'desc'</span>,</span><br><span class="line">        <span class="string">'detail'</span>,</span><br><span class="line">        <span class="string">'degree'</span>,</span><br><span class="line">        <span class="string">'learn_times'</span>,</span><br><span class="line">        <span class="string">'students'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LessonAdmin</span><span class="params">(object)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'course'</span>, <span class="string">'name'</span>, <span class="string">'add_time'</span>]</span><br><span class="line">    search_fields = [<span class="string">'course'</span>, <span class="string">'name'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># __name代表使用外键中name字段</span></span><br><span class="line">    list_filter = [<span class="string">'course__name'</span>, <span class="string">'name'</span>, <span class="string">'add_time'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VideoAdmin</span><span class="params">(object)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'lesson'</span>, <span class="string">'name'</span>, <span class="string">'add_time'</span>]</span><br><span class="line">    search_fields = [<span class="string">'lesson'</span>, <span class="string">'name'</span>]</span><br><span class="line">    list_filter = [<span class="string">'lesson'</span>, <span class="string">'name'</span>, <span class="string">'add_time'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CourseResourceAdmin</span><span class="params">(object)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'course'</span>, <span class="string">'name'</span>, <span class="string">'download'</span>, <span class="string">'add_time'</span>]</span><br><span class="line">    search_fields = [<span class="string">'course'</span>, <span class="string">'name'</span>, <span class="string">'download'</span>]</span><br><span class="line">    <span class="comment"># __name代表使用外键中name字段</span></span><br><span class="line">    list_filter = [<span class="string">'course__name'</span>, <span class="string">'name'</span>, <span class="string">'download'</span>, <span class="string">'add_time'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将管理器与model进行注册关联</span></span><br><span class="line">xadmin.site.register(Course, CourseAdmin)</span><br><span class="line">xadmin.site.register(Lesson, LessonAdmin)</span><br><span class="line">xadmin.site.register(Video, VideoAdmin)</span><br><span class="line">xadmin.site.register(CourseResource, CourseResourceAdmin)</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180109/H8eLIc73d9.png?imageslim" alt="mark"></p><blockquote><p>注意：对应后台显示英文的字段自行检查<code>verbosename</code>，自行加上。<br>注意: py2下重载<code>__unicode__</code>方法，py3下重载<code>__str__</code>方法</p></blockquote><p>如(注意缩进):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'《&#123;0&#125;》课程的章节 &gt;&gt; &#123;1&#125;'</span>.format(self.course,self.name)</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180109/ICGm5c3acB.png?imageslim" alt="mark"></p><p><code>int</code>类型后台会生成如下图区间取值:</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/9mcfFD7kml.png?imageslim" alt="mark"></p><p>可以看到有外键关系的会有一个小符号。</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/dH8Kblkmaj.png?imageslim" alt="mark"></p><h3 id="注册机构app的adminx"><a href="#注册机构app的adminx" class="headerlink" title="注册机构app的adminx"></a>注册机构app的adminx</h3><p>新建<code>organization/adminx.py</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line">__author__ = <span class="string">'mtianyan'</span></span><br><span class="line">__date__ = <span class="string">'2018/1/9 0009 21:01'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> xadmin</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> CityDict, CourseOrg, Teacher</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 机构所属城市名后台管理器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CityDictAdmin</span><span class="params">(object)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'name'</span>, <span class="string">'desc'</span>, <span class="string">'add_time'</span>]</span><br><span class="line">    search_fields = [<span class="string">'name'</span>, <span class="string">'desc'</span>]</span><br><span class="line">    list_filter = [<span class="string">'name'</span>, <span class="string">'desc'</span>, <span class="string">'add_time'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 机构课程信息管理器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CourseOrgAdmin</span><span class="params">(object)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'name'</span>, <span class="string">'desc'</span>, <span class="string">'click_nums'</span>, <span class="string">'fav_nums'</span>,<span class="string">'add_time'</span> ]</span><br><span class="line">    search_fields = [<span class="string">'name'</span>, <span class="string">'desc'</span>, <span class="string">'click_nums'</span>, <span class="string">'fav_nums'</span>]</span><br><span class="line">    list_filter = [<span class="string">'name'</span>, <span class="string">'desc'</span>, <span class="string">'click_nums'</span>, <span class="string">'fav_nums'</span>,<span class="string">'city__name'</span>,<span class="string">'address'</span>,<span class="string">'add_time'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TeacherAdmin</span><span class="params">(object)</span>:</span></span><br><span class="line">    list_display = [ <span class="string">'name'</span>,<span class="string">'org'</span>, <span class="string">'work_years'</span>, <span class="string">'work_company'</span>,<span class="string">'add_time'</span>]</span><br><span class="line">    search_fields = [<span class="string">'org'</span>, <span class="string">'name'</span>, <span class="string">'work_years'</span>, <span class="string">'work_company'</span>]</span><br><span class="line">    list_filter = [<span class="string">'org__name'</span>, <span class="string">'name'</span>, <span class="string">'work_years'</span>, <span class="string">'work_company'</span>,<span class="string">'click_nums'</span>, <span class="string">'fav_nums'</span>, <span class="string">'add_time'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xadmin.site.register(CityDict, CityDictAdmin)</span><br><span class="line">xadmin.site.register(CourseOrg, CourseOrgAdmin)</span><br><span class="line">xadmin.site.register(Teacher, TeacherAdmin)</span><br></pre></td></tr></table></figure><blockquote><p>注意：对应后台显示英文的字段自行检查verbosename，自行加上。<br>注意: py2下重载<code>__unicode__</code>方法，py3下重载<code>__str__</code>方法</p></blockquote><p>如(注意缩进):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">"[&#123;0&#125;]的教师: &#123;1&#125;"</span>.format(self.org, self.name)</span><br></pre></td></tr></table></figure><p>如果注册后没有显示： 重新登录，或重启项目</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/cIe1LjK7gC.png?imageslim" alt="mark"></p><h3 id="operation-app注册xadmin"><a href="#operation-app注册xadmin" class="headerlink" title="operation app注册xadmin"></a>operation app注册xadmin</h3><p>新建<code>operation/adminx.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line">__author__ = <span class="string">'mtianyan'</span></span><br><span class="line">__date__ = <span class="string">'2018/1/9 0009 22:12'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> xadmin</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> UserAsk, UserCourse, UserMessage, CourseComments, UserFavorite</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户表单我要学习后台管理器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserAskAdmin</span><span class="params">(object)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'name'</span>, <span class="string">'mobile'</span>, <span class="string">'course_name'</span>, <span class="string">'add_time'</span>]</span><br><span class="line">    search_fields = [<span class="string">'name'</span>, <span class="string">'mobile'</span>, <span class="string">'course_name'</span>]</span><br><span class="line">    list_filter = [<span class="string">'name'</span>, <span class="string">'mobile'</span>, <span class="string">'course_name'</span>, <span class="string">'add_time'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户课程学习后台管理器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserCourseAdmin</span><span class="params">(object)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'user'</span>, <span class="string">'course'</span>, <span class="string">'add_time'</span>]</span><br><span class="line">    search_fields = [<span class="string">'user'</span>, <span class="string">'course'</span>]</span><br><span class="line">    list_filter = [<span class="string">'user'</span>, <span class="string">'course'</span>, <span class="string">'add_time'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户消息后台管理器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserMessageAdmin</span><span class="params">(object)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'user'</span>, <span class="string">'message'</span>, <span class="string">'has_read'</span>, <span class="string">'add_time'</span>]</span><br><span class="line">    search_fields = [<span class="string">'user'</span>, <span class="string">'message'</span>, <span class="string">'has_read'</span>]</span><br><span class="line">    list_filter = [<span class="string">'user'</span>, <span class="string">'message'</span>, <span class="string">'has_read'</span>, <span class="string">'add_time'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户评论后台管理器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CourseCommentsAdmin</span><span class="params">(object)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'user'</span>, <span class="string">'course'</span>, <span class="string">'comments'</span>, <span class="string">'add_time'</span>]</span><br><span class="line">    search_fields = [<span class="string">'user'</span>, <span class="string">'course'</span>, <span class="string">'comments'</span>]</span><br><span class="line">    list_filter = [<span class="string">'user'</span>, <span class="string">'course'</span>, <span class="string">'comments'</span>, <span class="string">'add_time'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户收藏后台管理器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserFavoriteAdmin</span><span class="params">(object)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'user'</span>, <span class="string">'fav_id'</span>, <span class="string">'fav_type'</span>, <span class="string">'add_time'</span>]</span><br><span class="line">    search_fields = [<span class="string">'user'</span>, <span class="string">'fav_id'</span>, <span class="string">'fav_type'</span>]</span><br><span class="line">    list_filter = [<span class="string">'user'</span>, <span class="string">'fav_id'</span>, <span class="string">'fav_type'</span>, <span class="string">'add_time'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将后台管理器与models进行关联注册。</span></span><br><span class="line">xadmin.site.register(UserAsk, UserAskAdmin)</span><br><span class="line">xadmin.site.register(UserCourse, UserCourseAdmin)</span><br><span class="line">xadmin.site.register(UserMessage, UserMessageAdmin)</span><br><span class="line">xadmin.site.register(CourseComments, CourseCommentsAdmin)</span><br><span class="line">xadmin.site.register(UserFavorite, UserFavoriteAdmin)</span><br></pre></td></tr></table></figure><blockquote><p>注意：对应后台显示英文的字段自行检查<code>verbosename</code>，自行加上。<br>注意: py2下重载<code>__unicode__</code>方法，py3下重载<code>__str__</code>方法</p></blockquote><p>如(注意缩进):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">"[&#123;0&#125;]的教师: &#123;1&#125;"</span>.format(self.org, self.name)</span><br></pre></td></tr></table></figure><p>成功性验证:</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/E6il5E9j86.png?imageslim" alt="mark"></p><p>本小节结束对于commit:</p><blockquote><p>5:4 注册完成operation,机构，课程app。注意:自行重载str/unicode。补全verbosename。</p></blockquote><h2 id="xadmin全局配置"><a href="#xadmin全局配置" class="headerlink" title="xadmin全局配置"></a>xadmin全局配置</h2><p>将全局配置修改:</p><ul><li>如左上角：django Xadmin。下面的我的公司</li><li>主题修改，app名称汉化，菜单收叠。</li></ul><h3 id="使用Xadmin的主题功能。"><a href="#使用Xadmin的主题功能。" class="headerlink" title="使用Xadmin的主题功能。"></a>使用Xadmin的主题功能。</h3><p>把全站的配置放在users\adminx.py中:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> xadmin <span class="keyword">import</span> views</span><br><span class="line"><span class="comment"># 创建X admin的全局管理器并与view绑定。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseSetting</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 开启主题功能</span></span><br><span class="line">    enable_themes = <span class="keyword">True</span></span><br><span class="line">    use_bootswatch = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将全局配置管理与view绑定注册</span></span><br><span class="line">xadmin.site.register(views.BaseAdminView, BaseSetting)</span><br></pre></td></tr></table></figure><h3 id="解决django1-9-python2-下Xadmin主题不生效问题。"><a href="#解决django1-9-python2-下Xadmin主题不生效问题。" class="headerlink" title="解决django1.9(python2)下Xadmin主题不生效问题。"></a>解决django1.9(python2)下Xadmin主题不生效问题。</h3><p><a href="https://my.oschina.net/u/2396236/blog/1083251" target="_blank" rel="noopener">https://my.oschina.net/u/2396236/blog/1083251</a></p><ul><li>安装requests</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></table></figure><ul><li>/xadmin/plugins/themes.py 引入requests</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br></pre></td></tr></table></figure><ul><li>修改block_top_navmenu方法：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">def block_top_navmenu(self, context, nodes):</span><br><span class="line"></span><br><span class="line">       themes = [</span><br><span class="line">           &#123;&apos;name&apos;: _(u&quot;Default&quot;), &apos;description&apos;: _(u&quot;Default bootstrap theme&quot;), &apos;css&apos;: self.default_theme&#125;,</span><br><span class="line">           &#123;&apos;name&apos;: _(u&quot;Bootstrap2&quot;), &apos;description&apos;: _(u&quot;Bootstrap 2.x theme&quot;), &apos;css&apos;: self.bootstrap2_theme&#125;,</span><br><span class="line">           ]</span><br><span class="line">       select_css = context.get(&apos;site_theme&apos;, self.default_theme)</span><br><span class="line"></span><br><span class="line">       if self.user_themes:</span><br><span class="line">           themes.extend(self.user_themes)</span><br><span class="line"></span><br><span class="line">       if self.use_bootswatch:</span><br><span class="line">           ex_themes = cache.get(THEME_CACHE_KEY)</span><br><span class="line">           if ex_themes:</span><br><span class="line">               themes.extend(json.loads(ex_themes))</span><br><span class="line">           else:</span><br><span class="line">               ex_themes = []</span><br><span class="line">               try:</span><br><span class="line">                   flag = False#假如为True使用原来的代码，假如为Flase，使用requests库来访问</span><br><span class="line">                   if flag:</span><br><span class="line">                       h = httplib2.Http()</span><br><span class="line">                       resp, content = h.request(&quot;http://bootswatch.com/api/3.json&quot;, &apos;GET&apos;, &apos;&apos;,</span><br><span class="line">                           headers=&#123;&quot;Accept&quot;: &quot;application/json&quot;, &quot;User-Agent&quot;: self.request.META[&apos;HTTP_USER_AGENT&apos;]&#125;)</span><br><span class="line">                       if six.PY3:</span><br><span class="line">                           content = content.decode()</span><br><span class="line">                       watch_themes = json.loads(content)[&apos;themes&apos;]</span><br><span class="line">                   else:</span><br><span class="line">                       content = requests.get(&quot;https://bootswatch.com/api/3.json&quot;)</span><br><span class="line">                       if six.PY3:</span><br><span class="line">                           content = content.text.decode()</span><br><span class="line">                       watch_themes = json.loads(content.text)[&apos;themes&apos;]</span><br><span class="line"></span><br><span class="line">                   ex_themes.extend([</span><br><span class="line">                       &#123;&apos;name&apos;: t[&apos;name&apos;], &apos;description&apos;: t[&apos;description&apos;],</span><br><span class="line">                           &apos;css&apos;: t[&apos;cssMin&apos;], &apos;thumbnail&apos;: t[&apos;thumbnail&apos;]&#125;</span><br><span class="line">                       for t in watch_themes])</span><br><span class="line">               except Exception as e:</span><br><span class="line">                   print(e)</span><br><span class="line"></span><br><span class="line">               cache.set(THEME_CACHE_KEY, json.dumps(ex_themes), 24 * 3600)</span><br><span class="line">               themes.extend(ex_themes)</span><br><span class="line"></span><br><span class="line">       nodes.append(loader.render_to_string(&apos;xadmin/blocks/comm.top.theme.html&apos;, &#123;&apos;themes&apos;: themes, &apos;select_css&apos;: select_css&#125;))</span><br></pre></td></tr></table></figure><h3 id="修改django-admin-和下面的我的公司收起菜单"><a href="#修改django-admin-和下面的我的公司收起菜单" class="headerlink" title="修改django admin 和下面的我的公司收起菜单"></a>修改django admin 和下面的我的公司收起菜单</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># x admin 全局配置参数信息设置</span><br><span class="line">class GlobalSettings(object):</span><br><span class="line">    site_title = &quot;天涯明月笙: 慕课后台管理站&quot;</span><br><span class="line">    site_footer = &quot;mtianyan&apos;s mooc&quot;</span><br><span class="line">    # 收起菜单</span><br><span class="line">    menu_style = &quot;accordion&quot;</span><br><span class="line"># 将头部与脚部信息进行注册:</span><br><span class="line">xadmin.site.register(views.CommAdminView, GlobalSettings)</span><br></pre></td></tr></table></figure><h3 id="apps-py配置app的显示名称"><a href="#apps-py配置app的显示名称" class="headerlink" title="apps.py配置app的显示名称"></a>apps.py配置app的显示名称</h3><p>每个app下执行同样操作:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> django.apps <span class="keyword">import</span> AppConfig</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CoursesConfig</span><span class="params">(AppConfig)</span>:</span></span><br><span class="line">    name = <span class="string">'courses'</span></span><br><span class="line">    verbose_name = <span class="string">u"课程"</span></span><br></pre></td></tr></table></figure><p><strong>注意自行找猫画虎为每个app添加中文名</strong></p><blockquote><p>新建app时并没有引用apps的配置</p></blockquote><p>在app下的init.py中添加:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">default_app_config = <span class="string">"operation.apps.OperationConfig"</span></span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180109/14kIeC7dbA.png?imageslim" alt="mark"></p><p>注意对应关系。</p><p><strong>注意为每个都添加对应的default_app_config</strong></p><p>最终大功告成：</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/KGcFbA85d9.png?imageslim" alt="mark"></p><h3 id="自定义导航菜单顺序"><a href="#自定义导航菜单顺序" class="headerlink" title="自定义导航菜单顺序"></a>自定义导航菜单顺序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">class GlobalSetting(object):</span><br><span class="line">     def get_site_menu(self):</span><br><span class="line">        return (</span><br><span class="line">            &#123;&apos;title&apos;: &apos;课程管理&apos;, &apos;menus&apos;: (</span><br><span class="line">                &#123;&apos;title&apos;: &apos;课程信息&apos;, &apos;url&apos;: self.get_model_url(Course, &apos;changelist&apos;)&#125;,</span><br><span class="line">                &#123;&apos;title&apos;: &apos;章节信息&apos;, &apos;url&apos;: self.get_model_url(Lesson, &apos;changelist&apos;)&#125;,</span><br><span class="line">                &#123;&apos;title&apos;: &apos;视频信息&apos;, &apos;url&apos;: self.get_model_url(Video, &apos;changelist&apos;)&#125;,</span><br><span class="line">                &#123;&apos;title&apos;: &apos;课程资源&apos;, &apos;url&apos;: self.get_model_url(CourseResource, &apos;changelist&apos;)&#125;,</span><br><span class="line">                &#123;&apos;title&apos;: &apos;课程评论&apos;, &apos;url&apos;: self.get_model_url(CourseComments, &apos;changelist&apos;)&#125;,</span><br><span class="line">            )&#125;,</span><br><span class="line">            &#123;&apos;title&apos;: &apos;机构管理&apos;, &apos;menus&apos;: (</span><br><span class="line">                &#123;&apos;title&apos;: &apos;所在城市&apos;, &apos;url&apos;: self.get_model_url(CityDict, &apos;changelist&apos;)&#125;,</span><br><span class="line">                &#123;&apos;title&apos;: &apos;机构讲师&apos;, &apos;url&apos;: self.get_model_url(Teacher, &apos;changelist&apos;)&#125;,</span><br><span class="line">                &#123;&apos;title&apos;: &apos;机构信息&apos;, &apos;url&apos;: self.get_model_url(CourseOrg, &apos;changelist&apos;)&#125;,</span><br><span class="line">            )&#125;,</span><br><span class="line">            &#123;&apos;title&apos;: &apos;用户管理&apos;, &apos;menus&apos;: (</span><br><span class="line">                &#123;&apos;title&apos;: &apos;用户信息&apos;, &apos;url&apos;: self.get_model_url(UserProfile, &apos;changelist&apos;)&#125;,</span><br><span class="line">                &#123;&apos;title&apos;: &apos;用户验证&apos;, &apos;url&apos;: self.get_model_url(EmailVerifyRecord, &apos;changelist&apos;)&#125;,</span><br><span class="line">                &#123;&apos;title&apos;: &apos;用户课程&apos;, &apos;url&apos;: self.get_model_url(UserCourse, &apos;changelist&apos;)&#125;,</span><br><span class="line">                &#123;&apos;title&apos;: &apos;用户收藏&apos;, &apos;url&apos;: self.get_model_url(UserFavorite, &apos;changelist&apos;)&#125;,</span><br><span class="line">                &#123;&apos;title&apos;: &apos;用户消息&apos;, &apos;url&apos;: self.get_model_url(UserMessage, &apos;changelist&apos;)&#125;,</span><br><span class="line">            )&#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#123;&apos;title&apos;: &apos;系统管理&apos;, &apos;menus&apos;: (</span><br><span class="line">                &#123;&apos;title&apos;: &apos;用户咨询&apos;, &apos;url&apos;: self.get_model_url(UserAsk, &apos;changelist&apos;)&#125;,</span><br><span class="line">                &#123;&apos;title&apos;: &apos;首页轮播&apos;, &apos;url&apos;: self.get_model_url(Banner, &apos;changelist&apos;)&#125;,</span><br><span class="line">                &#123;&apos;title&apos;: &apos;用户分组&apos;, &apos;url&apos;: self.get_model_url(Group, &apos;changelist&apos;)&#125;,</span><br><span class="line">                &#123;&apos;title&apos;: &apos;用户权限&apos;, &apos;url&apos;: self.get_model_url(Permission, &apos;changelist&apos;)&#125;,</span><br><span class="line">                &#123;&apos;title&apos;: &apos;日志记录&apos;, &apos;url&apos;: self.get_model_url(Log, &apos;changelist&apos;)&#125;,</span><br><span class="line">            )&#125;,</span><br><span class="line"></span><br><span class="line">xadmin.site.register(views.CommAdminView, GlobalSetting)</span><br></pre></td></tr></table></figure><p>最终成型菜单:</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/314L2DdfGB.png?imageslim" alt="mark"></p><h3 id="日志记录的使用"><a href="#日志记录的使用" class="headerlink" title="日志记录的使用"></a>日志记录的使用</h3><blockquote><p>日志记录会记录下我们进行过什么操作。</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180110/34EdEDHgac.png?imageslim" alt="mark"></p><p>通过点击动作，进入当时修改的某条信息</p><p>第五章完结对应commit:</p><blockquote><p>5-5 (第五章完结),配置了页头页脚信息，修改了菜单的顺序，配置apps中文名，修复Python2下，xadmin主题不生效问题。 完结撒花。</p></blockquote><blockquote class="blockquote-center"><p>矛盾的普遍性是指矛盾存在于一切事物的发展过程之中，矛盾存在于一切事物发展过程的始终。 </p></blockquote><div class="note "><p> 我想只要是个系统，就少不了登录注册。这是我们需要首先处理的主要矛盾。</p><ul><li>完成登录 注册 找回密码 激活 验证码集成</li></ul></div><h1 id="完成登录-注册-找回密码-激活-验证码集成"><a href="#完成登录-注册-找回密码-激活-验证码集成" class="headerlink" title="完成登录 注册 找回密码 激活 验证码集成"></a>完成登录 注册 找回密码 激活 验证码集成</h1><h2 id="6-1-首页和登录页面的配置"><a href="#6-1-首页和登录页面的配置" class="headerlink" title="6-1 首页和登录页面的配置"></a>6-1 首页和登录页面的配置</h2><p>用户访问我们的根目录，我们需要把html文件返回给用户。因此我们第一步把html文件放入template目录。</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/fBkbi7968D.png?imageslim" alt="mark"></p><p>在html中找到首页的html。拷贝到我们的template目录</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/1EJD2hFc7E.png?imageslim" alt="mark"></p><h3 id="新建static目录-1"><a href="#新建static目录-1" class="headerlink" title="新建static目录"></a>新建static目录</h3><blockquote><p>用来存放css, js等静态文件</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180110/ECL5dmKFkc.png?imageslim" alt="mark"></p><h4 id="配置处理静态文件的url。"><a href="#配置处理静态文件的url。" class="headerlink" title="配置处理静态文件的url。"></a>配置处理静态文件的url。</h4><p>Django2.0.1版本下:</p><p>Mxonline3/urls.py：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from django.views.generic import TemplateView</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(&apos;xadmin/&apos;, xadmin.site.urls),</span><br><span class="line">    # TemplateView.as_view会将template转换为view</span><br><span class="line">    path(&apos;&apos;, TemplateView.as_view(template_name= &quot;index.html&quot;), name=  &quot;index&quot;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>Django1.9.8版本下:</p><p>Mxonline2/urls.py：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from django.views.generic import TemplateView</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(r&apos;^xadmin/&apos;, xadmin.site.urls),</span><br><span class="line">    url(&apos;^$&apos;, TemplateView.as_view(template_name=&quot;index.html&quot;), name=&quot;index&quot;)</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>此时运行访问就可以访问到我们的index页面，不过会没有样式。</p><h3 id="设置static文件"><a href="#设置static文件" class="headerlink" title="设置static文件"></a>设置static文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 说明静态文件放在哪个目录</span></span><br><span class="line"></span><br><span class="line">STATIC_URL = <span class="string">'/static/'</span></span><br><span class="line"></span><br><span class="line">STATICFILES_DIRS = (</span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">"static"</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="修改index页面中前端样式的引用地址"><a href="#修改index页面中前端样式的引用地址" class="headerlink" title="修改index页面中前端样式的引用地址"></a>修改index页面中前端样式的引用地址</h3><p><img src="http://myphoto.mtianyan.cn/blog/180110/LflfkaA3Kj.png?imageslim" alt="mark"></p><p>使用ctrl+f查找出所有<code>../</code>,全部替换为<code>/static/</code></p><p>然后点击运行，刷新页面可以看到我们的页面已经显示正常了。</p><h3 id="拷贝登录页面到template"><a href="#拷贝登录页面到template" class="headerlink" title="拷贝登录页面到template"></a>拷贝登录页面到template</h3><p><img src="http://myphoto.mtianyan.cn/blog/180110/cJ8c3l41H4.png?imageslim" alt="mark"></p><p>使用ctrl+f查找出所有<code>../</code>,全部替换为<code>/static/</code></p><blockquote><p>将css，js，图片全部替换完。</p></blockquote><h4 id="url配置跳转登录页面"><a href="#url配置跳转登录页面" class="headerlink" title="url配置跳转登录页面"></a>url配置跳转登录页面</h4><p>Mxonline2/urls.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 登录页面跳转url</span></span><br><span class="line">url(<span class="string">'^login/$'</span>, TemplateView.as_view(template_name=<span class="string">"login.html"</span>), name=<span class="string">"login"</span>)</span><br></pre></td></tr></table></figure><p>Mxonline3/urls.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># TemplateView.as_view会将template转换为view</span></span><br><span class="line">path(<span class="string">''</span>, TemplateView.as_view(template_name= <span class="string">"index.html"</span>), name=  <span class="string">"index"</span>),</span><br><span class="line">path(<span class="string">'login/'</span>, TemplateView.as_view(template_name= <span class="string">"login.html"</span>), name=  <span class="string">"login"</span>)</span><br></pre></td></tr></table></figure><p>在index页面，ctrl+f找到登录。将a标签中地址替换为login的url。</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/CBIAK2cjH0.png?imageslim" alt="mark"></p><p>取消注释后，将login.html改为<code>/login/</code></p><p><img src="http://myphoto.mtianyan.cn/blog/180110/ejcbBB0diJ.png?imageslim" alt="mark"></p><p>点击左侧减号收起。然后使用<code>&lt;!--</code>与<code>--&gt;</code>将个人中心暂时注释。</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/889BdI0a2g.png?imageslim" alt="mark"></p><p>可以看到登录注册，点击登录。</p><blockquote><p>根路径下的所有url都不需要斜杠</p><p>此时我们的首页已经可以成功显示，通过首页点击登录也可以成功跳转登录页面</p></blockquote><p>本小节完成对应commit:</p><blockquote><p>6-1: 完成首页与登录页面配置，设置了STATICFILES_DIRS。注意：dirs是一个元组，不要少逗号。删除了前面上传头像等直接传到根目录的目录。</p></blockquote><h2 id="6-2-用户登录-1"><a href="#6-2-用户登录-1" class="headerlink" title="6-2 用户登录-1"></a>6-2 用户登录-1</h2><blockquote><p>配置url之前我们要书写好对应处理的view</p></blockquote><p>Django的view实际就是一个函数，接收request请求对象，处理后返回response对象。</p><p>users/views.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"><span class="comment"># 当我们配置url被这个view处理时，自动传入request对象.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 前端向后端发送的请求方式: get 或post</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 登录提交表单为post</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">"POST"</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="comment"># 获取登录页面为get</span></span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">"GET"</span>:</span><br><span class="line">        <span class="comment"># render就是渲染html返回用户</span></span><br><span class="line">        <span class="comment"># render三变量: request 模板名称 一个字典写明传给前端的值</span></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">"login.html"</span>, &#123;&#125;)</span><br></pre></td></tr></table></figure><p>django1.9.8/urls.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> users.views <span class="keyword">import</span> user_login</span><br><span class="line">    <span class="comment"># 登录页面跳转url login不要直接调用。而只是指向这个函数对象。</span></span><br><span class="line">    url(<span class="string">'^login/$'</span>,login, name=<span class="string">"login"</span>)</span><br></pre></td></tr></table></figure></p><p>django2.0.1/urls.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> users.views <span class="keyword">import</span> login</span><br><span class="line">    path(<span class="string">'login/'</span>, login, name=<span class="string">"login"</span>)</span><br></pre></td></tr></table></figure><p>在两行返回语句的位置打上断点:</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/lm6DF2CE02.png?imageslim" alt="mark"></p><p>点击debug，进入首页后点击登录。可以看到</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/5LiGiKh2ID.png?imageslim" alt="mark"></p><p>说明确实是通过get请求请求页面的。</p><p>通过值浏览器窗口可以看到这是一个<code>&lt;WSGIRequest: GET &#39;/login/&#39;&gt;</code>对象</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/I2C4i7FFj4.png?imageslim" alt="mark"></p><p><code>path:</code>是指向的地址。</p><p><code>f8</code>继续运行。跳转到登录页面。</p><h2 id="6-3-用户登录2"><a href="#6-3-用户登录2" class="headerlink" title="6-3 用户登录2"></a>6-3 用户登录2</h2><h3 id="html-form基础知识"><a href="#html-form基础知识" class="headerlink" title="html form基础知识"></a>html form基础知识</h3><p>templates/login.html:</p><blockquote><p>可以看到form表单中有input。点击提交会把值提交到后台。我们需要修改action让它指向我们的后台相应地址。</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180110/IkkaFHhGAl.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180110/ddDBg58ek1.png?imageslim" alt="mark"></p><blockquote><p>input中的name值会被传递到后台。回组成键值对形式。</p></blockquote><p>submit类型的input</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/KAFII10hf9.png?imageslim" alt="mark"></p><p>只保留post这里的断点。输入用户名密码。查看debug情况</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/mEjmk6c1j9.png?imageslim" alt="mark"></p><p><code>403禁止访问</code>错误: html页面内必须加上<code>crsf token</code> 才能传值到后台。</p><blockquote><p>我会随机的给前端发一串符号，你必须把这串符号带回来，我才允许你post。</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180110/CgEm92B9Ig.png?imageslim" alt="mark"></p><p>from表单之前写上<code>crsf token</code></p><p>此时我们查看前端页面：</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/4aBegCbaAk.png?imageslim" alt="mark"></p><p>可以看到html中登录下面有一个隐藏着的值：crsf token, 不会显示。</p><p>此时点击登录跳转到pass位置。</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/cc82F1f1kE.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180110/F7JgIA41me.png?imageslim" alt="mark"></p><p>可以看到request中的POST中是一个queryset的对象。我们可以把它当成一个字典来用。<br>来取到前端的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> request.method == <span class="string">"POST"</span>:</span><br><span class="line">    <span class="comment"># 取不到时为空，username，password为前端页面name值</span></span><br><span class="line">    user_name = request.POST.get(<span class="string">"username"</span>, <span class="string">""</span>)</span><br><span class="line">    pass_word = request.POST.get(<span class="string">"password"</span>, <span class="string">""</span>)</span><br></pre></td></tr></table></figure><p>取到用户名和密码我们就要开始进行验证登录。使用Django自带的<code>auth</code>方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> authenticate, login</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 登录提交表单为post</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">"POST"</span>:</span><br><span class="line">        <span class="comment"># 取不到时为空，username，password为前端页面name值</span></span><br><span class="line">        user_name = request.POST.get(<span class="string">"username"</span>, <span class="string">""</span>)</span><br><span class="line">        pass_word = request.POST.get(<span class="string">"password"</span>, <span class="string">""</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 成功返回user对象,失败返回null</span></span><br><span class="line">        user = authenticate(username= user_name, password= pass_word)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果不是null说明验证成功</span></span><br><span class="line">        <span class="keyword">if</span> user <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="comment"># login_in 两参数：request, user</span></span><br><span class="line">            <span class="comment"># 实际是对request写了一部分东西进去，然后在render的时候：</span></span><br><span class="line">            <span class="comment"># request是要render回去的。这些信息也就随着返回浏览器。完成登录</span></span><br><span class="line">            login(request, user)</span><br><span class="line">            <span class="comment"># 跳转到首页 user request会被带回到首页</span></span><br><span class="line">            <span class="keyword">return</span> render(request, <span class="string">"index.html"</span>)</span><br><span class="line">        <span class="comment"># 没有成功说明里面的值是None，并再次跳转回主页面</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> render(request, <span class="string">"login.html"</span>, &#123;&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>authenticate调用只需要传入用户名和密码。成功会返回user对象，失败返回null</p></blockquote><p>html中通过</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/Gcia8G8fgG.png?imageslim" alt="mark"></p><blockquote><p>设置成如果登录显示个人中心那段，未登录显示登录注册</p></blockquote><p>打上断点</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/AeBb1BJE9m.png?imageslim" alt="mark"></p><p>点击debug后可以看到</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/J4caJi44DG.png?imageslim" alt="mark"></p><blockquote><p>我们成功的取到了值。</p></blockquote><p>Django默认我们使用用户名和密码来登录</p><p>成功的登录user值如下</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/741Ia99FLf.png?imageslim" alt="mark"></p><p>但是继续执行报错:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">login() takes exactly 1 argument (2 given)</span><br></pre></td></tr></table></figure><p>这时因为我们处理登录的自定义函数也叫login。就直接调用了自身，而不是调用Django提供的login。<strong>所以我们一定不要把自定义view函数命名与Django提供的冲突</strong></p><blockquote><p>解决方案：将我们的login改为<code>def user_login(request):</code></p></blockquote><p>并且前往urls.py中将login也一并改了</p><p>此时运行可以看到我们的个人中心已经出来了。</p><h3 id="改造为使用邮箱用户名均可。Setting中重载变量"><a href="#改造为使用邮箱用户名均可。Setting中重载变量" class="headerlink" title="改造为使用邮箱用户名均可。Setting中重载变量"></a>改造为使用邮箱用户名均可。Setting中重载变量</h3><blockquote><p>自定义authenticate方法</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.backends <span class="keyword">import</span> ModelBackend</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> UserProfile</span><br><span class="line"><span class="comment"># 并集运算</span></span><br><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Q</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实现用户名邮箱均可登录</span></span><br><span class="line"><span class="comment"># 继承ModelBackend类，因为它有方法authenticate，可点进源码查看</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomBackend</span><span class="params">(ModelBackend)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">authenticate</span><span class="params">(self, username=None, password=None, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 不希望用户存在两个，get只能有一个。两个是get失败的一种原因 Q为使用并集查询</span></span><br><span class="line"></span><br><span class="line">            user = UserProfile.objects.get(Q(username=username)|Q(email=username))</span><br><span class="line"></span><br><span class="line">            <span class="comment"># django的后台中密码加密：所以不能password==password</span></span><br><span class="line">            <span class="comment"># UserProfile继承的AbstractUser中有def check_password(self, raw_password):</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> user.check_password(password):</span><br><span class="line">                <span class="keyword">return</span> user</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br></pre></td></tr></table></figure><p>Mxonline2/settings.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置邮箱和用户名均可登录</span></span><br><span class="line">AUTHENTICATION_BACKENDS = (</span><br><span class="line">    <span class="string">'users.views.CustomBackend'</span>,</span><br><span class="line"></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180110/g1Hb79JKGK.png?imageslim" alt="mark"></p><blockquote><p>使用xadmin的退出，注销当前用户的退出。</p></blockquote><p>此时我们可以通过邮箱和用户名都可以完成登录。</p><h3 id="用户提示：return页面时提供它的错误信息"><a href="#用户提示：return页面时提供它的错误信息" class="headerlink" title="用户提示：return页面时提供它的错误信息"></a>用户提示：return页面时提供它的错误信息</h3><p><img src="http://myphoto.mtianyan.cn/blog/180110/l55JiK9Cmh.png?imageslim" alt="mark"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> render(request, <span class="string">"login.html"</span>, &#123;<span class="string">"msg"</span>:<span class="string">"用户名或密码错误! "</span>&#125;)</span><br></pre></td></tr></table></figure><p>Html中如何取到这个值;</p><p>login html中这段是用来做错误提示的。</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/3i7BF5edj8.png?imageslim" alt="mark"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;error btns login-form-tips&quot; id=&quot;jsLoginTips&quot;&gt;&#123;&#123; msg &#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>验证：</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/7I9gdJ5DLj.png?imageslim" alt="mark"></p><p>本小节结束对应commit:</p><blockquote><p>6-2&amp;3 完成了用户登录，登录验证自定义：邮箱用户名均可。错误信息返回前端。设置登录显示个人中心判断，注意不要把自定义方法写成login。</p></blockquote><h2 id="6-4-用form实现登录-1"><a href="#6-4-用form实现登录-1" class="headerlink" title="6-4 用form实现登录-1"></a>6-4 用form实现登录-1</h2><p>上面我们的用户登录的方法是基于函数来做的。本节我们做一个基于类方法的版本。<br>要求对类的继承有了解。</p><p>基础教程中基本上都是基于函数来做的，其实更推荐基于类来做。基于类可以带来不少好处</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基于类实现需要继承的view</span></span><br><span class="line"><span class="keyword">from</span> django.views.generic.base <span class="keyword">import</span> View</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginView</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="comment"># 直接调用get方法免去判断</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="comment"># render就是渲染html返回用户</span></span><br><span class="line">        <span class="comment"># render三变量: request 模板名称 一个字典写明传给前端的值</span></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">"login.html"</span>, &#123;&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="comment"># 取不到时为空，username，password为前端页面name值</span></span><br><span class="line">        user_name = request.POST.get(<span class="string">"username"</span>, <span class="string">""</span>)</span><br><span class="line">        pass_word = request.POST.get(<span class="string">"password"</span>, <span class="string">""</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 成功返回user对象,失败返回null</span></span><br><span class="line">        user = authenticate(username=user_name, password=pass_word)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果不是null说明验证成功</span></span><br><span class="line">        <span class="keyword">if</span> user <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="comment"># login_in 两参数：request, user</span></span><br><span class="line">            <span class="comment"># 实际是对request写了一部分东西进去，然后在render的时候：</span></span><br><span class="line">            <span class="comment"># request是要render回去的。这些信息也就随着返回浏览器。完成登录</span></span><br><span class="line">            login(request, user)</span><br><span class="line">            <span class="comment"># 跳转到首页 user request会被带回到首页</span></span><br><span class="line">            <span class="keyword">return</span> render(request, <span class="string">"index.html"</span>)</span><br><span class="line">        <span class="comment"># 没有成功说明里面的值是None，并再次跳转回主页面</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> render(request, <span class="string">"login.html"</span>, &#123;<span class="string">"msg"</span>: <span class="string">"用户名或密码错误! "</span>&#125;)</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180110/9mKFBk0Fc8.png?imageslim" alt="mark"></p><blockquote><p>继承的view中的方法。</p></blockquote><p>django1.9.8 urls中的配置:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 换用类实现</span></span><br><span class="line"><span class="keyword">from</span> users.views <span class="keyword">import</span> LoginView</span><br><span class="line">    <span class="comment"># 基于类方法实现登录,这里是调用它的方法</span></span><br><span class="line">    url(<span class="string">'^login/$'</span>, LoginView.as_view(), name=<span class="string">"login"</span>)</span><br></pre></td></tr></table></figure><p>Django2.0.1 urls配置:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基于类方法实现登录,这里是调用它的方法</span></span><br><span class="line">path(<span class="string">'login/'</span>, LoginView.as_view(), name=<span class="string">"login"</span>)</span><br></pre></td></tr></table></figure><h2 id="6-5-form字段验证"><a href="#6-5-form字段验证" class="headerlink" title="6-5 form字段验证"></a>6-5 form字段验证</h2><p>验证最大长度，是否为空等一系列。</p><p>users下新建forms文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line">__author__ = <span class="string">'mtianyan'</span></span><br><span class="line">__date__ = <span class="string">'2018/1/10 0010 04:44'</span></span><br><span class="line"><span class="comment"># 引入Django表单</span></span><br><span class="line"><span class="keyword">from</span>  django <span class="keyword">import</span> forms</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录表单验证</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginForm</span><span class="params">(forms.Form)</span>:</span></span><br><span class="line">    <span class="comment"># 用户名密码不能为空</span></span><br><span class="line">    username = forms.CharField(required=<span class="keyword">True</span>)</span><br><span class="line">    password = forms.CharField(required=<span class="keyword">True</span>, min_length=<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>定义好forms之后我们来使用它做验证。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="comment"># 类实例化需要一个字典参数dict:request.POST就是一个QueryDict所以直接传入</span></span><br><span class="line">        <span class="comment"># POST中的usernamepassword，会对应到form中</span></span><br><span class="line">        login_form = LoginForm(request.POST)</span><br><span class="line"><span class="comment">#is_valid判断我们字段是否有错执行我们原有逻辑，验证失败跳回login页面</span></span><br><span class="line">        <span class="keyword">if</span> login_form.is_valid():</span><br><span class="line">            <span class="comment"># 取不到时为空，username，password为前端页面name值</span></span><br><span class="line">            user_name = request.POST.get(<span class="string">"username"</span>, <span class="string">""</span>)</span><br><span class="line">            pass_word = request.POST.get(<span class="string">"password"</span>, <span class="string">""</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 成功返回user对象,失败返回null</span></span><br><span class="line">            user = authenticate(username=user_name, password=pass_word)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 如果不是null说明验证成功</span></span><br><span class="line">            <span class="keyword">if</span> user <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">                <span class="comment"># login_in 两参数：request, user</span></span><br><span class="line">                <span class="comment"># 实际是对request写了一部分东西进去，然后在render的时候：</span></span><br><span class="line">                <span class="comment"># request是要render回去的。这些信息也就随着返回浏览器。完成登录</span></span><br><span class="line">                login(request, user)</span><br><span class="line">                <span class="comment"># 跳转到首页 user request会被带回到首页</span></span><br><span class="line">                <span class="keyword">return</span> render(request, <span class="string">"index.html"</span>)</span><br><span class="line">        <span class="comment"># 验证不成功跳回登录页面</span></span><br><span class="line">        <span class="comment"># 没有成功说明里面的值是None，并再次跳转回主页面</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> render(request, <span class="string">"login.html"</span>, &#123;<span class="string">"msg"</span>: <span class="string">"用户名或密码错误! "</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="完善错误提示"><a href="#完善错误提示" class="headerlink" title="完善错误提示"></a>完善错误提示</h3><p>比如：既然表单都验证失败了，就不用显示密码出错了</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/Ca0lhc68He.png?imageslim" alt="mark"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 仅当用户真的密码出错时</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> render(request, <span class="string">"login.html"</span>,&#123;<span class="string">"msg"</span>:<span class="string">"用户名或密码错误!"</span>&#125;)</span><br><span class="line">        <span class="comment"># 验证不成功跳回登录页面</span></span><br><span class="line">        <span class="comment"># 没有成功说明里面的值是None，并再次跳转回主页面</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> render(</span><br><span class="line">                request, <span class="string">"login.html"</span>, &#123;</span><br><span class="line">                    <span class="string">"login_form"</span>: login_form &#125;)</span><br></pre></td></tr></table></figure><p>forms中的名称username和password必须和html中的一致。毕竟他是使用的request.POST<br>而request是从前面传过来的。</p><p>实例化<code>LoginView</code>时已经对于我们的字段进行了验证。</p><p>打上断点:</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/aelBLBFBG3.png?imageslim" alt="mark"></p><p><code>debug</code>后<code>f6</code>运行到</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/F86386mI15.png?imageslim" alt="mark"></p><p>此时可以看到<code>errors(ErrorDict)</code>中的错误</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/EefmGb08e9.png?imageslim" alt="mark"></p><p>将form传回前端:</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/CKdB5L49dc.png?imageslim" alt="mark"></p><p>前端中取值：</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/C6AajKcm51.png?imageslim" alt="mark"></p><p>给这个class加上errorput会显示红色外框。</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/G89gGl2G75.png?imageslim" alt="mark"></p><blockquote><p>注意:写在class里面</p></blockquote><h3 id="将forms错误信息显示出来"><a href="#将forms错误信息显示出来" class="headerlink" title="将forms错误信息显示出来"></a>将forms错误信息显示出来</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class="error btns login-form-tips" id="jsLoginTips"&gt;</span><br><span class="line">&#123;% <span class="keyword">for</span> key, error <span class="keyword">in</span> login_form.errors.items %&#125;</span><br><span class="line">&#123;&#123; error &#125;&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&#123;&#123; msg &#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180110/a3CjlEhC9B.png?imageslim" alt="mark"></p><ul><li>写了一个类继承Django的view，然后写了get post方法(get/post的if是Django替我们完成的)</li><li>在url中调用Loginview的as_view方法需要加上括号，进行调用。</li><li>Django的form进行表单验证并把error值传到前台。</li><li>is_valid方法，验证表单</li></ul><p>本小节完毕对应commit:</p><blockquote><p>6-4 &amp; 5 登录换用类继承view实现,使用Django form进行表单验证并把错误信息提示到前台。</p></blockquote><h2 id="6-6-session和cookie自动登录机制"><a href="#6-6-session和cookie自动登录机制" class="headerlink" title="6-6 session和cookie自动登录机制"></a>6-6 session和cookie自动登录机制</h2><blockquote><p>我们本节来讲session和cookie</p></blockquote><p>User1如何实现登录的。</p><h3 id="cookie的存储"><a href="#cookie的存储" class="headerlink" title="cookie的存储"></a>cookie的存储</h3><p>cookie是浏览器支持的一种本地存储方式。以dict，键值对方式存储。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;sessionkey&quot;: &quot;123&quot;&#125;</span><br></pre></td></tr></table></figure><p>浏览器会自动对于它进行解析。</p><h3 id="http请求是一种无状态的请求"><a href="#http请求是一种无状态的请求" class="headerlink" title="http请求是一种无状态的请求"></a>http请求是一种无状态的请求</h3><p>用户向服务器发起的两次请求之间是没有状态的。也就是服务器并不知道这是同一个用户发的。</p><p>做到记住用户:</p><blockquote><p>浏览器a在向服务器发起请求，服务器会自动给浏览器a回复一个id，浏览器a把id放到cookie当中，在下一次请求时带上这个cookie里的id值向浏览器请求，服务器就知道你是哪个浏览器发过来的了。</p></blockquote><h3 id="有状态请求-cookie"><a href="#有状态请求-cookie" class="headerlink" title="有状态请求(cookie)"></a>有状态请求(cookie)</h3><p><img src="http://myphoto.mtianyan.cn/blog/180110/4F22diHeF6.png?imageslim" alt="mark"></p><p>服务器<code>a</code>发回来的<code>id</code>会放到服务器<code>a</code>的域之下。<strong>不能跨域访问cookie。</strong></p><p>使用浏览器随便打开一个网页，然后<code>f12</code>打开。</p><p>比如我使用的<code>Chrome</code>浏览器</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/Bb6elgf96A.png?imageslim" alt="mark"></p><p>会找到存储在浏览器本地的cookie值</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/b3CH160G9h.png?imageslim" alt="mark"></p><p>点击<code>clear all</code>清空所有的<code>cookie</code> <code>f5</code>刷新页面，会发现又把这些cookie值进来。</p><p>如果将用户名和密码直接保存在cookie，可以实现<strong>最垃圾最简略版本的</strong>自动登录。</p><h3 id="解决cookie放在本地不安全的问题-session"><a href="#解决cookie放在本地不安全的问题-session" class="headerlink" title="解决cookie放在本地不安全的问题(session)"></a>解决cookie放在本地不安全的问题(session)</h3><blockquote><p>用户在第一次请求后，浏览器回复的id既可以是用户的user id。<br>也可以一段任意的字符串，我们把它叫做session id</p></blockquote><p>根据用户名和密码，服务器会采用自己的规则生成<code>session id</code>。这个<code>session id</code>保存在本地cookie。浏览器请求服务器会携带。</p><ul><li>输入用户名 &amp; 密码</li><li>调用 login(), 后端程序会根据用户名密码生成session id。保存在数据库中。</li><li>用户登录之后，需要通过这个<code>session id</code>取出这些基本信息。</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180110/F6d3AkdJB0.png?imageslim" alt="mark"></p><p>Django的默认表中的<code>session</code>表就记录了用户登录时，后端我们Django为用户生成的<code>sessionid</code>。</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/9L54Emf6md.png?imageslim" alt="mark"></p><p>可以看到<code>session key value</code> 和过期时间。</p><p>我们可以清空这张表的数据。运行项目进行登录。</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/kLdLLALGB1.png?imageslim" alt="mark"></p><blockquote><p>可以看到我们刚刚生成的session id。</p></blockquote><p>此时通过<code>f12</code>查看浏览器在本地存储的<code>session id</code>。可以看到如下图和我们数据库中的一致。</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/2Hee7I5fIl.png?imageslim" alt="mark"></p><blockquote><p><strong>session_key 发到浏览器叫做session id</strong></p></blockquote><p>通过session id 用户访问任何一个页面都会携带，服务器就会认识。</p><p>Setting.py中，</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/Gi40A0FFhB.png?imageslim" alt="mark"></p><p>这个app会拦截我们每次的request请求，在<code>request</code>中找到session id，然后去数据表中进行查询。<br>然后通过<code>session key</code> 去找到<code>session data</code>。此时直接为我们取出了user。</p><p>在服务器返回浏览器的<code>response</code>中也会直接加上<code>session id</code></p><blockquote><p>cookie是浏览器本地存储机制，存在域名之下，存储不安全。<br>服务器在返回id时通过规则生成一串字符，并设置了过期时间。存储在服务器端(数据库)</p></blockquote><p>文章: <a href="http://projectsedu.com/2016/10/17/django%E4%BB%8E%E8%AF%B7%E6%B1%82%E5%88%B0%E8%BF%94%E5%9B%9E%E9%83%BD%E7%BB%8F%E5%8E%86%E4%BA%86%E4%BB%80%E4%B9%88/" target="_blank" rel="noopener">http://projectsedu.com/2016/10/17/django%E4%BB%8E%E8%AF%B7%E6%B1%82%E5%88%B0%E8%BF%94%E5%9B%9E%E9%83%BD%E7%BB%8F%E5%8E%86%E4%BA%86%E4%BB%80%E4%B9%88/</a></p><h2 id="6-7-用户注册"><a href="#6-7-用户注册" class="headerlink" title="6-7 用户注册"></a>6-7 用户注册</h2><h3 id="拷贝注册页面进入template目录"><a href="#拷贝注册页面进入template目录" class="headerlink" title="拷贝注册页面进入template目录"></a>拷贝注册页面进入template目录</h3><h3 id="书写我们对应要处理的view-RegisterView"><a href="#书写我们对应要处理的view-RegisterView" class="headerlink" title="书写我们对应要处理的view(RegisterView)"></a>书写我们对应要处理的view(RegisterView)</h3><p>users/views.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注册功能的view</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegisterView</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="comment"># get方法直接返回页面</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">"register.html"</span>, &#123;&#125;)</span><br></pre></td></tr></table></figure><h3 id="配置对应的url"><a href="#配置对应的url" class="headerlink" title="配置对应的url"></a>配置对应的url</h3><p>Django1.9.8 url配置如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> users.views <span class="keyword">import</span> RegisterView</span><br><span class="line">    <span class="comment"># 注册url</span></span><br><span class="line">    url(<span class="string">"^register/"</span>, RegisterView.as_view(), name=<span class="string">"register"</span>),</span><br></pre></td></tr></table></figure><p>Django2.0.1 url配置如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> users.views <span class="keyword">import</span> RegisterView</span><br><span class="line">    <span class="comment"># 注册url</span></span><br><span class="line">    path(<span class="string">"register/"</span>, RegisterView.as_view(), name = <span class="string">"register"</span> )</span><br></pre></td></tr></table></figure><h3 id="修改index页面中注册url"><a href="#修改index页面中注册url" class="headerlink" title="修改index页面中注册url"></a>修改index页面中注册url</h3><p><img src="http://myphoto.mtianyan.cn/blog/180110/BJl97lJ8bd.png?imageslim" alt="mark"></p><p>此时访问首页发现可以成功跳转到注册页面</p><h3 id="修改静态文件中static目录引用"><a href="#修改静态文件中static目录引用" class="headerlink" title="修改静态文件中static目录引用"></a>修改静态文件中static目录引用</h3><h4 id="关键步骤load-staticfile"><a href="#关键步骤load-staticfile" class="headerlink" title="关键步骤load staticfile"></a>关键步骤load staticfile</h4><p><img src="http://myphoto.mtianyan.cn/blog/180110/Hm54EJ7IH9.png?imageslim" alt="mark"></p><h4 id="然后修改路径为一个相对于static的相对路径"><a href="#然后修改路径为一个相对于static的相对路径" class="headerlink" title="然后修改路径为一个相对于static的相对路径"></a>然后修改路径为一个相对于static的相对路径</h4><p><img src="http://myphoto.mtianyan.cn/blog/180110/ackf2LaLJ8.png?imageslim" alt="mark"></p><blockquote><p>他会自动根据setting中配置，为我们加上前缀</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180110/3FDhdl2aiH.png?imageslim" alt="mark"></p><blockquote><p>如果我们把目录在setting中改到mystatic。url中会自动添加指定的前缀</p></blockquote><p>可以看到可以访问成功。</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/0KkhH7b8Bm.png?imageslim" alt="mark"></p><h4 id="将目前的三个html中的静态文件全部修改目录"><a href="#将目前的三个html中的静态文件全部修改目录" class="headerlink" title="将目前的三个html中的静态文件全部修改目录"></a>将目前的三个html中的静态文件全部修改目录</h4><blockquote><p>枯燥但是要有耐心。</p></blockquote><p>这时候访问三个页面，查看样式是否完好。</p><h3 id="验证码库实现验证码"><a href="#验证码库实现验证码" class="headerlink" title="验证码库实现验证码"></a>验证码库实现验证码</h3><p><a href="https://github.com/mbi/django-simple-captcha" target="_blank" rel="noopener">https://github.com/mbi/django-simple-captcha</a></p><h4 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">workon mxonline3</span><br><span class="line">pip install  django-simple-captcha</span><br><span class="line">workon mxonline2</span><br><span class="line">pip install  django-simple-captcha==0.4.6</span><br></pre></td></tr></table></figure><ul><li><p>Add <code>captcha</code> to the <code>INSTALLED_APPS</code> in your <code>settings.py</code></p></li><li><p>Add an entry to your <code>urls.py</code>:</p></li></ul><p>django1.9.8如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url, include</span><br><span class="line">urlpatterns += [</span><br><span class="line">    url(<span class="string">r'^captcha/'</span>, include(<span class="string">'captcha.urls'</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>django2.0.1如下；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 验证码url</span><br><span class="line">path(&quot;captcha/&quot;, include(&apos;captcha.urls&apos;))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">makemigrations</span><br><span class="line">migrate</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180110/0Igb4IgB0F.png?imageslim" alt="mark"></p><p>进入数据库查看生成的表</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/JiI713cAdd.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180111/ac8KFHkCBc.png?imageslim" alt="mark"></p><h3 id="将验证码展示到页面"><a href="#将验证码展示到页面" class="headerlink" title="将验证码展示到页面"></a>将验证码展示到页面</h3><p>users/forms.py:</p><h4 id="定义我们的register-form"><a href="#定义我们的register-form" class="headerlink" title="定义我们的register form:"></a>定义我们的register form:</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 引入验证码field</span></span><br><span class="line"><span class="keyword">from</span> captcha.fields <span class="keyword">import</span> CaptchaField</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证码form &amp; 注册表单form</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegisterForm</span><span class="params">(forms.Form)</span>:</span></span><br><span class="line">    <span class="comment"># 此处email与前端name需保持一致。</span></span><br><span class="line">    email = forms.EmailField(required=<span class="keyword">True</span>)</span><br><span class="line">    <span class="comment"># 密码不能小于5位</span></span><br><span class="line">    password = forms.CharField(required=<span class="keyword">True</span>, min_length=<span class="number">5</span>)</span><br><span class="line">    <span class="comment"># 应用验证码</span></span><br><span class="line">    captcha = CaptchaField()</span><br></pre></td></tr></table></figure><p>users/views.py</p><h4 id="在我们的registerform中实例化并传送到前端"><a href="#在我们的registerform中实例化并传送到前端" class="headerlink" title="在我们的registerform中实例化并传送到前端:"></a>在我们的registerform中实例化并传送到前端:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># form表单验证 &amp; 验证码</span><br><span class="line">from .forms import LoginForm, RegisterForm</span><br><span class="line"></span><br><span class="line"># 注册功能的view</span><br><span class="line">class RegisterView(View):</span><br><span class="line">    # get方法直接返回页面</span><br><span class="line">    def get(self, request):</span><br><span class="line">        # 添加验证码</span><br><span class="line">        register_form = RegisterForm()</span><br><span class="line">        return render(request, &quot;register.html&quot;, &#123;&apos;register_form&apos;:register_form&#125;)</span><br></pre></td></tr></table></figure><h4 id="前端获取验证码值"><a href="#前端获取验证码值" class="headerlink" title="前端获取验证码值"></a>前端获取验证码值</h4><p><img src="http://myphoto.mtianyan.cn/blog/180110/d55glDI9E1.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180110/DL7ejk8EcF.png?imageslim" alt="mark"></p><p>找到上图验证码部分。修改为下图</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/01gC20eabk.png?imageslim" alt="mark"></p><p>Forms中的field会生成不同的框。</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/ChgL88Ed76.png?imageslim" alt="mark"></p><p>我们只有label但是前端可以查看到input框等，也就是Registerform会为我们生成输入框+验证码。</p><blockquote><p>隐藏的字符串的框会被带到后台，由Django为我们进行验证。验证该验证码是否保存过。</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180110/547cdji7Gl.png?imageslim" alt="mark"></p><blockquote><p>可以看得我们数据库中将这个hashkey进行了保存。这个key与验证码内容对应。</p></blockquote><p>后台会把验证码值 和 hashkey进行联合查询。</p><h3 id="编写register-view的后台逻辑-RegisterView"><a href="#编写register-view的后台逻辑-RegisterView" class="headerlink" title="编写register view的后台逻辑(RegisterView)"></a>编写register view的后台逻辑(RegisterView)</h3><p>users/views.py的RegisterView中添加post方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def post(self, request):</span><br><span class="line">    # 实例化form</span><br><span class="line">    register_form = RegisterForm(request.POST)</span><br><span class="line">    if register_form.is_valid():</span><br><span class="line">        pass</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180110/BKIjc06AF3.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180110/bA0KEd7bhc.png?imageslim" alt="mark"></p><p>修改form表单提交方式与提交到哪个url</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/ahg7KfbCAi.png?imageslim" alt="mark"></p><p>前端的form提交加上对应的crsf token</p><p>刷新验证码是前端帮我们完成的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//刷新验证码</span><br><span class="line">function refresh_captcha(event)&#123;</span><br><span class="line">    $.get(&quot;/captcha/refresh/?&quot;+Math.random(), function(result)&#123;</span><br><span class="line">        $(&apos;#&apos;+event.data.form_id+&apos; .captcha&apos;).attr(&quot;src&quot;,result.image_url);</span><br><span class="line">        $(&apos;#id_captcha_0&apos;).attr(&quot;value&quot;,result.key);</span><br><span class="line">    &#125;);</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取前端页面值并封装成一个user-profile对象，保存到数据库。"><a href="#获取前端页面值并封装成一个user-profile对象，保存到数据库。" class="headerlink" title="获取前端页面值并封装成一个user_profile对象，保存到数据库。"></a>获取前端页面值并封装成一个user_profile对象，保存到数据库。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib.auth.hashers import make_password</span><br><span class="line"></span><br><span class="line">        if register_form.is_valid():</span><br><span class="line">            user_name = request.POST.get(&quot;email&quot;, &quot;&quot;)</span><br><span class="line">            pass_word = request.POST.get(&quot;password&quot;, &quot;&quot;)</span><br><span class="line"></span><br><span class="line">            # 实例化一个user_profile对象，将前台值存入</span><br><span class="line">            user_profile = UserProfile()</span><br><span class="line">            user_profile.username = user_name</span><br><span class="line">            user_profile.email = user_name</span><br><span class="line"></span><br><span class="line">            # 加密password进行保存</span><br><span class="line">            user_profile.password = make_password(pass_word)</span><br><span class="line">            user_profile.save()</span><br><span class="line">            pass</span><br></pre></td></tr></table></figure><h4 id="发送邮件实现"><a href="#发送邮件实现" class="headerlink" title="发送邮件实现"></a>发送邮件实现</h4><p>setting中配置；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 发送邮件的setting设置</span></span><br><span class="line"></span><br><span class="line">EMAIL_HOST = <span class="string">"smtp.qq.com"</span></span><br><span class="line">EMAIL_PORT = <span class="number">25</span></span><br><span class="line">EMAIL_HOST_USER = <span class="string">"mxonline.mtianyan.cn"</span></span><br><span class="line">EMAIL_HOST_PASSWORD = <span class="string">" "</span></span><br><span class="line">EMAIL_USE_TLS= <span class="keyword">True</span></span><br><span class="line">EMAIL_FROM = <span class="string">"mxonline.mtianyan.cn"</span></span><br></pre></td></tr></table></figure><p>新建package后新建文件。</p><p><code>apps：utils/email_send.py</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> Random</span><br><span class="line"></span><br><span class="line">__author__ = <span class="string">'mtianyan'</span></span><br><span class="line">__date__ = <span class="string">'2018/1/10 0010 20:47'</span></span><br><span class="line"><span class="keyword">from</span>  users.models <span class="keyword">import</span> EmailVerifyRecord</span><br><span class="line"><span class="comment"># 导入Django自带的邮件模块</span></span><br><span class="line"><span class="keyword">from</span> django.core.mail <span class="keyword">import</span> send_mail</span><br><span class="line"><span class="comment"># 导入setting中发送邮件的配置</span></span><br><span class="line"><span class="keyword">from</span> Mxonline2.settings <span class="keyword">import</span> EMAIL_FROM</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成随机字符串</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_str</span><span class="params">(random_length=<span class="number">8</span>)</span>:</span></span><br><span class="line">    str = <span class="string">''</span></span><br><span class="line">    <span class="comment"># 生成字符串的可选字符串</span></span><br><span class="line">    chars = <span class="string">'AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz0123456789'</span></span><br><span class="line">    length = len(chars) - <span class="number">1</span></span><br><span class="line">    random = Random()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(random_length):</span><br><span class="line">        str += chars[random.randint(<span class="number">0</span>, length)]</span><br><span class="line">    <span class="keyword">return</span> str</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送注册邮件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_register_eamil</span><span class="params">(email, send_type=<span class="string">"register"</span>)</span>:</span></span><br><span class="line">    <span class="comment"># 发送之前先保存到数据库，到时候查询链接是否存在</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 实例化一个EmailVerifyRecord对象</span></span><br><span class="line">    email_record = EmailVerifyRecord()</span><br><span class="line">    <span class="comment"># 生成随机的code放入链接</span></span><br><span class="line">    code = random_str(<span class="number">16</span>)</span><br><span class="line">    email_record.code = code</span><br><span class="line">    email_record.email = email</span><br><span class="line">    email_record.send_type = send_type</span><br><span class="line"></span><br><span class="line">    email_record.save()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义邮件内容:</span></span><br><span class="line">    email_title = <span class="string">""</span></span><br><span class="line">    email_body = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> send_type == <span class="string">"register"</span>:</span><br><span class="line">        email_title = <span class="string">"mtianyan慕课小站 注册激活链接"</span></span><br><span class="line">        email_body = <span class="string">"请点击下面的链接激活你的账号: http://127.0.0.1:8000/active/&#123;0&#125;"</span>.format(code)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 使用Django内置函数完成邮件发送。四个参数：主题，邮件内容，从哪里发，接受者list</span></span><br><span class="line">        send_status = send_mail(email_title, email_body, EMAIL_FROM, [email])</span><br><span class="line">        <span class="comment"># 如果发送成功</span></span><br><span class="line">        <span class="keyword">if</span> send_status:</span><br><span class="line">            <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180110/8leIJ2l6LD.png?imageslim" alt="mark"></p><p>上图为qq邮箱开启smtp服务</p><p>点击生成授权码</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/6fDDI979Dk.png?imageslim" alt="mark"></p><p>def post中加上发送邮件</p><p><code>users/views.py</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 发送邮件</span><br><span class="line">from utils.email_send import send_register_eamil</span><br><span class="line">            # 发送注册激活邮件</span><br><span class="line">            send_register_eamil(user_name, &quot;register&quot;)</span><br></pre></td></tr></table></figure><p>点击注册提交，因为我们没有return。一直在转圈圈。</p><p>但是数据库中已经添加了字段。</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/FL04F47985.png?imageslim" alt="mark"></p><p>可以看到我们的邮件已经被发送到邮箱中。</p><p>如果注册成功返回login页面:不成功，返回register页面并报错。</p><h4 id="完善错误提示。"><a href="#完善错误提示。" class="headerlink" title="完善错误提示。"></a>完善错误提示。</h4><blockquote><p>找猫画虎：将login中的错误提示搬运到register中来。</p></blockquote><ul><li>register_form的报错信息。</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180110/gmDlEB0L2G.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180110/e7a65cgj8D.png?imageslim" alt="mark"></p><ul><li>邮箱 &amp; 密码 form验证</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180110/ElHe2gdDAL.png?imageslim" alt="mark"></p><h4 id="完善用户值回填逻辑"><a href="#完善用户值回填逻辑" class="headerlink" title="完善用户值回填逻辑"></a>完善用户值回填逻辑</h4><p><img src="http://myphoto.mtianyan.cn/blog/180110/DGHbaLBkd3.png?imageslim" alt="mark"></p><p>如果传回的有值则，显示传回来值。</p><p>密码也做同样操作</p><h4 id="修改默认的激活状态为false"><a href="#修改默认的激活状态为false" class="headerlink" title="修改默认的激活状态为false"></a>修改默认的激活状态为false</h4><p>post方法中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 默认激活状态为false</span><br><span class="line">user_profile.is_active = False</span><br></pre></td></tr></table></figure><p>书写处理激活的view。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 激活用户的view</span><br><span class="line">class ActiveUserView(View):</span><br><span class="line">    def get(self, request, active_code):</span><br><span class="line">        # 查询邮箱验证记录是否存在</span><br><span class="line">        all_record = EmailVerifyRecord.objects.filter(code = active_code)</span><br><span class="line">        # 激活form负责给激活跳转进来的人加验证码</span><br><span class="line">        active_form = ActiveForm(request.GET)</span><br><span class="line">        # 如果不为空也就是有用户</span><br><span class="line">        if all_record:</span><br><span class="line">            for record in all_record:</span><br><span class="line">                # 获取到对应的邮箱</span><br><span class="line">                email = record.email</span><br><span class="line">                # 查找到邮箱对应的user</span><br><span class="line">                user = UserProfile.objects.get(email=email)</span><br><span class="line">                user.is_active = True</span><br><span class="line">                user.save()</span><br><span class="line">                # 激活成功跳转到登录页面</span><br><span class="line">                return render(request, &quot;login.html&quot;, )</span><br><span class="line">        # 自己瞎输的验证码</span><br><span class="line">        else:</span><br><span class="line">            return render(request, &quot;register.html&quot;, &#123;&quot;msg&quot;: &quot;您的激活链接无效&quot;,&quot;active_form&quot;: active_form&#125;)</span><br></pre></td></tr></table></figure><p>配置用户激活的url并通过url提取到变量:</p><p>django1.9.8:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 激活用户url</span><br><span class="line">url(r&apos;^active/(?P&lt;active_code&gt;.*)/$&apos;,ActiveUserView.as_view(), name= &quot;user_active&quot;)</span><br></pre></td></tr></table></figure><p>django2.0.1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 激活用户url</span><br><span class="line">re_path(&apos;active/(?P&lt;active_code&gt;.*)/&apos;, ActiveUserView.as_view(), name= &quot;user_active&quot;)</span><br></pre></td></tr></table></figure><p>这里通过<code>?p</code>将后面<code>.*</code>代表全部提取的正则，符合的内容传入参数active_code中<code>/$</code>代表以<code>/$</code>为结尾</p><p><img src="http://myphoto.mtianyan.cn/blog/180111/i7DdIaB5bd.png?imageslim" alt="mark"></p><blockquote><p>其他细节根据自己需要进行优化。</p></blockquote><p>注册功能制作完毕。对应commit:</p><blockquote><p>注册功能实现完毕，流程:注册，发邮件，激活，登录。对应6-6,7,8,9,10</p></blockquote><h2 id="6-8-找回密码"><a href="#6-8-找回密码" class="headerlink" title="6-8 找回密码"></a>6-8 找回密码</h2><blockquote><p>这个6-8对应对应6-11,6-12</p></blockquote><h3 id="拷入forgetpassword页面"><a href="#拷入forgetpassword页面" class="headerlink" title="拷入forgetpassword页面"></a>拷入forgetpassword页面</h3><h3 id="书写处理忘记密码的view"><a href="#书写处理忘记密码的view" class="headerlink" title="书写处理忘记密码的view"></a>书写处理忘记密码的view</h3><p>users/views.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用户忘记密码的处理view</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ForgetPwdView</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="comment"># get方法直接返回页面</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">"forgetpwd.html"</span>, &#123; &#125;)</span><br></pre></td></tr></table></figure><p>django2.0.1 urls中配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 忘记密码</span><br><span class="line">path(&apos;forget/&apos;, ForgetPwdView.as_view(), name= &quot;forget_pwd&quot;),</span><br></pre></td></tr></table></figure><p>Django1.9.8 urls中配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 忘记密码</span><br><span class="line">url(&apos;forget/$&apos;, ForgetPwdView.as_view(), name=&quot;forget_pwd&quot;),</span><br></pre></td></tr></table></figure><h4 id="login-html中忘记密码"><a href="#login-html中忘记密码" class="headerlink" title="login html中忘记密码"></a>login html中忘记密码</h4><p><img src="http://myphoto.mtianyan.cn/blog/180111/cgk66mgd35.png?imageslim" alt="mark"></p><h4 id="配置忘记密码页面中静态文件。"><a href="#配置忘记密码页面中静态文件。" class="headerlink" title="配置忘记密码页面中静态文件。"></a>配置忘记密码页面中静态文件。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">load static</span><br><span class="line">修改static的目录</span><br><span class="line">修改其中的url</span><br></pre></td></tr></table></figure><h4 id="定义一个给forget的form"><a href="#定义一个给forget的form" class="headerlink" title="定义一个给forget的form"></a>定义一个给forget的form</h4><p>users/forms.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注册验证码实现</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ForgetForm</span><span class="params">(forms.Form)</span>:</span></span><br><span class="line">    <span class="comment"># 此处email与前端name需保持一致。</span></span><br><span class="line">    email = forms.EmailField(required=<span class="keyword">True</span>)</span><br><span class="line">    <span class="comment"># 应用验证码 自定义错误输出key必须与异常一样</span></span><br><span class="line">    captcha = CaptchaField(error_messages=&#123;<span class="string">"invalid"</span>: <span class="string">u"验证码错误"</span>&#125;)</span><br></pre></td></tr></table></figure><h4 id="添加验证码"><a href="#添加验证码" class="headerlink" title="添加验证码"></a>添加验证码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 用户忘记密码的处理view</span><br><span class="line">class ForgetPwdView(View):</span><br><span class="line">    # get方法直接返回页面</span><br><span class="line">    def get(self, request):</span><br><span class="line">        forget_from = ForgetForm()</span><br><span class="line">        return render(request, &quot;forgetpwd.html&quot;, &#123;&quot;forget_from&quot;:forget_from &#125;)</span><br></pre></td></tr></table></figure><h4 id="html中加上验证码"><a href="#html中加上验证码" class="headerlink" title="html中加上验证码"></a>html中加上验证码</h4><p><img src="http://myphoto.mtianyan.cn/blog/180111/Cf24GA16g0.png?imageslim" alt="mark"></p><h4 id="post中逻辑"><a href="#post中逻辑" class="headerlink" title="post中逻辑"></a>post中逻辑</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># post方法实现</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span><br><span class="line">    forget_form = ForgetForm(request.POST)</span><br><span class="line">    <span class="comment"># form验证合法情况下取出email</span></span><br><span class="line">    <span class="keyword">if</span> forget_form.is_valid():</span><br><span class="line">        email = request.POST.get(<span class="string">"email"</span>,<span class="string">""</span>)</span><br><span class="line">        <span class="comment"># 发送找回密码邮件</span></span><br><span class="line">        send_register_eamil(email, <span class="string">"forget"</span>)</span><br><span class="line">        <span class="comment"># 发送完毕返回登录页面并显示发送邮件成功。</span></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">"login.html"</span>, &#123;<span class="string">"msg"</span>:<span class="string">"重置密码邮件已发送,请注意查收"</span>&#125;)</span><br><span class="line">    <span class="comment"># 如果表单验证失败也就是他验证码输错等。</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">"forgetpwd.html"</span>, &#123;<span class="string">"forget_from"</span>: forget_form &#125;)</span><br></pre></td></tr></table></figure><h4 id="邮箱重置密码邮件发送"><a href="#邮箱重置密码邮件发送" class="headerlink" title="邮箱重置密码邮件发送"></a>邮箱重置密码邮件发送</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">elif send_type == &quot;forget&quot;:</span><br><span class="line">       email_title = &quot;mtianyan慕课小站 找回密码链接&quot;</span><br><span class="line">       email_body = loader.render_to_string(</span><br><span class="line">           &quot;email_forget.html&quot;,  # 需要渲染的html模板</span><br><span class="line">           &#123;</span><br><span class="line">               &quot;active_code&quot;: code  # 参数</span><br><span class="line">           &#125;</span><br><span class="line">       )</span><br><span class="line">       msg = EmailMessage(email_title, email_body, EMAIL_FROM, [email])</span><br><span class="line">       msg.content_subtype = &quot;html&quot;</span><br><span class="line">       send_status = msg.send()</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180111/4e60888a7F.png?imageslim" alt="mark"></p><h4 id="前端页面添加错误信息"><a href="#前端页面添加错误信息" class="headerlink" title="前端页面添加错误信息"></a>前端页面添加错误信息</h4><p>已经重复很多遍这个操作了。</p><p><img src="http://myphoto.mtianyan.cn/blog/180111/fl8Dhg5B2H.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180111/KEmkdk9c3b.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180111/FI5fafG9a8.png?imageslim" alt="mark"></p><blockquote><p>上述三图进行改正，不一一列举</p></blockquote><h4 id="书写重置密码view"><a href="#书写重置密码view" class="headerlink" title="书写重置密码view"></a>书写重置密码view</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重置密码的view</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResetView</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, active_code)</span>:</span></span><br><span class="line">        <span class="comment"># 查询邮箱验证记录是否存在</span></span><br><span class="line">        all_record = EmailVerifyRecord.objects.filter(code=active_code)</span><br><span class="line">        <span class="comment"># 如果不为空也就是有用户</span></span><br><span class="line">        active_form = ActiveForm(request.GET)</span><br><span class="line">        <span class="keyword">if</span> all_record:</span><br><span class="line">            <span class="keyword">for</span> record <span class="keyword">in</span> all_record:</span><br><span class="line">                <span class="comment"># 获取到对应的邮箱</span></span><br><span class="line">                email = record.email</span><br><span class="line">                <span class="comment"># 将email传回来</span></span><br><span class="line">                <span class="keyword">return</span> render(request, <span class="string">"password_reset.html"</span>, &#123;<span class="string">"email"</span>:email&#125;)</span><br><span class="line">        <span class="comment"># 自己瞎输的验证码</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> render(</span><br><span class="line">                request, <span class="string">"forgetpwd.html"</span>, &#123;</span><br><span class="line">                    <span class="string">"msg"</span>: <span class="string">"您的重置密码链接无效,请重新请求"</span>, <span class="string">"active_form"</span>: active_form&#125;)</span><br></pre></td></tr></table></figure><h4 id="配置重置密码url"><a href="#配置重置密码url" class="headerlink" title="配置重置密码url"></a>配置重置密码url</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Django1.9.8:</span></span><br><span class="line">    <span class="comment"># 重置密码urlc ：用来接收来自邮箱的重置链接</span></span><br><span class="line">    url(<span class="string">'reset/(?P&lt;active_code&gt;.*)/$'</span>, ResetView.as_view(), name=<span class="string">"reset_pwd"</span>),</span><br><span class="line"><span class="comment"># django2.0.1:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重置密码urlc ：用来接收来自邮箱的重置链接</span></span><br><span class="line">    re_path(<span class="string">'reset/(?P&lt;active_code&gt;.*)/'</span>, ResetView.as_view(), name=<span class="string">"reset_pwd"</span>),</span><br></pre></td></tr></table></figure><h4 id="拷贝进来password-reset页面"><a href="#拷贝进来password-reset页面" class="headerlink" title="拷贝进来password reset页面"></a>拷贝进来password reset页面</h4><p><img src="http://myphoto.mtianyan.cn/blog/180111/LFKlj0CLAb.png?imageslim" alt="mark"></p><blockquote><p>添加一个隐藏的input框，以便于我们知道到底是哪个用户在重置密码</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180111/BfaLgiG5k3.png?imageslim" alt="mark"></p><p>配置html中三大变化加url配置。</p><p><img src="http://myphoto.mtianyan.cn/blog/180111/AiiGBEkJLj.png?imageslim" alt="mark"></p><p><code>reset</code>的<code>url</code>需要我们传参进来,但是<code>modify</code>的不需要。<br>所以url配置和view都得分开。</p><h4 id="创建改变密码的forms"><a href="#创建改变密码的forms" class="headerlink" title="创建改变密码的forms:"></a>创建改变密码的forms:</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重置密码form实现</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModifyPwdForm</span><span class="params">(forms.Form)</span>:</span></span><br><span class="line">    <span class="comment"># 密码不能小于5位</span></span><br><span class="line">    password1 = forms.CharField(required=<span class="keyword">True</span>, min_length=<span class="number">5</span>)</span><br><span class="line">    <span class="comment"># 密码不能小于5位</span></span><br><span class="line">    password2 = forms.CharField(required=<span class="keyword">True</span>, min_length=<span class="number">5</span>)</span><br></pre></td></tr></table></figure><h4 id="书写改变密码的view；"><a href="#书写改变密码的view；" class="headerlink" title="书写改变密码的view；"></a>书写改变密码的view；</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># 改变密码的view</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModifyPwdView</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        modiypwd_form = ModifyPwdForm(request.POST)</span><br><span class="line">        <span class="keyword">if</span> modiypwd_form.is_valid():</span><br><span class="line">            pwd1 = request.POST.get(<span class="string">"password1"</span>, <span class="string">""</span>)</span><br><span class="line">            pwd2 = request.POST.get(<span class="string">"password2"</span>, <span class="string">""</span>)</span><br><span class="line">            email = request.POST.get(<span class="string">"email"</span>, <span class="string">""</span>)</span><br><span class="line">            <span class="comment"># 如果两次密码不相等，返回错误信息</span></span><br><span class="line">            <span class="keyword">if</span> pwd1 != pwd2:</span><br><span class="line">                <span class="keyword">return</span> render(request, <span class="string">"password_reset.html"</span>, &#123;<span class="string">"email"</span>: email, <span class="string">"msg"</span>: <span class="string">"密码不一致"</span>&#125;)</span><br><span class="line">            <span class="comment"># 如果密码一致</span></span><br><span class="line">            user = UserProfile.objects.get(email=email)</span><br><span class="line">            <span class="comment"># 加密成密文</span></span><br><span class="line">            user.password = make_password(pwd2)</span><br><span class="line">            <span class="comment"># save保存到数据库</span></span><br><span class="line">            user.save()</span><br><span class="line">            <span class="keyword">return</span> render(request, <span class="string">"login.html"</span>, &#123;<span class="string">"msg"</span>: <span class="string">"密码修改成功，请登录"</span>&#125;)</span><br><span class="line">        <span class="comment"># 验证失败说明密码位数不够。</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            email = request.POST.get(<span class="string">"email"</span>, <span class="string">""</span>)</span><br><span class="line">            <span class="keyword">return</span> render(request, <span class="string">"password_reset.html"</span>, &#123;<span class="string">"email"</span>: email, <span class="string">"modiypwd_form"</span>:modiypwd_form&#125;)</span><br></pre></td></tr></table></figure><h4 id="配置modify的url。"><a href="#配置modify的url。" class="headerlink" title="配置modify的url。"></a>配置modify的url。</h4><p>django2.0.1:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改密码url; 用于passwordreset页面提交表单</span></span><br><span class="line">path(<span class="string">'modify_pwd/'</span>, ModifyPwdView.as_view(), name=<span class="string">"modify_pwd"</span>),</span><br></pre></td></tr></table></figure><p>django1.9.8:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改密码url; 用于passwordreset页面提交表单</span></span><br><span class="line">url(<span class="string">r'^modify_pwd/$'</span>, ModifyPwdView.as_view(), name=<span class="string">"modify_pwd"</span>),</span><br></pre></td></tr></table></figure><p>建议自行走一遍注册，登录，忘记密码。重置密码。<br>错误的激活链接，错误的重置链接。值回填，form报错</p><p>更多: 重置密码链接是否被点击过，过期时间。</p><blockquote><p>对应commit忘记密码重置功能实现完毕，并进行了必要的测试。对应6-11,6-12</p></blockquote><blockquote class="blockquote-center"><p>在绝望中寻找希望，人生终将辉煌 - 新东方 </p></blockquote><div class="note default"><p>作为一个正经的教育网站，我们更是拥有正规的机构合作: 比如来自火星的星星优培。</p><ul><li>完成授课机构的功能实现。</li></ul></div><h1 id="完成授课机构的功能实现。"><a href="#完成授课机构的功能实现。" class="headerlink" title="完成授课机构的功能实现。"></a>完成授课机构的功能实现。</h1><h2 id="7-1-django-templates模板继承1"><a href="#7-1-django-templates模板继承1" class="headerlink" title="7-1 django templates模板继承1"></a>7-1 django templates模板继承1</h2><ul><li>机构可以筛选类别</li><li>机构可以根据所在地区进行分类</li></ul><p>右侧我要学习功能: form表单提交<br>右下：授课机构排名</p><p>页面头部与底部为全局头和全局底部。</p><h3 id="Django-template-共用头部底部机制"><a href="#Django-template-共用头部底部机制" class="headerlink" title="Django template 共用头部底部机制"></a>Django template 共用头部底部机制</h3><p>将head和foot放在两个html中，然后在写其他需要这两个部分的页面时include进来。</p><p>Django也是支持include机制的。</p><h3 id="include的问题"><a href="#include的问题" class="headerlink" title="include的问题"></a>include的问题</h3><p>include的进来的死页面，这时候该怎么办？</p><p>解决这种问题：进行模板的继承机制。定义一个父类的框架，子类可以替换其中一部分block，子类只需要重写自己需要改变的block。</p><h3 id="template中新建base-html"><a href="#template中新建base-html" class="headerlink" title="template中新建base.html"></a>template中新建base.html</h3><p>将课程机构列表页。orglist拷贝进template目录</p><p>将orglist内容替换base内容。</p><p><img src="http://myphoto.mtianyan.cn/blog/180111/Idbj8d04h5.png?imageslim" alt="mark"></p><p>将div收起来</p><p><img src="http://myphoto.mtianyan.cn/blog/180111/4gb7aiICk7.png?imageslim" alt="mark"></p><p>loadstaticfiles &amp; 修改静态文件路径为static</p><blockquote><p>这个步骤做过太多遍了，自行完成。耐心就行了。</p></blockquote><h3 id="定义父模板-包含head-amp-footer"><a href="#定义父模板-包含head-amp-footer" class="headerlink" title="定义父模板: 包含head &amp; footer"></a>定义父模板: 包含head &amp; footer</h3><p>title应该是可以被子页面替换的所以要包起来。</p><p><img src="http://myphoto.mtianyan.cn/blog/180111/3e96fGcGma.png?imageslim" alt="mark"></p><p>css有共用的部分，也有可以被子页面替换的部分。</p><p><img src="http://myphoto.mtianyan.cn/blog/180111/14mBAlhH8D.png?imageslim" alt="mark"></p><p>js同理</p><p><img src="http://myphoto.mtianyan.cn/blog/180111/bBjf5DBLh2.png?imageslim" alt="mark"></p><p>面包屑是需要被各个页面自己替换的。</p><p><img src="http://myphoto.mtianyan.cn/blog/180111/IekmEbK9A8.png?imageslim" alt="mark"></p><p>将正文内容包起来；</p><p><img src="http://myphoto.mtianyan.cn/blog/180111/hbhi9lBah2.png?imageslim" alt="mark"></p><p>此时base页面就制作好了</p><h2 id="7-2-开始orglist编写"><a href="#7-2-开始orglist编写" class="headerlink" title="7-2 开始orglist编写"></a>7-2 开始orglist编写</h2><p>第一步:清空所有内容</p><ul><li>继承base页面</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180111/9AL06C2hjh.png?imageslim" alt="mark"></p><ul><li>覆盖父类的title</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180111/BL8G2CkmGl.png?imageslim" alt="mark"></p><ul><li>书写课程机构view<br>organization/views.py</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># encoding: utf-8</span><br><span class="line">from django.views.generic.base import View</span><br><span class="line"># 处理课程机构列表的view</span><br><span class="line">class OrgView(View):</span><br><span class="line">    def get(self,request):</span><br><span class="line">        return render(request, &quot;org-list.html&quot;, &#123; &#125;)</span><br></pre></td></tr></table></figure><ul><li>Django2.0.1配置课程机构首页url</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 课程机构首页url</span><br><span class="line">path(&apos;org_list/&apos;, OrgView.as_view(), name=&quot;org_list&quot;),</span><br></pre></td></tr></table></figure><ul><li>Django1.9.8配置url：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 课程机构首页url</span><br><span class="line">url(r&apos;^org_list/$&apos;, OrgView.as_view(), name=&quot;org_list&quot;),</span><br></pre></td></tr></table></figure><h3 id="修改面包屑"><a href="#修改面包屑" class="headerlink" title="修改面包屑"></a>修改面包屑</h3><ul><li>base中只保留首页</li><li>org中重写block custom_bread</li><li><p>block之间没有先后顺序。</p></li><li><p>将base中block content拿到orglist重写</p></li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180111/emCCcfGcEd.png?imageslim" alt="mark"></p><ul><li>然后将base中block中间section删除掉</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180111/7KKbaGb97i.png?imageslim" alt="mark"></p><blockquote><p>orglist开始loadstaticfiles</p></blockquote><p><code>ctrl+d</code>快速删除</p><p><img src="http://myphoto.mtianyan.cn/blog/180111/D5hBDAjHeA.png?imageslim" alt="mark"></p><p>页面的继承关系使得变量也可以直接用</p><blockquote><p>比如user中的form数据传递到register文件当中.如果register继承的是base页面。<br>base页面当中也是可以用这些数据的。<code>参数的向上传递</code></p></blockquote><p>每个request对象都会传递到html中来，如果继承了base，request也会向上传递到base。<br>base中就可以加入我们的逻辑: 用户是否登录等。</p><p>小节结束对应commit:</p><blockquote><p>完成Django templates的继承关系了解，机构列表展示页。对应7-1 &amp; 2</p></blockquote><h2 id="7-3-课程机构列表页数据展示1"><a href="#7-3-课程机构列表页数据展示1" class="headerlink" title="7-3 课程机构列表页数据展示1"></a>7-3 课程机构列表页数据展示1</h2><p>确定由后台传过来的动态数据:</p><p>授课机构列表本身， 授课机构的排名，所在地区(后台取出所有地区), 机构类别写成静态，因为一般不怎么变动。</p><p>在xadmin中添加城市信息，课程信息。</p><p>添加城市</p><p><img src="http://myphoto.mtianyan.cn/blog/180111/CJG79b8JJ5.png?imageslim" alt="mark"></p><p>添加机构。</p><p>插播知识点：</p><p><img src="http://myphoto.mtianyan.cn/blog/180111/325Id7l954.png?imageslim" alt="mark"></p><p>这里指定的路径是一个相对路径</p><p>setting中要配置我们把文件存放在哪个根目录之下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 设置我们上传文件的路径</span><br><span class="line"></span><br><span class="line">MEDIA_URL = &apos;/media/&apos;</span><br><span class="line">MEDIA_ROOT = os.path.join(BASE_DIR, &apos;media&apos;)</span><br></pre></td></tr></table></figure><p>在项目根目录创建media文件夹</p><p>在后台上传图片</p><p><img src="http://myphoto.mtianyan.cn/blog/180111/EG198BJgi3.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180111/I4A16CDal5.png?imageslim" alt="mark"></p><p>修改机构信息中封面图为logo</p><p>自行添加十个课程机构</p><h3 id="models中添加机构类别"><a href="#models中添加机构类别" class="headerlink" title="models中添加机构类别"></a>models中添加机构类别</h3><p>organization/models.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CourseOrg</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    ORG_CHOICES =(</span><br><span class="line">        (<span class="string">"pxjg"</span>, <span class="string">u"培训机构"</span>),</span><br><span class="line">        (<span class="string">"gx"</span>, <span class="string">u"高校"</span>),</span><br><span class="line">        (<span class="string">"gr"</span>, <span class="string">u"个人"</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    name = models.CharField(max_length=<span class="number">50</span>, verbose_name=<span class="string">u"机构名称"</span>)</span><br><span class="line">    <span class="comment"># 机构描述，后面会替换为富文本展示</span></span><br><span class="line">    desc = models.TextField(verbose_name=<span class="string">u"机构描述"</span>)</span><br><span class="line">    <span class="comment"># 机构类别:</span></span><br><span class="line">    category = models.CharField(max_length=<span class="number">20</span>, choices=ORG_CHOICES, verbose_name=<span class="string">u"机构类别"</span>, default=<span class="string">"pxjg"</span>)</span><br></pre></td></tr></table></figure><p>修改了models之后做数据库的变动:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">makemigrations organization</span><br><span class="line">migrate organization</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180111/lFLGKIH5fE.png?imageslim" alt="mark"></p><p>完成之后打开Navicat进行验证：</p><p><img src="http://myphoto.mtianyan.cn/blog/180111/C6B1Hb7LKD.png?imageslim" alt="mark"></p><p>可以看到新增了。</p><h3 id="完善我们的view"><a href="#完善我们的view" class="headerlink" title="完善我们的view"></a>完善我们的view</h3><p>将列表里的静态数据变成后台获取的动态数据</p><p>organization/views.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> CourseOrg, CityDict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrgView</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="comment"># 查找到所有的课程机构</span></span><br><span class="line">        all_orgs = CourseOrg.objects.all()</span><br><span class="line">        <span class="comment"># 取出所有的城市</span></span><br><span class="line">        all_citys = CityDict.objects.all()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">"org-list.html"</span>, &#123;</span><br><span class="line">            <span class="string">"all_orgs"</span>:all_orgs,</span><br><span class="line">            <span class="string">"all_citys"</span>: all_citys,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><h2 id="7-4-课程机构列表页数据展示2"><a href="#7-4-课程机构列表页数据展示2" class="headerlink" title="7-4 课程机构列表页数据展示2"></a>7-4 课程机构列表页数据展示2</h2><h3 id="前去html中进行数据填充"><a href="#前去html中进行数据填充" class="headerlink" title="前去html中进行数据填充"></a>前去html中进行数据填充</h3><p><img src="http://myphoto.mtianyan.cn/blog/180111/amEhg6kFbf.png?imageslim" alt="mark"></p><blockquote><p>可以看到所有城市是通过a标签，当前选中城市为active。</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180111/LcIB9jeKem.png?imageslim" alt="mark"></p><p>之后把下面的写死的城市删除掉。</p><p><img src="http://myphoto.mtianyan.cn/blog/180111/hg5g6Cc7f0.png?imageslim" alt="mark"></p><p>这时就是我们在后台添加的数据了</p><p><img src="http://myphoto.mtianyan.cn/blog/180111/8D6a8Dl3h3.png?imageslim" alt="mark"></p><p>可以看到每个课程机构都是一个dl</p><p>同理使用for循环。</p><h3 id="如何将imageField转换为图片地址"><a href="#如何将imageField转换为图片地址" class="headerlink" title="如何将imageField转换为图片地址"></a>如何将imageField转换为图片地址</h3><p>数据库中img存放的是字符串：相对路径</p><p><img src="http://myphoto.mtianyan.cn/blog/180111/k1DG3bflLH.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180111/L7d5cE3D7h.png?imageslim" alt="mark"></p><p>上图这种取法会取出一个相对地址。</p><p><img src="http://myphoto.mtianyan.cn/blog/180111/6ejHjBFb9c.png?imageslim" alt="mark"></p><p>将setting中配置的mediaurl放在前面可以补全地址。</p><h3 id="设置media处理器"><a href="#设置media处理器" class="headerlink" title="设置media处理器"></a>设置media处理器</h3><p><img src="http://myphoto.mtianyan.cn/blog/180111/H0Gjeci29F.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180111/E18ecbCEEI.png?imageslim" alt="mark"></p><blockquote><p>注册之后，mediaurl将可以在html中使用</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180111/c2kA33KE9E.png?imageslim" alt="mark"></p><p>图片还是没有显示。因为url中没有处理图片相应路径的url</p><p>Django1.9.8 urls.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.static <span class="keyword">import</span> serve</span><br><span class="line">    <span class="comment"># 处理图片显示的url,使用Django自带serve,传入参数告诉它去哪个路径找，我们有配置好的路径MEDIAROOT</span></span><br><span class="line">    url(<span class="string">r'^media/(?P&lt;path&gt;.*)$'</span>, serve, &#123;<span class="string">"document_root"</span>: MEDIA_ROOT &#125;)</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180111/cKmHj6E9gi.png?imageslim" alt="mark"></p><p>Django2.0.1 urls.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.static <span class="keyword">import</span> serve</span><br><span class="line"><span class="comment"># 处理图片显示的url,使用Django自带serve,传入参数告诉它去哪个路径找，我们有配置好的路径MEDIAROOT</span></span><br><span class="line">    re_path(<span class="string">r'^media/(?P&lt;path&gt;.*)'</span>, serve, &#123;<span class="string">"document_root"</span>: MEDIA_ROOT &#125;)</span><br></pre></td></tr></table></figure><h3 id="完善xadmin的adminx为机构添加分类索引字段"><a href="#完善xadmin的adminx为机构添加分类索引字段" class="headerlink" title="完善xadmin的adminx为机构添加分类索引字段"></a>完善xadmin的adminx为机构添加分类索引字段</h3><p>organization/adminx.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 机构课程信息管理器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CourseOrgAdmin</span><span class="params">(object)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'name'</span>, <span class="string">'desc'</span>,<span class="string">'category'</span>, <span class="string">'click_nums'</span>, <span class="string">'fav_nums'</span>,<span class="string">'add_time'</span> ]</span><br><span class="line">    search_fields = [<span class="string">'name'</span>, <span class="string">'desc'</span>, <span class="string">'category'</span>,<span class="string">'click_nums'</span>, <span class="string">'fav_nums'</span>]</span><br><span class="line">    list_filter = [<span class="string">'name'</span>, <span class="string">'desc'</span>,<span class="string">'category'</span> ,<span class="string">'click_nums'</span>, <span class="string">'fav_nums'</span>,<span class="string">'city__name'</span>,<span class="string">'address'</span>,<span class="string">'add_time'</span>]</span><br></pre></td></tr></table></figure><h3 id="去除加载小圈圈"><a href="#去除加载小圈圈" class="headerlink" title="去除加载小圈圈"></a>去除加载小圈圈</h3><p>static/css/style.css中scrollLoading置为空:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.scrollLoading &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>完成后台数据添加，列表页数据展示。对应7-3&amp;7-4</p></blockquote><h2 id="7-5-列表分页功能"><a href="#7-5-列表分页功能" class="headerlink" title="7-5 列表分页功能"></a>7-5 列表分页功能</h2><p>github搜索django-pure-pagination</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django-pure-pagination</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180111/cA22hF4fi7.png?imageslim" alt="mark"></p><p>install app中添加:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'pure_pagination'</span>,</span><br></pre></td></tr></table></figure><p>可设置参数；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PAGINATION_SETTINGS = &#123;</span><br><span class="line">    &apos;PAGE_RANGE_DISPLAYED&apos;: 10,</span><br><span class="line">    &apos;MARGIN_PAGES_DISPLAYED&apos;: 2,</span><br><span class="line">    &apos;SHOW_FIRST_PAGE_WHEN_INVALID&apos;: True,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180111/8KAAL61KBk.png?imageslim" alt="mark"></p><p><code>PAGE_RANGE_DISPLAYED</code>是总共会显示多少个page。(包括省略号，包括两边和中间)<br><code>MARGIN_PAGES_DISPLAYED</code>是旁边会显示多少个。<br><code>SHOW_FIRST_PAGE_WHEN_INVALID</code>:当输入页数不合法是否要跳到第一页</p><p>官方实例；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render_to_response</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pure_pagination <span class="keyword">import</span> Paginator, EmptyPage, PageNotAnInteger</span><br><span class="line"></span><br><span class="line"><span class="comment"># 尝试获取页数参数</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        page = request.GET.get(<span class="string">'page'</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">except</span> PageNotAnInteger:</span><br><span class="line">        page = <span class="number">1</span></span><br><span class="line">    <span class="comment"># objects是取到的数据</span></span><br><span class="line">    objects = [<span class="string">'john'</span>, <span class="string">'edward'</span>, <span class="string">'josh'</span>, <span class="string">'frank'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Provide Paginator with the request object for complete querystring generation</span></span><br><span class="line">    <span class="comment"># 对于取到的数据进行分页处理。</span></span><br><span class="line">    p = Paginator(objects, request=request)</span><br><span class="line">    <span class="comment"># 此时前台显示的就应该是我们此时获取的第几页的数据</span></span><br><span class="line">    people = p.page(page)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_to_response(<span class="string">'index.html'</span>, &#123;</span><br><span class="line">        <span class="string">'people'</span>: people,</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们对照着的实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pure_pagination <span class="keyword">import</span> Paginator, EmptyPage, PageNotAnInteger</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrgView</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="comment"># 查找到所有的课程机构</span></span><br><span class="line">        all_orgs = CourseOrg.objects.all()</span><br><span class="line">        <span class="comment"># 总共有多少家机构使用count进行统计</span></span><br><span class="line">        org_nums = all_orgs.count()</span><br><span class="line">        <span class="comment"># 取出所有的城市</span></span><br><span class="line">        all_city = CityDict.objects.all()</span><br><span class="line">        <span class="comment"># 对课程机构进行分页</span></span><br><span class="line">        <span class="comment"># 尝试获取前台get请求传递过来的page参数</span></span><br><span class="line">        <span class="comment"># 如果是不合法的配置参数默认返回第一页</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            page = request.GET.get(<span class="string">'page'</span>, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">except</span> PageNotAnInteger:</span><br><span class="line">            page = <span class="number">1</span></span><br><span class="line">        <span class="comment"># 这里指从allorg中取五个出来，每页显示5个</span></span><br><span class="line">        p = Paginator(all_orgs, <span class="number">5</span>, request=request)</span><br><span class="line">        orgs = p.page(page)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">"org-list.html"</span>, &#123;</span><br><span class="line">            <span class="string">"all_orgs"</span>:orgs,</span><br><span class="line">            <span class="string">"all_city"</span>: all_city,</span><br><span class="line">            <span class="string">"org_nums"</span>: org_nums,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><h3 id="对于html中分页进行配置"><a href="#对于html中分页进行配置" class="headerlink" title="对于html中分页进行配置"></a>对于html中分页进行配置</h3><blockquote><p>不再是objects，而是objectlist</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180111/jadkKHKkbI.png?imageslim" alt="mark"></p><blockquote><p>使用默认的render<br><img src="http://myphoto.mtianyan.cn/blog/180111/fcae2A0E0c.png?imageslim" alt="mark"></p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180111/8gcmfdHb4J.png?imageslim" alt="mark"></p><h3 id="自定义html的样式"><a href="#自定义html的样式" class="headerlink" title="自定义html的样式"></a>自定义html的样式</h3><p><img src="http://myphoto.mtianyan.cn/blog/180112/DmC94JAmh3.png?imageslim" alt="mark"></p><p>本小节完成对应commit:</p><blockquote><p>7-3, 4 &amp; 5:完成列表数据展示列表分页功能：使用pure_pagination</p></blockquote><h2 id="7-6-分类筛选功能"><a href="#7-6-分类筛选功能" class="headerlink" title="7-6 分类筛选功能"></a>7-6 分类筛选功能</h2><p><img src="http://myphoto.mtianyan.cn/blog/180112/jIL4FAdjJb.png?imageslim" alt="mark"></p><p>当用户点击某一个city时对应加上参数city的id</p><h3 id="在后台处理这个city"><a href="#在后台处理这个city" class="headerlink" title="在后台处理这个city"></a>在后台处理这个city</h3><p><img src="http://myphoto.mtianyan.cn/blog/180112/59iFhGLaCD.png?imageslim" alt="mark"></p><p>获取传入的参数进行进一步筛选。</p><p><img src="http://myphoto.mtianyan.cn/blog/180112/aiKJL6kCKL.png?imageslim" alt="mark"></p><blockquote><p>将city_id传回html，使得可以知道哪个是选中的。</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180112/mmChH6l2j9.png?imageslim" alt="mark"></p><p>因为city.id是后端传回来的值是一个int。所以我们要做类型转换。</p><p><img src="http://myphoto.mtianyan.cn/blog/180112/GJa43hh95F.png?imageslim" alt="mark"></p><p>当city_id为空的时候，显示全部。</p><h3 id="后台处理类别"><a href="#后台处理类别" class="headerlink" title="后台处理类别"></a>后台处理类别</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 类别筛选</span><br><span class="line">      category = request.GET.get(&apos;ct&apos;, &quot;&quot;)</span><br><span class="line">      if category:</span><br><span class="line">          # 我们就在机构中作进一步筛选类别</span><br><span class="line">          all_orgs = all_orgs.filter(category=category)</span><br></pre></td></tr></table></figure><p>返回前台类别值以active</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">return render(request, &quot;org-list.html&quot;, &#123;</span><br><span class="line">          &quot;all_orgs&quot;:orgs,</span><br><span class="line">          &quot;all_city&quot;: all_city,</span><br><span class="line">          &quot;org_nums&quot;: org_nums,</span><br><span class="line">          &quot;city_id&quot;:city_id,</span><br><span class="line">          &quot;category&quot;:category,</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180112/Fgl4eHGJb8.png?imageslim" alt="mark"></p><p>对于类别做同样的ifequal判断</p><p><img src="http://myphoto.mtianyan.cn/blog/180112/me43dl1f0g.png?imageslim" alt="mark"></p><p>如上图所示进行城市与分类的联动:</p><p>当选择全部类别的时候，就只通过当前城市id。<br>当选择全部城市的时候，就只通过当前目录id。<br>当两者都选的时候使用&amp;连接。</p><p>刚才统计机构数目过早，应该移到后面后面已经筛选过后，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 总共有多少家机构使用count进行统计</span><br><span class="line">       org_nums = all_orgs.count()</span><br></pre></td></tr></table></figure><h3 id="课程机构排名"><a href="#课程机构排名" class="headerlink" title="课程机构排名"></a>课程机构排名</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 热门机构,如果不加负号会是有小到大。</span><br><span class="line">     hot_orgs = all_orgs.order_by(&quot;-click_nums&quot;)[:3]</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180112/BiKdf066CL.png?imageslim" alt="mark"></p><p>循环时内置变量forloop.counter取当前循环到第几次</p><p>待完成:点击排名机构的连接</p><h3 id="课程机构排序。"><a href="#课程机构排序。" class="headerlink" title="课程机构排序。"></a>课程机构排序。</h3><p>学习人数，课程数</p><p>organization/models.py<br>CourseOrg</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当学生点击学习课程，找到所属机构，学习人数加1</span></span><br><span class="line">   students = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">u"学习人数"</span>)</span><br><span class="line">   <span class="comment"># 当发布课程就加1</span></span><br><span class="line">   course_nums =  models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">u"课程数"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">makemigrations organization</span><br><span class="line">migrate organization</span><br></pre></td></tr></table></figure><p>前端页面学习人数，添加参数sort</p><p><img src="http://myphoto.mtianyan.cn/blog/180112/dbFlbHIBmb.png?imageslim" alt="mark"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进行排序</span></span><br><span class="line">       sort = request.GET.get(<span class="string">'sort'</span>, <span class="string">""</span>)</span><br><span class="line">       <span class="keyword">if</span> sort:</span><br><span class="line">           <span class="keyword">if</span> sort == <span class="string">"students"</span>:</span><br><span class="line">               all_orgs = all_orgs.order_by(<span class="string">"-students"</span>)</span><br><span class="line">           <span class="keyword">elif</span> sort == <span class="string">"courses"</span>:</span><br><span class="line">               all_orgs = all_orgs.order_by(<span class="string">"-course_nums"</span>)</span><br></pre></td></tr></table></figure><p>添加选择效果</p><p><img src="http://myphoto.mtianyan.cn/blog/180112/DJeKIb9cK1.png?imageslim" alt="mark"></p><h2 id="7-7-modelform-提交我要学习咨询1"><a href="#7-7-modelform-提交我要学习咨询1" class="headerlink" title="7-7 modelform 提交我要学习咨询1"></a>7-7 modelform 提交我要学习咨询1</h2><p>对应表<code>userask</code></p><p><code>form</code>会对字段先做验证，然后保存到数据库中。</p><p>可以看到我们的forms和我们的model中有很多内容是一样的。我们如何让代码重复利用呢？</p><p>使用modelform解决这个问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> operation.models <span class="keyword">import</span> UserAsk</span><br><span class="line"></span><br><span class="line">__author__ = <span class="string">'mtianyan'</span></span><br><span class="line">__date__ = <span class="string">'2018/1/12 0012 03:20'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 普通版本的form</span></span><br><span class="line"><span class="comment"># class UserAskForm(forms.Form):</span></span><br><span class="line"><span class="comment">#     name = forms.CharField(required=True, min_length=2, max_length=20)</span></span><br><span class="line"><span class="comment">#     phone = forms.CharField(required=True, max_length=11, min_length=11)</span></span><br><span class="line"><span class="comment">#     course_name = forms.CharField(required=True, min_length=5, max_length=50)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进阶版本的modelform：它可以向model一样save</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnotherUserForm</span><span class="params">(forms.ModelForm)</span>:</span></span><br><span class="line">    <span class="comment"># 继承之余还可以新增字段</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 是由哪个model转换的</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = UserAsk</span><br><span class="line">        <span class="comment"># 我需要验证的字段</span></span><br><span class="line">        fields = [<span class="string">'name'</span>,<span class="string">'mobile'</span>,<span class="string">'course_name'</span>]</span><br></pre></td></tr></table></figure><h3 id="include的机制配置应用自己的url"><a href="#include的机制配置应用自己的url" class="headerlink" title="include的机制配置应用自己的url"></a>include的机制配置应用自己的url</h3><p>django1.9.8 创建organization/urls.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line">__author__ = <span class="string">'mtianyan'</span></span><br><span class="line">__date__ = <span class="string">'2018/1/12 0012 06:20'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> organization.views <span class="keyword">import</span> OrgView</span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># 课程机构列表url</span></span><br><span class="line">    url(<span class="string">'list/&amp;'</span>, OrgView.as_view(), name=<span class="string">"org_list"</span>),</span><br></pre></td></tr></table></figure><p>django1.9.8 Mxonline2/urls.py:<br>删掉orglist,新增如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 课程机构app的url配置</span></span><br><span class="line">  url(<span class="string">r"^org/"</span>, include(<span class="string">'organization.urls'</span>,namespace=<span class="string">"org"</span>)),</span><br></pre></td></tr></table></figure><p>django2.0.1: 新建organization/urls.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> organization.views <span class="keyword">import</span> OrgView</span><br><span class="line"></span><br><span class="line">__author__ = <span class="string">'mtianyan'</span></span><br><span class="line">__date__ = <span class="string">'2018/1/12 0012 03:28'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># 课程机构列表url</span></span><br><span class="line">    path(<span class="string">'list/'</span>, OrgView.as_view(), name=<span class="string">"org_list"</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>django2.0.1: urls.py中:</p><p>删掉org_list，新增include</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 课程机构app的url配置</span><br><span class="line">path(&quot;org/&quot;, include(&apos;organization.urls&apos;,namespace=&quot;org&quot;)),</span><br></pre></td></tr></table></figure><p>使用命名空间防止重复</p><p><img src="http://myphoto.mtianyan.cn/blog/180112/cH5Dmm14Cj.png?imageslim" alt="mark"></p><p>解决Django2.0.1报错:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   <span class="string">'Specifying a namespace in include() without providing an app_name '</span> </span><br><span class="line">django.core.exceptions.ImproperlyConfigured: Specifying a namespace <span class="keyword">in</span> </span><br><span class="line">include() without providing an app_name <span class="keyword">is</span> <span class="keyword">not</span> supported. Set the app_name </span><br><span class="line">attribute <span class="keyword">in</span> the included module, <span class="keyword">or</span> <span class="keyword">pass</span> a <span class="number">2</span>-tuple containing the list of </span><br><span class="line">patterns <span class="keyword">and</span> app_name instead.</span><br></pre></td></tr></table></figure><p>在自己的app下的urls中写上appname</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># encoding: utf-8</span><br><span class="line">from organization.views import OrgView</span><br><span class="line"></span><br><span class="line">__author__ = &apos;mtianyan&apos;</span><br><span class="line">__date__ = &apos;2018/1/12 0012 03:28&apos;</span><br><span class="line"></span><br><span class="line">from django.urls import path, re_path</span><br><span class="line"></span><br><span class="line">app_name = &quot;organization&quot;</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line"></span><br><span class="line">    # 课程机构列表url</span><br><span class="line">    path(&apos;list/&apos;, OrgView.as_view(), name=&quot;org_list&quot;),</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>html中使用命名空间方式:</p><p><img src="http://myphoto.mtianyan.cn/blog/180112/FkaCFJ4B7h.png?imageslim" alt="mark"></p><h3 id="使用modelform做提交"><a href="#使用modelform做提交" class="headerlink" title="使用modelform做提交"></a>使用modelform做提交</h3><p>比较合理的操作是异步的，不会对整个页面进行刷新。<br>如果有错误，显示错误。一种ajax的异步操作。</p><p>因此我们此时不能直接render一个页面回来。<br>应该是给前端返回json数据，而不是页面</p><p><code>HttpResponse</code>类指明给用户返回哪种类型数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from django.http import HttpResponse</span><br></pre></td></tr></table></figure><p>配置一个modelform的view</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用户添加我要学习</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddUserAskView</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="comment"># 处理表单提交当然post</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        userask_form = UserAskForm(request.POST)</span><br><span class="line">        <span class="comment"># 判断该form是否有效</span></span><br><span class="line">        <span class="keyword">if</span> userask_form.is_valid():</span><br><span class="line">            <span class="comment"># 这里是modelform和form的区别</span></span><br><span class="line">            <span class="comment"># 它有model的属性</span></span><br><span class="line">            <span class="comment"># 当commit为true进行真正保存</span></span><br><span class="line">            user_ask = userask_form.save(commit=<span class="keyword">True</span>)</span><br><span class="line">            <span class="comment"># 这样就不需要把一个一个字段取出来然后存到model的对象中之后save</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 如果保存成功,返回json字符串,后面content type是告诉浏览器的,</span></span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">"&#123;'status': 'success'&#125;"</span>, content_type=<span class="string">'application/json'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 如果保存失败，返回json字符串,并将form的报错信息通过msg传递到前端</span></span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">"&#123;'status': 'fail', 'msg':&#123;0&#125;&#125;"</span>.format(userask_form.errors),  content_type=<span class="string">'application/json'</span>)</span><br></pre></td></tr></table></figure><h3 id="配置相应的url"><a href="#配置相应的url" class="headerlink" title="配置相应的url"></a>配置相应的url</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 添加我要学习</span><br><span class="line">path(&apos;add_ask/&apos;, AddUserAskView.as_view(), name=&quot;add_ask&quot;)</span><br></pre></td></tr></table></figure><h2 id="7-8-modelform-提交我要学习"><a href="#7-8-modelform-提交我要学习" class="headerlink" title="7-8 modelform 提交我要学习"></a>7-8 modelform 提交我要学习</h2><h3 id="分析ajax请求"><a href="#分析ajax请求" class="headerlink" title="分析ajax请求"></a>分析ajax请求</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(function()&#123;</span><br><span class="line">        $(&apos;#jsStayBtn&apos;).on(&apos;click&apos;, function()&#123;</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                cache: false,</span><br><span class="line">                type: &quot;POST&quot;,</span><br><span class="line">  url:&quot;&#123;% url &quot;org:add_ask&quot; %&#125;&quot;,</span><br><span class="line">                data:$(&apos;#jsStayForm&apos;).serialize(),</span><br><span class="line">                async: true,</span><br><span class="line">                success: function(data) &#123;</span><br><span class="line">                    if(data.status == &apos;success&apos;)&#123;</span><br><span class="line">                        $(&apos;#jsStayForm&apos;)[0].reset();</span><br><span class="line">                        alert(&quot;提交成功&quot;)</span><br><span class="line">                    &#125;else if(data.status == &apos;fail&apos;)&#123;</span><br><span class="line">                        $(&apos;#jsCompanyTips&apos;).html(data.msg)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>监听这个button，用户如果点击了button。我们来向这个url进行post请求。<br>将我们的表单进行序列化。</p></blockquote><p>form表单添加crsf_token</p><p>如果后台返回的状态值为success，那么我们将弹出提交成功。<br>失败，就会在错误提示框中写入。</p><h3 id="手机号码正则表达式验证"><a href="#手机号码正则表达式验证" class="headerlink" title="手机号码正则表达式验证:"></a>手机号码正则表达式验证:</h3><p>organization/forms.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 手机号的正则表达式验证</span><br><span class="line">    def clean_mobile(self):</span><br><span class="line">        mobile = self.cleaned_data[&apos;mobile&apos;]</span><br><span class="line">        REGEX_MOBILE = &quot;^1[358]\d&#123;9&#125;$|^147\d&#123;8&#125;$|^176\d&#123;8&#125;$&quot;</span><br><span class="line">        p = re.compile(REGEX_MOBILE)</span><br><span class="line">        if p.match(mobile):</span><br><span class="line">            return mobile</span><br><span class="line">        else:</span><br><span class="line">            raise forms.ValidationError(u&quot;手机号码非法&quot;, code=&quot;mobile_invalid&quot;)</span><br></pre></td></tr></table></figure><p>本小节完毕对应提交commit:</p><blockquote><p>7-7&amp;8 使用modelform完成表单我要学习的异步提交</p></blockquote><h2 id="7-9-机构详情"><a href="#7-9-机构详情" class="headerlink" title="7-9 机构详情"></a>7-9 机构详情</h2><ul><li>机构首页</li><li>机构课程</li><li>机构介绍</li><li>机构讲师</li></ul><p>登录xadmin添加基础的必要数据。添加课程与讲师。</p><p>课程中应该有一个外键指向它是哪个机构的。</p><p>courses/models.py</p><p>Django1.9.8中:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> organization.models <span class="keyword">import</span> CourseOrg</span><br><span class="line"></span><br><span class="line">course_org = models.ForeignKey(CourseOrg, verbose_name=<span class="string">u"所属机构"</span>,null=<span class="keyword">True</span>,blank=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>django2.0.1下；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">course_org = models.ForeignKey(CourseOrg,on_delete=models.CASCADE, verbose_name=<span class="string">u"所属机构"</span>,null=<span class="keyword">True</span>,blank=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>新增外键字段应该<code>null=true,blank=true。</code></p><blockquote><p>因为历史数据中没有这个外键字段</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">makemigration course</span><br><span class="line">migrate course</span><br></pre></td></tr></table></figure><p>将前端给我们的org相关的四个页面拷进template</p><p><img src="http://myphoto.mtianyan.cn/blog/180112/BeIFlkf97m.png?imageslim" alt="mark"></p><p>新建org_base页面</p><p>将org_home页面内容拿过去。</p><p><img src="http://myphoto.mtianyan.cn/blog/180112/DFHg4mGkFb.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180112/k09CHekje2.png?imageslim" alt="mark"></p><ul><li>loadstaticfiles -&gt; 改css文件路径-&gt;改js文件路径-&gt;改图片路径</li><li>改已经实现的url。-&gt;将子页面继承后需要改得地方使用block包裹。</li></ul><p>将home页面清空</p><p><img src="http://myphoto.mtianyan.cn/blog/180112/BBI8iLE97D.png?imageslim" alt="mark"></p><p>完成替换之后添加访问的view以及URl</p><p>organization/views.py:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class OrgHomeView(View):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">   机构首页</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def get(self, request, org_id):</span><br><span class="line">        # 根据id取到课程机构</span><br><span class="line">        course_org = CourseOrg.objects.get(id= int(org_id))</span><br><span class="line">        # 通过课程机构找到课程。内建的变量，找到指向这个字段的外键引用</span><br><span class="line">        all_courses = course_org.course_set.all()[:4]</span><br><span class="line">        all_teacher = course_org.teacher_set.all()[:2]</span><br><span class="line"></span><br><span class="line">        return render(request, &apos;org-detail-homepage.html&apos;,&#123;</span><br><span class="line">           &apos;all_courses&apos;:all_courses,</span><br><span class="line">            &apos;all_teacher&apos;:all_teacher,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><p>Django2.0.1下url</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">   # home页面,取纯数字</span><br><span class="line">re_path(&apos;home/(?P&lt;org_id&gt;\d+)/&apos;, OrgHomeView.as_view(), name=&quot;org_home&quot;),</span><br></pre></td></tr></table></figure><p>django1.9.8下url:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># home页面,取纯数字</span><br><span class="line">url(r&apos;home/(?P&lt;org_id&gt;\d+)/$&apos;, OrgHomeView.as_view(), name=&quot;org_home&quot;)</span><br></pre></td></tr></table></figure><p>html中使用for循环遍历:</p><p><img src="http://myphoto.mtianyan.cn/blog/180112/ECJ36kDclf.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180112/4j037g1DKj.png?imageslim" alt="mark"></p><blockquote><p>如上图可以直接通过外键字段再找到外键对象的字段</p></blockquote><p>templates/org-list.html</p><p>配置里面跳转到详情页的url</p><p><img src="http://myphoto.mtianyan.cn/blog/180112/90m2l2A0Dj.png?imageslim" alt="mark"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> render(request, <span class="string">'org-detail-homepage.html'</span>,&#123;</span><br><span class="line">   <span class="string">'all_courses'</span>:all_courses,</span><br><span class="line">    <span class="string">'all_teacher'</span>:all_teacher,</span><br><span class="line">    <span class="string">'course_org'</span>: course_org,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>将<code>course_org</code>也return回来，就可以把网页里这部分值替换掉</p><p>templates/org_base.html</p><p>数值会随继承链向上传递。</p><p><img src="http://myphoto.mtianyan.cn/blog/180112/0ED5bcC9Jf.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180112/I83bFbddC3.png?imageslim" alt="mark"></p><h3 id="为讲师增加头像字段"><a href="#为讲师增加头像字段" class="headerlink" title="为讲师增加头像字段"></a>为讲师增加头像字段</h3><p>organization/models.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">image = models.ImageField(</span><br><span class="line">    default= &apos;&apos;,</span><br><span class="line">    upload_to=&quot;teacher/%Y/%m&quot;,</span><br><span class="line">    verbose_name=u&quot;头像&quot;,</span><br><span class="line">    max_length=100)</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">makemgration organization</span><br><span class="line">migrate organization</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180112/mL08LkChhe.png?imageslim" alt="mark"></p><p>使用for循环填充数据</p><p><img src="http://myphoto.mtianyan.cn/blog/180112/cLg8IFB1jA.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180112/G2ICdgdDgh.png?imageslim" alt="mark"></p><p>同理可得，我们把机构课程页不同的部分拿出来即可</p><h3 id="配置访问的view和url"><a href="#配置访问的view和url" class="headerlink" title="配置访问的view和url"></a>配置访问的view和url</h3><p>organization/urls.py:</p><p>Django 2.0.1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 访问课程</span><br><span class="line">re_path(&apos;course/(?P&lt;org_id&gt;\d+)/&apos;, OrgCourseView.as_view(), name=&quot;org_course&quot;),</span><br></pre></td></tr></table></figure><p>Django 1.9.8：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 访问课程</span><br><span class="line">url(r&apos;^course/(?P&lt;org_id&gt;\d+)/$&apos;, OrgCourseView.as_view(), name=&quot;org_course&quot;),</span><br></pre></td></tr></table></figure><p>organization/views.py<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class OrgCourseView(View):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">   机构课程列表页</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def get(self, request, org_id):</span><br><span class="line">        # 根据id取到课程机构</span><br><span class="line">        course_org = CourseOrg.objects.get(id= int(org_id))</span><br><span class="line">        # 通过课程机构找到课程。内建的变量，找到指向这个字段的外键引用</span><br><span class="line">        all_courses = course_org.course_set.all()</span><br><span class="line"></span><br><span class="line">        return render(request, &apos;org-detail-course.html&apos;,&#123;</span><br><span class="line">           &apos;all_courses&apos;:all_courses,</span><br><span class="line">            &apos;course_org&apos;: course_org,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></p><p>base页面的left链接修改</p><blockquote><p>这里能直接用到course_org.id。是因为子页面render时都向上传递了course_org对象</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180112/b7heml49dh.png?imageslim" alt="mark"></p><p>使用for循环，填充内容。</p><p><img src="http://myphoto.mtianyan.cn/blog/180112/5gjFji2d25.png?imageslim" alt="mark"></p><h3 id="左侧active修改"><a href="#左侧active修改" class="headerlink" title="左侧active修改"></a>左侧active修改</h3><p>因为现在没有值能判断当前是哪个页面。所以在orghomeview中传值回来current page<br><img src="http://myphoto.mtianyan.cn/blog/180112/Kd5ijhIAgK.png?imageslim" alt="mark"><br><img src="http://myphoto.mtianyan.cn/blog/180112/3CFjke2B3C.png?imageslim" alt="mark"></p><p>写两个view</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">class OrgDescView(View):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">   机构描述详情页</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def get(self, request, org_id):</span><br><span class="line">        # 向前端传值，表明现在在home页</span><br><span class="line">        current_page = &quot;desc&quot;</span><br><span class="line">        # 根据id取到课程机构</span><br><span class="line">        course_org = CourseOrg.objects.get(id= int(org_id))</span><br><span class="line">        # 通过课程机构找到课程。内建的变量，找到指向这个字段的外键引用</span><br><span class="line">        # 向前端传值说明用户是否收藏</span><br><span class="line">        has_fav = False</span><br><span class="line">        # 必须是用户已登录我们才需要判断。</span><br><span class="line">        if request.user.is_authenticated:</span><br><span class="line">            if UserFavorite.objects.filter(user=request.user, fav_id=course_org.id, fav_type=2):</span><br><span class="line">                has_fav = True</span><br><span class="line">        return render(request, &apos;org-detail-desc.html&apos;,&#123;</span><br><span class="line">            &apos;course_org&apos;: course_org,</span><br><span class="line">            &quot;current_page&quot;:current_page,</span><br><span class="line">            &quot;has_fav&quot;:has_fav,</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">class OrgTeacherView(View):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">   机构讲师列表页</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def get(self, request, org_id):</span><br><span class="line">        # 向前端传值，表明现在在home页</span><br><span class="line">        current_page = &quot;teacher&quot;</span><br><span class="line">        # 根据id取到课程机构</span><br><span class="line">        course_org = CourseOrg.objects.get(id= int(org_id))</span><br><span class="line">        # 通过课程机构找到课程。内建的变量，找到指向这个字段的外键引用</span><br><span class="line">        all_teachers = course_org.teacher_set.all()</span><br><span class="line">        # 向前端传值说明用户是否收藏</span><br><span class="line">        has_fav = False</span><br><span class="line">        # 必须是用户已登录我们才需要判断。</span><br><span class="line">        if request.user.is_authenticated:</span><br><span class="line">            if UserFavorite.objects.filter(user=request.user, fav_id=course_org.id, fav_type=2):</span><br><span class="line">                has_fav = True</span><br><span class="line">        return render(request, &apos;org-detail-teachers.html&apos;,&#123;</span><br><span class="line">           &apos;all_teachers&apos;:all_teachers,</span><br><span class="line">            &apos;course_org&apos;: course_org,</span><br><span class="line">            &quot;current_page&quot;:current_page,</span><br><span class="line">            &quot;has_fav&quot;:has_fav</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><p>加两个url</p><p>Django2.0.1下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 访问机构描述</span><br><span class="line">re_path(&apos;desc/(?P&lt;org_id&gt;\d+)/&apos;, OrgDescView.as_view(), name=&quot;org_desc&quot;),</span><br><span class="line"></span><br><span class="line"># 访问机构讲师</span><br><span class="line">re_path(&apos;teacher/(?P&lt;org_id&gt;\d+)/&apos;, OrgTeacherView.as_view(), name=&quot;org_teacher&quot;),</span><br></pre></td></tr></table></figure><p>Django1.9.8下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 访问机构描述</span><br><span class="line">url(r&apos;^desc/(?P&lt;org_id&gt;\d+)/$&apos;, OrgDescView.as_view(), name=&quot;org_desc&quot;),</span><br><span class="line"></span><br><span class="line"># 访问机构讲师</span><br><span class="line">url(r&apos;^teacher/(?P&lt;org_id&gt;\d+)/$&apos;, OrgTeacherView.as_view(), name=&quot;org_teacher&quot;),</span><br></pre></td></tr></table></figure><p>修改base页面相关跳转链接，注意点：加上course_org.id</p><p>重载我们的pagepath，使得面包屑动态显示</p><p><img src="http://myphoto.mtianyan.cn/blog/180112/2AdFE6He3D.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180112/4f7A1Ei2Fg.png?imageslim" alt="mark"></p><h2 id="7-10-课程机构收藏功能"><a href="#7-10-课程机构收藏功能" class="headerlink" title="7-10 课程机构收藏功能"></a>7-10 课程机构收藏功能</h2><p>书写收藏的后台逻辑:</p><p>url配置</p><p>django2.0.1下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 机构收藏</span></span><br><span class="line">path(<span class="string">'add_fav/'</span>, AddFavView.as_view(), name=<span class="string">"add_fav"</span>),</span><br></pre></td></tr></table></figure><p>django1.9.8下；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 机构收藏</span><br><span class="line">url(r&apos;^add_fav/$&apos;, AddFavView.as_view(), name=&quot;add_fav&quot;),</span><br></pre></td></tr></table></figure><p>配套的view；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddFavView</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    用户收藏与取消收藏功能</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="comment"># 表明你收藏的不管是课程，讲师，还是机构。他们的id</span></span><br><span class="line">        <span class="comment"># 默认值取0是因为空串转int报错</span></span><br><span class="line">        id = request.POST.get(<span class="string">'fav_id'</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="comment"># 取到你收藏的类别，从前台提交的ajax请求中取</span></span><br><span class="line">        type = request.POST.get(<span class="string">'fav_type'</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 收藏与已收藏取消收藏</span></span><br><span class="line">        <span class="comment"># 判断用户是否登录:即使没登录会有一个匿名的user</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> request.user.is_authenticated:</span><br><span class="line">            <span class="comment"># 未登录时返回json提示未登录，跳转到登录页面是在ajax中做的</span></span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">'&#123;"status":"fail", "msg":"用户未登录"&#125;'</span>, content_type=<span class="string">'application/json'</span>)</span><br><span class="line">        exist_records = UserFavorite.objects.filter(user=request.user, fav_id=int(id), fav_type=int(type))</span><br><span class="line">        <span class="keyword">if</span> exist_records:</span><br><span class="line">            <span class="comment"># 如果记录已经存在， 则表示用户取消收藏</span></span><br><span class="line">            exist_records.delete()</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">'&#123;"status":"success", "msg":"收藏"&#125;'</span>, content_type=<span class="string">'application/json'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            user_fav = UserFavorite()</span><br><span class="line">            <span class="comment"># 过滤掉未取到fav_id type的默认情况</span></span><br><span class="line">            <span class="keyword">if</span> int(type) &gt;<span class="number">0</span> <span class="keyword">and</span> int(id) &gt;<span class="number">0</span>:</span><br><span class="line">                user_fav.fav_id = int(id)</span><br><span class="line">                user_fav.fav_type = int(type)</span><br><span class="line">                user_fav.user = request.user</span><br><span class="line">                user_fav.save()</span><br><span class="line">                <span class="keyword">return</span> HttpResponse(<span class="string">'&#123;"status":"success", "msg":"已收藏"&#125;'</span>, content_type=<span class="string">'application/json'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> HttpResponse(<span class="string">'&#123;"status":"fail", "msg":"收藏出错"&#125;'</span>, content_type=<span class="string">'application/json'</span>)</span><br></pre></td></tr></table></figure><p>相关处理收藏的jQuery代码写在org base Html</p><p><img src="http://myphoto.mtianyan.cn/blog/180112/c8aa7f62L1.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180112/KelfeB7D2C.png?imageslim" alt="mark"></p><p>添加返回页面的收藏值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 向前端传值说明用户是否收藏</span><br><span class="line">       has_fav = False</span><br><span class="line">       # 必须是用户已登录我们才需要判断。</span><br><span class="line">       if request.user.is_authenticated:</span><br><span class="line">           if UserFavorite.objects.filter(user=request.user, fav_id=course_org.id, fav_type=2):</span><br><span class="line">               has_fav = True</span><br><span class="line"></span><br><span class="line"># return redener加上值</span><br><span class="line">            &quot;has_fav&quot;: has_fav</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180112/DI3GJKkJLI.png?imageslim" alt="mark"></p><p>前台 org_base.html中</p><p><img src="http://myphoto.mtianyan.cn/blog/180112/3gBdC96Aij.png?imageslim" alt="mark"></p><p>同理添加剩下的几个页面的。</p><p>第七章完结撒花。对应commit:</p><blockquote><p>7-9&amp;10&amp;11&amp;12将机构详情展示完毕，为课程机构添加了收藏功能。修复了index未登录状态下爆炸的错误</p></blockquote><blockquote class="blockquote-center"><p>三年六班，三年六班，李子明，李子明同学，你妈妈拿了两罐旺仔牛奶给你 </p></blockquote><div class="note success"><p>上帝说得有课程！ 得有详情 ！点了开始学习，得有章节！章节得有视频。<br>课程还得能评论下，还得有相关课程。于是这章出现了。</p></div><h1 id="课程相关功能实现"><a href="#课程相关功能实现" class="headerlink" title="课程相关功能实现"></a>课程相关功能实现</h1><h2 id="8-1-课程列表"><a href="#8-1-课程列表" class="headerlink" title="8-1 课程列表"></a>8-1 课程列表</h2><p>拷贝课程列表页到template目录</p><p>创建课程相关的urls.py</p><p>Mxonline2/urls.py中声明包含到course的url中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 课程app的url配置</span><br><span class="line">url(r&quot;^course/&quot;, include(&apos;courses.urls&apos;, namespace=&quot;course&quot;)),</span><br></pre></td></tr></table></figure><p>django2.0.1版本:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 课程app的url配置</span><br><span class="line">path(&quot;course/&quot;, include(&apos;courses.urls&apos;, namespace=&quot;course&quot;)),</span><br></pre></td></tr></table></figure><p>书写处理列表展示相关的view</p><p>courses/views.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class CourseListView(View):</span><br><span class="line">    def get(self, request):</span><br><span class="line">        return render(request, &quot;course-list.html&quot;, &#123; &#125;)</span><br></pre></td></tr></table></figure><p>courses/urls.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># encoding: utf-8</span><br><span class="line">from courses.views import CourseListView</span><br><span class="line"></span><br><span class="line">__author__ = &apos;mtianyan&apos;</span><br><span class="line">__date__ = &apos;2018/1/13 0013 00:39&apos;</span><br><span class="line"></span><br><span class="line">from django.conf.urls import url</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    # 课程列表url</span><br><span class="line">    url(r&apos;^list/$&apos;, CourseListView.as_view(), name=&quot;list&quot;),</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>django2.0.1版本:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># encoding: utf-8</span><br><span class="line">__author__ = &apos;mtianyan&apos;</span><br><span class="line">__date__ = &apos;2018/1/13 0013 01:57&apos;</span><br><span class="line"></span><br><span class="line"># encoding: utf-8</span><br><span class="line">from courses.views import CourseListView</span><br><span class="line">from django.urls import path</span><br><span class="line">app_name = &quot;courses&quot;</span><br><span class="line">urlpatterns = [</span><br><span class="line">    # 课程列表url</span><br><span class="line">    path(&apos;list/&apos;, CourseListView.as_view(), name=&quot;list&quot;),</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>此时访问没有样式。我们开始对于course list html进行工作<br>可以观察到它和orglist一样可以有共同的头尾。所以继承base页面</p><p>xadmin中添加一些课程。</p><p>然后在view中返回课程数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class CourseListView(View):</span><br><span class="line">    def get(self, request):</span><br><span class="line">        all_course = Course.objects.all()</span><br><span class="line">        return render(request, &quot;course-list.html&quot;, &#123;</span><br><span class="line">            &quot;all_course&quot;:all_course,</span><br><span class="line">            </span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180113/32hbAB04ec.png?imageslim" alt="mark"></p><p>保留一个div</p><p><img src="http://myphoto.mtianyan.cn/blog/180113/L1Jm283bck.png?imageslim" alt="mark"></p><blockquote><p>通过外键字段取外键表中字段</p></blockquote><h3 id="分页功能"><a href="#分页功能" class="headerlink" title="分页功能"></a>分页功能</h3><p>拷贝代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from pure_pagination import Paginator, EmptyPage, PageNotAnInteger</span><br><span class="line"> # 对课程机构进行分页</span><br><span class="line">        # 尝试获取前台get请求传递过来的page参数</span><br><span class="line">        # 如果是不合法的配置参数默认返回第一页</span><br><span class="line">        try:</span><br><span class="line">            page = request.GET.get(&apos;page&apos;, 1)</span><br><span class="line">        except PageNotAnInteger:</span><br><span class="line">            page = 1</span><br><span class="line">        # 这里指从allorg中取五个出来，每页显示5个</span><br><span class="line">        p = Paginator(all_orgs, 4, request=request)</span><br><span class="line">        orgs = p.page(page)</span><br></pre></td></tr></table></figure><p>改动完成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class CourseListView(View):</span><br><span class="line">    def get(self, request):</span><br><span class="line">        all_course = Course.objects.all()</span><br><span class="line">        # 对课程进行分页</span><br><span class="line">        # 尝试获取前台get请求传递过来的page参数</span><br><span class="line">        # 如果是不合法的配置参数默认返回第一页</span><br><span class="line">        try:</span><br><span class="line">            page = request.GET.get(&apos;page&apos;, 1)</span><br><span class="line">        except PageNotAnInteger:</span><br><span class="line">            page = 1</span><br><span class="line">        # 这里指从allorg中取五个出来，每页显示5个</span><br><span class="line">        p = Paginator(all_course,6 , request=request)</span><br><span class="line">        courses = p.page(page)</span><br><span class="line">        return render(request, &quot;course-list.html&quot;, &#123;</span><br><span class="line">            &quot;all_course&quot;:courses,</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><p>在html中使用时注意object_list</p><blockquote><p>此时的all_course已经不是一个queryset，而是一个purepage对象。</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180113/JBm95D0fK8.png?imageslim" alt="mark"></p><h3 id="对于页码进行修改"><a href="#对于页码进行修改" class="headerlink" title="对于页码进行修改"></a>对于页码进行修改</h3><p><img src="http://myphoto.mtianyan.cn/blog/180113/L7Ibjh9g72.png?imageslim" alt="mark"></p><p>直接把orglist中的那段拿过来就行了。自行替换变量名称</p><p>此时已经好了。</p><h3 id="排序功能"><a href="#排序功能" class="headerlink" title="排序功能"></a>排序功能</h3><p>将之前的sort逻辑拷贝过来:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 进行排序</span><br><span class="line">        sort = request.GET.get(&apos;sort&apos;, &quot;&quot;)</span><br><span class="line">        if sort:</span><br><span class="line">            if sort == &quot;students&quot;:</span><br><span class="line">                all_orgs = all_orgs.order_by(&quot;-students&quot;)</span><br><span class="line">            elif sort == &quot;courses&quot;:</span><br><span class="line">                all_orgs = all_orgs.order_by(&quot;-course_nums&quot;)</span><br></pre></td></tr></table></figure><p>修改完成:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 进行排序</span><br><span class="line">sort = request.GET.get(&apos;sort&apos;, &quot;&quot;)</span><br><span class="line">if sort:</span><br><span class="line">    if sort == &quot;students&quot;:</span><br><span class="line">        all_course = all_course.order_by(&quot;-students&quot;)</span><br><span class="line">    elif sort == &quot;hot&quot;:</span><br><span class="line">        all_course = all_course.order_by(&quot;-click_nums&quot;)</span><br></pre></td></tr></table></figure><p>应放在分页之前。让分页处理所有筛选过的数据</p><p>return render时添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;sort&quot;:sort,</span><br></pre></td></tr></table></figure><blockquote><p>用来判断激活状态。</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180113/0DhjiABaA4.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180113/al219GFJJ1.png?imageslim" alt="mark"></p><p>修改a标签参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 热门课程推荐</span><br><span class="line">    hot_courses = Course.objects.all().order_by(&quot;-students&quot;)[:3]</span><br><span class="line">    return render</span><br><span class="line">     &quot;hot_courses&quot;:hot_courses</span><br></pre></td></tr></table></figure><p>修改html中<br><img src="http://myphoto.mtianyan.cn/blog/180113/FkIJ7mCjH3.png?imageslim" alt="mark"></p><p>for循环填充内容</p><p><img src="http://myphoto.mtianyan.cn/blog/180113/ji6bee4D31.png?imageslim" alt="mark"></p><p>这里的degree我们在数据库中填写的是字母。如何显示为中文。</p><ul><li>个人猜测: template if</li></ul><p>get_degree_display degree是字段名。专门用于choice字段显示</p><p>本小节完成对应commit：</p><blockquote><p>8-1完成课程列表页展示，分页，热门课程。</p></blockquote><h2 id="8-2-课程详情页1"><a href="#8-2-课程详情页1" class="headerlink" title="8-2 课程详情页1"></a>8-2 课程详情页1</h2><p>拷贝course_detail进入template目录</p><p>可以看出这个页面也是继承base页面的。将course_list的页面框架拿过来</p><p>替换面包屑。</p><p><img src="http://myphoto.mtianyan.cn/blog/180113/Jb07I8Ef1f.png?imageslim" alt="mark"></p><p>配置url访问</p><p>django2.0.1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 课程详情页</span><br><span class="line">re_path(&apos;course/(?P&lt;course_id&gt;\d+)/&apos;, CourseDetailView.as_view(), name=&quot;course_detail&quot;),</span><br></pre></td></tr></table></figure><p>书写对应访问的view</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> 课程详情处理view</span><br><span class="line"></span><br><span class="line">class CourseDetailView(View):</span><br><span class="line">    def get(self, request, course_id):</span><br><span class="line">        return  render(request, &quot;course-detail.html&quot;, &#123;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><p>尝试访问：</p><p>在列表展示页放入详情的url。</p><p><img src="http://myphoto.mtianyan.cn/blog/180113/6Ca5l1lBCf.png?imageslim" alt="mark"></p><p>有参数类型的把参数也传进来</p><p>进行数据填充:先取出当前的课程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 此处的id为表默认为我们添加的值。</span><br><span class="line">course = Course.objects.get(id = int(course_id))</span><br><span class="line"></span><br><span class="line">        return  render(request, &quot;course-detail.html&quot;, &#123;</span><br><span class="line">    &quot;course&quot;:course,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>html中取出数据:</p><p><img src="http://myphoto.mtianyan.cn/blog/180113/mk6Gb823k6.png?imageslim" alt="mark"></p><p>课程的章节数如何实现？</p><p>models.py中自定义方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def get_zj_nums(self):</span><br><span class="line">    # 获取课程章节数的方法</span><br><span class="line">    return self.lesson_set.all().count()</span><br></pre></td></tr></table></figure><p>添加课程类别字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">category = models.CharField(max_length=20, default=u&quot;&quot;, verbose_name=u&quot;课程类别&quot;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">makemigrations</span><br><span class="line">migrate</span><br></pre></td></tr></table></figure><p>operation中专门有张表是做用户学习记录的。</p><p>UserCourse查询有哪些学生学习了这门课</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 获取学习这门课程的用户</span><br><span class="line">def get_learn_users(self):</span><br><span class="line">    # 谁的里面添加了它做外键，他都可以取出来</span><br><span class="line">    return self.usercourse_set.all()[:5]</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180113/HKLll9bL4F.png?imageslim" alt="mark"></p><p>链式调用取出数据</p><p>添加一些用户课程进行验证</p><p><img src="http://myphoto.mtianyan.cn/blog/180113/3kmjFehf7F.png?imageslim" alt="mark"></p><p>可以看到已经大功告成</p><p>课程详情的view中添加clicknums+1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 增加课程点击数</span><br><span class="line">course.click_nums += 1</span><br><span class="line">course.save()</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180113/93LBHie41d.png?imageslim" alt="mark"></p><h2 id="8-3-课程详情页2"><a href="#8-3-课程详情页2" class="headerlink" title="8-3 课程详情页2"></a>8-3 课程详情页2</h2><p><img src="http://myphoto.mtianyan.cn/blog/180113/F0jLggJge6.png?imageslim" alt="mark"></p><p>tab_cont1 中填充我们自己的内容。</p><p><img src="http://myphoto.mtianyan.cn/blog/180113/8fDFkB7DIm.png?imageslim" alt="mark"></p><p>教师数自定义函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def get_teacher_nums:</span><br><span class="line">return self.teacher_set.all().count</span><br></pre></td></tr></table></figure><p>不用自定义函数的方法如下</p><p><img src="http://myphoto.mtianyan.cn/blog/180113/37jDHdha1l.png?imageslim" alt="mark"></p><h3 id="课程是否相关"><a href="#课程是否相关" class="headerlink" title="课程是否相关"></a>课程是否相关</h3><p>定义课程的tag ，如果tag相同，那么是相关课程。</p><p>courses/models.py:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tag = models.CharField(max_length=15, verbose_name=u&quot;课程标签&quot;, default=u&quot;&quot;)</span><br></pre></td></tr></table></figure><p>更改数据库后必然。此处略。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tag = course.tag</span><br><span class="line">       if tag:</span><br><span class="line">       # 需要从1开始不然会推荐自己</span><br><span class="line">           relate_courses = Course.objects.filter(tag=tag)[1:2]</span><br><span class="line">       else:</span><br><span class="line">           relate_courses = []</span><br></pre></td></tr></table></figure><p>return render加上：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;relate_courses&quot;:relate_courses,</span><br></pre></td></tr></table></figure><h3 id="收藏功能"><a href="#收藏功能" class="headerlink" title="收藏功能:"></a>收藏功能:</h3><p>将block js写到页面底部。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">//收藏分享</span><br><span class="line">function add_fav(current_elem, fav_id, fav_type)&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        cache: false,</span><br><span class="line">        type: &quot;POST&quot;,</span><br><span class="line">        url:&quot;&#123;% url &quot;org:add_fav&quot; %&#125;&quot;,</span><br><span class="line">        data:&#123;&apos;fav_id&apos;:fav_id, &apos;fav_type&apos;:fav_type&#125;,</span><br><span class="line">        async: true,</span><br><span class="line">        beforeSend:function(xhr, settings)&#123;</span><br><span class="line">            xhr.setRequestHeader(&quot;X-CSRFToken&quot;, &quot;&#123;&#123; csrf_token &#125;&#125;&quot;);</span><br><span class="line">        &#125;,</span><br><span class="line">        success: function(data) &#123;</span><br><span class="line">            if(data.status == &apos;fail&apos;)&#123;</span><br><span class="line">                if(data.msg == &apos;用户未登录&apos;)&#123;</span><br><span class="line">                    window.location.href=&quot;/login/&quot;;</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    alert(data.msg)</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;else if(data.status == &apos;success&apos;)&#123;</span><br><span class="line">                current_elem.text(data.msg)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$(&apos;#jsLeftBtn&apos;).on(&apos;click&apos;, function()&#123;</span><br><span class="line">    add_fav($(this), &#123;&#123; course.id &#125;&#125;, 1);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(&apos;#jsRightBtn&apos;).on(&apos;click&apos;, function()&#123;</span><br><span class="line">    add_fav($(this), &#123;&#123; course.course_org.id &#125;&#125;, 2);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>刷新后又不见了的问题，从view中传递has_fav的参数。前台进行判断。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 是否收藏课程</span><br><span class="line">      has_fav_course = False</span><br><span class="line">      has_fav_org = False</span><br><span class="line"></span><br><span class="line">      # 必须是用户已登录我们才需要判断。</span><br><span class="line">      if request.user.is_authenticated:</span><br><span class="line">          if UserFavorite.objects.filter(user=request.user, fav_id=course.id, fav_type=1):</span><br><span class="line">              has_fav_course = True</span><br><span class="line">          if UserFavorite.objects.filter(user=request.user, fav_id=course.course_org.id, fav_type=2):</span><br><span class="line">              has_fav_org = True</span><br></pre></td></tr></table></figure><p>return render</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;has_fav_course&quot;:has_fav_course,</span><br><span class="line">&quot;has_fav_org&quot;:has_fav_org,</span><br></pre></td></tr></table></figure><p>html中使用；</p><p><img src="http://myphoto.mtianyan.cn/blog/180113/KJc25I0KF8.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180113/mKHhjj2d32.png?imageslim" alt="mark"></p><blockquote><p>8-2&amp;3完成课程详情页展示，课程详情页机构，相关推荐课程。收藏课程，收藏机构。</p></blockquote><h2 id="8-4-课程章节信息"><a href="#8-4-课程章节信息" class="headerlink" title="8-4 课程章节信息"></a>8-4 课程章节信息</h2><p>章节信息，评论信息。</p><p>course comments 和 course video放入 template</p><p>它也有head和foot继承我们的base页面</p><p><img src="http://myphoto.mtianyan.cn/blog/180113/D4L8a0lmI0.png?imageslim" alt="mark"></p><p>配置相应的url:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 处理课程章节信息页面的view</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CourseInfoView</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, course_id)</span>:</span></span><br><span class="line">        <span class="comment"># 此处的id为表默认为我们添加的值。</span></span><br><span class="line">        course = Course.objects.get(id=int(course_id))</span><br><span class="line">        <span class="comment"># 是否收藏课程</span></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">"course-video.html"</span>, &#123;</span><br><span class="line">            <span class="string">"course"</span>: course,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 课程章节信息页</span><br><span class="line">url(r&apos;^info/(?P&lt;course_id&gt;\d+)/$&apos;, CourseInfoView.as_view(), name=&quot;course_info&quot;),</span><br></pre></td></tr></table></figure><p>用户点击开始学习链接修改</p><p><img src="http://myphoto.mtianyan.cn/blog/180113/hBAAmHlm4g.png?imageslim" alt="mark"></p><p>为课程添加章节以及视频。</p><h2 id="8-5-章节视频信息"><a href="#8-5-章节视频信息" class="headerlink" title="8-5 章节视频信息"></a>8-5 章节视频信息</h2><p>为video表添加视频对应的url信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url = models.CharField(max_length=200, default=&quot;http://blog.mtianyan.cn/&quot; ,verbose_name=u&quot;访问地址&quot;)</span><br></pre></td></tr></table></figure><p>将章节信息填充进页面</p><p>通过课程可以找到章节:course.lesson_set</p><p><img src="http://myphoto.mtianyan.cn/blog/180113/5GjjhDe40D.png?imageslim" alt="mark"></p><p>video的时长添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 使用分钟做后台记录(存储最小单位)前台转换</span><br><span class="line">   learn_times = models.IntegerField(default=0, verbose_name=u&quot;学习时长(分钟数)&quot;)</span><br></pre></td></tr></table></figure><p>资源下载功能:</p><p>后台自行上传点文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">all_resources = CourseResource.objects.filter(course=course)</span><br><span class="line"></span><br><span class="line">          &quot;all_resources&quot;:all_resources,</span><br></pre></td></tr></table></figure><p>或者前端直接:</p><p><img src="http://myphoto.mtianyan.cn/blog/180113/CL7fke0LGF.png?imageslim" alt="mark"></p><p>创建课程与讲师之间的外键关联</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">teacher = models.ForeignKey(Teacher,verbose_name=u&quot;讲师&quot;, null=True, blank=True)</span><br></pre></td></tr></table></figure><p>前往课程，设置讲师。</p><p><strong>注意:不要在Unicode方法里使用外键字段很容易报错。</strong></p><p>增加课程需知字段和老师告诉你学什么？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">you_need_know = models.CharField(max_length=300, default=u&quot;一颗勤学的心是本课程必要前提&quot;,verbose_name=u&quot;课程须知&quot;)</span><br><span class="line">  teacher_tell = models.CharField(max_length=300, default=u&quot;按时交作业,不然叫家长&quot;,verbose_name=u&quot;老师告诉你&quot;)</span><br></pre></td></tr></table></figure><p>将这两个字段显示到页面。</p><p>对应commit:</p><p>8-4&amp;5完成课程章节信息，课程资源，课程老师信息。</p><h2 id="8-6-课程评论页面"><a href="#8-6-课程评论页面" class="headerlink" title="8-6 课程评论页面"></a>8-6 课程评论页面</h2><p>配置课程评论的url和view</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class CommentsView(View):</span><br><span class="line">    def get(self, request, course_id):</span><br><span class="line">        # 此处的id为表默认为我们添加的值。</span><br><span class="line">        course = Course.objects.get(id=int(course_id))</span><br><span class="line">        all_resources = CourseResource.objects.filter(course=course)</span><br><span class="line">        return render(request, &quot;course-comment.html&quot;, &#123;</span><br><span class="line">            &quot;course&quot;: course,</span><br><span class="line">            &quot;all_resources&quot;: all_resources,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 课程章节信息页</span><br><span class="line">    re_path(&apos;comments/(?P&lt;course_id&gt;\d+)/&apos;, CommentsView.as_view(), name=&quot;course_comments&quot;),</span><br></pre></td></tr></table></figure><p>course video中跳转到评论链接</p><p>发表评论功能</p><p>ajax操作。如果发布成功就会刷新页面。</p><p>新建view用于添加评论:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># ajax方式添加评论</span><br><span class="line">class AddCommentsView(View):</span><br><span class="line">    def post(self, request):</span><br><span class="line">        if not request.user.is_authenticated:</span><br><span class="line">            # 未登录时返回json提示未登录，跳转到登录页面是在ajax中做的</span><br><span class="line">            return HttpResponse(&apos;&#123;&quot;status&quot;:&quot;fail&quot;, &quot;msg&quot;:&quot;用户未登录&quot;&#125;&apos;, content_type=&apos;application/json&apos;)</span><br><span class="line">        course_id = request.POST.get(&quot;course_id&quot;, 0)</span><br><span class="line">        comments = request.POST.get(&quot;comments&quot;, &quot;&quot;)</span><br><span class="line">        if int(course_id) &gt; 0 and comments:</span><br><span class="line">            course_comments = CourseComments()</span><br><span class="line">            # get只能取出一条数据，如果有多条抛出异常。没有数据也抛异常</span><br><span class="line">            # filter取一个列表出来，queryset。没有数据返回空的queryset不会抛异常</span><br><span class="line">            course = Course.objects.get(id = int(course_id))</span><br><span class="line">            # 外键存入要存入对象</span><br><span class="line">            course_comments.course = course</span><br><span class="line">            course_comments.comments = comments</span><br><span class="line">            course_comments.user = request.user</span><br><span class="line">            course_comments.save()</span><br><span class="line">            return HttpResponse(&apos;&#123;&quot;status&quot;:&quot;success&quot;, &quot;msg&quot;:&quot;评论成功&quot;&#125;&apos;, content_type=&apos;application/json&apos;)</span><br><span class="line">        else:</span><br><span class="line">            return HttpResponse(&apos;&#123;&quot;status&quot;:&quot;fail&quot;, &quot;msg&quot;:&quot;评论失败&quot;&#125;&apos;, content_type=&apos;application/json&apos;)</span><br></pre></td></tr></table></figure><p>添加配套的url:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加课程评论,已经把参数放到post当中了</span></span><br><span class="line">path(<span class="string">'add_comment/'</span>, AddCommentsView.as_view(), name=<span class="string">"add_comment"</span>),</span><br></pre></td></tr></table></figure><p>js代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    //添加评论</span><br><span class="line">    $(&apos;#js-pl-submit&apos;).on(&apos;click&apos;, function()&#123;</span><br><span class="line">        var comments = $(&quot;#js-pl-textarea&quot;).val()</span><br><span class="line">        if(comments == &quot;&quot;)&#123;</span><br><span class="line">            alert(&quot;评论不能为空&quot;)</span><br><span class="line">            return</span><br><span class="line">        &#125;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            cache: false,</span><br><span class="line">            type: &quot;POST&quot;,</span><br><span class="line">            url:&quot;&#123;% url &apos;course:add_comment&apos; %&#125;&quot;,</span><br><span class="line">            data:&#123;&apos;course_id&apos;:&#123;&#123; course.id &#125;&#125;, &apos;comments&apos;:comments&#125;,</span><br><span class="line">            async: true,</span><br><span class="line">            beforeSend:function(xhr, settings)&#123;</span><br><span class="line">                xhr.setRequestHeader(&quot;X-CSRFToken&quot;, &quot;&#123;&#123; csrf_token &#125;&#125;&quot;);</span><br><span class="line">            &#125;,</span><br><span class="line">            success: function(data) &#123;</span><br><span class="line">                if(data.status == &apos;fail&apos;)&#123;</span><br><span class="line">                    if(data.msg == &apos;用户未登录&apos;)&#123;</span><br><span class="line">                        window.location.href=&quot;/login/&quot;;</span><br><span class="line">                    &#125;else&#123;</span><br><span class="line">                        alert(data.msg)</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;else if(data.status == &apos;success&apos;)&#123;</span><br><span class="line">                    window.location.reload();//刷新当前页面.</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>后端已经将all_comments传过来了。然后for循环输出。</p><p>本小节完毕对应commit:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8-6完成课程评论功能，添加评论并展示到页面。</span><br></pre></td></tr></table></figure><h2 id="8-7-相关课程推荐"><a href="#8-7-相关课程推荐" class="headerlink" title="8-7 相关课程推荐:"></a>8-7 相关课程推荐:</h2><blockquote><p>学过该课程的还学过</p></blockquote><p>CourseInfoView</p><p>添加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 选出学了这门课的学生关系</span></span><br><span class="line">        user_courses = UserCourse.objects.filter(course= course)</span><br><span class="line">        <span class="comment"># 从关系中取出user_id</span></span><br><span class="line">        user_ids = [user_course.user_id <span class="keyword">for</span> user_course <span class="keyword">in</span> user_courses]</span><br><span class="line">        <span class="comment"># 这些用户学了的课程,外键会自动有id，取到字段</span></span><br><span class="line">        all_user_courses = UserCourse.objects.filter(user_id__in=user_ids)</span><br><span class="line">        <span class="comment"># 取出所有课程id</span></span><br><span class="line">        course_ids = [all_user_course.course_id <span class="keyword">for</span> all_user_course <span class="keyword">in</span> all_user_courses]</span><br><span class="line">        <span class="comment"># 获取学过该课程用户学过的其他课程</span></span><br><span class="line">        relate_courses = Course.objects.filter(id__in=course_ids).order_by(<span class="string">"-click_nums"</span>)[:<span class="number">5</span>]</span><br><span class="line">        <span class="comment"># 是否收藏课程</span></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">"course-video.html"</span>, &#123;</span><br><span class="line">            <span class="string">"course"</span>: course,</span><br><span class="line">            <span class="string">"all_resources"</span>: all_resources,</span><br><span class="line">            <span class="string">"relate_courses"</span>:relate_courses,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><blockquote><p>重点: 两个下划线代表我传进来的是一个list，你进行遍历。</p></blockquote><p>comments也做同样处理</p><p>用户未登录，不要让他能点进view</p><p>如果使用的是方法型编程可以使用装饰器<code>loginrequired</code></p><p>而我们使用的是类。所以要继承。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.mixins <span class="keyword">import</span> LoginRequiredMixin</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CourseInfoView</span><span class="params">(LoginRequiredMixin, View)</span>:</span></span><br><span class="line">    login_url = <span class="string">'/login/'</span></span><br><span class="line">    redirect_field_name = <span class="string">'redirect_to'</span></span><br></pre></td></tr></table></figure><blockquote><p>8-7完成相关课程推荐功能，取出相关课程去除本身。课程评论login require鉴权添加。登录页面重定向回登录前浏览页面</p></blockquote><h2 id="8-8-课程播放页面"><a href="#8-8-课程播放页面" class="headerlink" title="8-8 课程播放页面"></a>8-8 课程播放页面</h2><p>将视频播放页面拷贝到template目录</p><p>使用开源库video js</p><p><img src="http://myphoto.mtianyan.cn/blog/180113/f0j8Ffec87.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180113/kCAHJkbAdb.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180113/26FehA9AAf.png?imageslim" alt="mark"></p><p>添加访问的url和view；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 课程视频播放页</span><br><span class="line">url(r&apos;^video/(?P&lt;video_id&gt;\d+)/$&apos;, VideoPlayView.as_view(), name=&quot;video_play&quot;),</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 播放视频的view</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VideoPlayView</span><span class="params">(LoginRequiredMixin, View)</span>:</span></span><br><span class="line">    login_url = <span class="string">'/login/'</span></span><br><span class="line">    redirect_field_name = <span class="string">'next'</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, video_id)</span>:</span></span><br><span class="line">        <span class="comment"># 此处的id为表默认为我们添加的值。</span></span><br><span class="line">        video = Video.objects.get(id=int(video_id))</span><br><span class="line">        <span class="comment"># 找到对应的course</span></span><br><span class="line">        course = video.lesson.course</span><br><span class="line">        <span class="comment"># 查询用户是否开始学习了该课，如果还未学习则，加入用户课程表</span></span><br><span class="line">        user_courses = UserCourse.objects.filter(user=request.user, course=course)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> user_courses:</span><br><span class="line">            user_course = UserCourse(user=request.user, course=course)</span><br><span class="line">            user_course.save()</span><br><span class="line">        <span class="comment"># 查询课程资源</span></span><br><span class="line">        all_resources = CourseResource.objects.filter(course=course)</span><br><span class="line">        <span class="comment"># 选出学了这门课的学生关系</span></span><br><span class="line">        user_courses = UserCourse.objects.filter(course=course)</span><br><span class="line">        <span class="comment"># 从关系中取出user_id</span></span><br><span class="line">        user_ids = [user_course.user_id <span class="keyword">for</span> user_course <span class="keyword">in</span> user_courses]</span><br><span class="line">        <span class="comment"># 这些用户学了的课程,外键会自动有id，取到字段</span></span><br><span class="line">        all_user_courses = UserCourse.objects.filter(user_id__in=user_ids)</span><br><span class="line">        <span class="comment"># 取出所有课程id</span></span><br><span class="line">        course_ids = [user_course.course_id <span class="keyword">for</span> user_course <span class="keyword">in</span> all_user_courses]</span><br><span class="line">        <span class="comment"># 获取学过该课程用户学过的其他课程</span></span><br><span class="line">        relate_courses = Course.objects.filter(id__in=course_ids).order_by(<span class="string">"-click_nums"</span>).exclude(id=course.id)[:<span class="number">4</span>]</span><br><span class="line">        <span class="comment"># 是否收藏课程</span></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">"course-play.html"</span>, &#123;</span><br><span class="line">            <span class="string">"course"</span>: course,</span><br><span class="line">            <span class="string">"all_resources"</span>: all_resources,</span><br><span class="line">            <span class="string">"relate_courses"</span>: relate_courses,</span><br><span class="line">            <span class="string">"video"</span>: video,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><p>title 与面包屑的修改</p><p>对应commit:</p><blockquote><p>第八章公开课模块全部完成，完结撒花。</p></blockquote><blockquote class="blockquote-center"><p>师者，所以传道受业解惑也 - 韩愈 </p></blockquote><div class="note "><p>上帝说得课程得有老师来讲！ 得有老师的详情 ！<br>老师应该可以收藏分享，我得看到老师是哪个机构，它讲了啥课。于是这章出现了。</p></div><p>授课讲师列表页。列表页右侧是讲师排行榜。列表页可以进行排序</p><p>点击课程讲师进入课程讲师的详情页: 分享 &amp; 点击收藏 右边是讲师所属课程机构</p><p>下面是讲师的课程详情。</p><h1 id="讲师相关功能实现"><a href="#讲师相关功能实现" class="headerlink" title="讲师相关功能实现"></a>讲师相关功能实现</h1><h2 id="9-1-讲师列表页"><a href="#9-1-讲师列表页" class="headerlink" title="9-1 讲师列表页"></a>9-1 讲师列表页</h2><p>teacherlist 和 teacher detail 一起放到template目录之下</p><p>继承base页面</p><p><img src="http://myphoto.mtianyan.cn/blog/180113/ljke7AEDjj.png?imageslim" alt="mark"></p><h3 id="书写view与配置url"><a href="#书写view与配置url" class="headerlink" title="书写view与配置url"></a>书写view与配置url</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 讲师列表</span><br><span class="line">path(&apos;teacher_list/&apos;, TeacherListView.as_view(), name=&quot;teacher_list&quot;),</span><br></pre></td></tr></table></figure><p>添加讲师的年龄字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">age = models.IntegerField(default=18, verbose_name=u&quot;年龄&quot;)</span><br></pre></td></tr></table></figure><h3 id="分页仿照orglist-注意object-list"><a href="#分页仿照orglist-注意object-list" class="headerlink" title="分页仿照orglist 注意object_list"></a>分页仿照orglist 注意object_list</h3><p>view</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 课程讲师列表页</span><br><span class="line">class TeacherListView(View):</span><br><span class="line">        def get(self, request):</span><br><span class="line">            all_teacher = Teacher.objects.all()</span><br><span class="line">            # 总共有多少老师使用count进行统计</span><br><span class="line">            teacher_nums = all_teacher.count()</span><br><span class="line">            # 对讲师进行分页</span><br><span class="line">            # 尝试获取前台get请求传递过来的page参数</span><br><span class="line">            # 如果是不合法的配置参数默认返回第一页</span><br><span class="line">            try:</span><br><span class="line">                page = request.GET.get(&apos;page&apos;, 1)</span><br><span class="line">            except PageNotAnInteger:</span><br><span class="line">                page = 1</span><br><span class="line">            # 这里指从allorg中取五个出来，每页显示5个</span><br><span class="line">            p = Paginator(all_teacher, 4, request=request)</span><br><span class="line">            teachers = p.page(page)</span><br><span class="line">            return render(request, &quot;teachers-list.html&quot;, &#123;</span><br><span class="line">            &quot;all_teacher&quot;:teachers,</span><br><span class="line">            &quot;teacher_nums&quot;:teacher_nums</span><br><span class="line">            &#125;)</span><br></pre></td></tr></table></figure><h3 id="排序-amp-讲师排行榜"><a href="#排序-amp-讲师排行榜" class="headerlink" title="排序 &amp; 讲师排行榜"></a>排序 &amp; 讲师排行榜</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sort = request.GET.get(&quot;sort&quot;, &quot;&quot;)</span><br><span class="line">           if sort:</span><br><span class="line">               if sort == &quot;hot&quot;:</span><br><span class="line">                   all_teacher = all_teacher.order_by(&quot;-click_nums&quot;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;sort&quot;:sort</span><br></pre></td></tr></table></figure><p>将sort return到前端。实现active</p><p>排行榜讲师</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 排行榜讲师</span><br><span class="line">rank_teacher = Teacher.objects.all().order_by(&quot;-fav_nums&quot;)[:5]</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180114/k03L400l4c.png?imageslim" alt="mark"></p><p>forloop.count 取出当前是第几次循环</p><h2 id="9-2-讲师详情页"><a href="#9-2-讲师详情页" class="headerlink" title="9-2 讲师详情页"></a>9-2 讲师详情页</h2><p><img src="http://myphoto.mtianyan.cn/blog/180114/H49BkEleaA.png?imageslim" alt="mark"></p><h3 id="配置url和view"><a href="#配置url和view" class="headerlink" title="配置url和view"></a>配置url和view</h3><p>列表页中配置入口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 教师详情页面</span><br><span class="line"></span><br><span class="line">class TeacherDetailView(View):</span><br><span class="line">    def get(self, request, teacher_id):</span><br><span class="line">        teacher = Teacher.objects.get(id = int(teacher_id))</span><br><span class="line">        all_course = teacher.course_set.all()</span><br><span class="line">        # 排行榜讲师</span><br><span class="line">        rank_teacher = Teacher.objects.all().order_by(&quot;-fav_nums&quot;)[:5]</span><br><span class="line"></span><br><span class="line">        has_fav_teacher = False</span><br><span class="line">        if UserFavorite.objects.filter(user=request.user, fav_type=3, fav_id= teacher.id):</span><br><span class="line">            has_fav_teacher = True</span><br><span class="line">        has_fav_org = False</span><br><span class="line">        if  UserFavorite.objects.filter(user=request.user, fav_type=2, fav_id= teacher.org.id):</span><br><span class="line">            has_fav_org = True</span><br><span class="line">        return render(request, &quot;teacher-detail.html&quot;, &#123;</span><br><span class="line">            &quot;teacher&quot;:teacher,</span><br><span class="line">            &quot;all_course&quot;:all_course,</span><br><span class="line">            &quot;rank_teacher&quot;:rank_teacher,</span><br><span class="line">            &quot;has_fav_teacher&quot;:has_fav_teacher,</span><br><span class="line">            &quot;has_fav_org&quot;:has_fav_org,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 访问机构讲师</span><br><span class="line">re_path(&apos;teacher/detail/(?P&lt;teacher_id&gt;\d+)/&apos;, TeacherDetailView.as_view(), name=&quot;teacher_detail&quot;),</span><br></pre></td></tr></table></figure><blockquote><p>第九章完结</p></blockquote><blockquote class="blockquote-center"><p>不以个人为中心, 但我们得有个个人中心。 </p></blockquote><div class="note default"><p>做一做全局导航，做一做个人中心，做一做全局搜索。<br>洒洒水啦。</p></div><h1 id="全局导航-amp-个人中心-amp-全局搜索"><a href="#全局导航-amp-个人中心-amp-全局搜索" class="headerlink" title="全局导航&amp;个人中心&amp;全局搜索"></a>全局导航&amp;个人中心&amp;全局搜索</h1><h2 id="配置全局导航"><a href="#配置全局导航" class="headerlink" title="配置全局导航"></a>配置全局导航</h2><p>让index页面也继承base页面</p><p>base页面的导航栏配置</p><p><img src="http://myphoto.mtianyan.cn/blog/180114/4LGd72eA4J.png?imageslim" alt="mark"></p><p>但是现在我们不知道当前是哪一个页面，因为后端没有传值过来</p><p>后台的每个view中添加current nav字段。然后向上传递到base页面</p><p>为了满足前台有current view的值，我们写的每个view都得加上这个字段。</p><p>小技巧：根据request的地址中的前几位来判断在哪一个区域之下</p><p>request.path</p><p>修改url中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 访问机构讲师</span><br><span class="line">url(r&apos;^org_teacher/(?P&lt;org_id&gt;\d+)/$&apos;, OrgTeacherView.as_view(), name=&quot;org_teacher&quot;),</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180114/kGG5I71CE1.png?imageslim" alt="mark"></p><h2 id="全局搜索功能开发"><a href="#全局搜索功能开发" class="headerlink" title="全局搜索功能开发"></a>全局搜索功能开发</h2><p>搜索跳到列表展示</p><p>courselist后加参数keywords</p><p>搜索的代码放在deco-common js中</p><p>课程的搜索功能：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 搜索功能</span><br><span class="line">search_keywords = request.GET.get(&apos;keywords&apos;,&apos;&apos;)</span><br><span class="line">if search_keywords:</span><br><span class="line">    # 在name字段进行操作,做like语句的操作。i代表不区分大小写</span><br><span class="line">    # or操作使用Q</span><br><span class="line">    all_course = all_course.filter(Q(name__icontains=search_keywords)|Q(desc__icontains=search_keywords)|Q(detail__icontains=search_keywords))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;search_keywords&quot;:search_keywords,</span><br></pre></td></tr></table></figure><h2 id="个人中心信息展示"><a href="#个人中心信息展示" class="headerlink" title="个人中心信息展示"></a>个人中心信息展示</h2><p>将用户中心相关的六个页面，全部拷贝进template</p><p>新建usercenter base页面</p><p><img src="http://myphoto.mtianyan.cn/blog/180114/3I2G5kaK1G.png?imageslim" alt="mark"></p><p>配置url</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># user app的url配置</span><br><span class="line">url(r&quot;^users/&quot;, include(&apos;users.urls&apos;, namespace=&quot;users&quot;)),</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># encoding: utf-8</span><br><span class="line">from .views import UserInfoView</span><br><span class="line"></span><br><span class="line">__author__ = &apos;mtianyan&apos;</span><br><span class="line">__date__ = &apos;2018/1/14 0014 04:00&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from django.conf.urls import url</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    # 用户信息</span><br><span class="line">    url(r&apos;^info/$&apos;, UserInfoView.as_view(), name=&quot;user_info&quot;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 用户个人信息view</span><br><span class="line">class UserInfoView(LoginRequiredMixin,View):</span><br><span class="line">    login_url = &apos;/login/&apos;</span><br><span class="line">    redirect_field_name = &apos;next&apos;</span><br><span class="line">    def get(self, request):</span><br><span class="line">        return render(request, &quot;usercenter-info.html&quot;, &#123;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><p>user app 下新建url</p><p>django自带的filter </p><p>request.user.mobile|default_if_none:’’</p><h2 id="修改密码和修改头像"><a href="#修改密码和修改头像" class="headerlink" title="修改密码和修改头像"></a>修改密码和修改头像</h2><p>新建url 和 view</p><p>小技巧:</p><blockquote><p>django的xadmin和admin当中，实际上是可以对form定义为文件的时候，是可以自动对上传的文件做保存的。<br>使用form的一个字段定义一个文件类型。把字段取出来就是内存中的文件。<br>赋值到user.image 就完成图片的一个存储。</p></blockquote><p>users/forms.py：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 用于文件上传，修改头像</span><br><span class="line">class UploadImageForm(forms.ModelForm):</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        model = UserProfile</span><br><span class="line">        fields = [&apos;image&apos;]</span><br></pre></td></tr></table></figure><p>实例化时，传进来是post 和 文件类型的request 存放地址</p><p><img src="http://myphoto.mtianyan.cn/blog/180114/Jabljb878I.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180114/Lb09b3457I.png?imageslim" alt="mark"></p><p>上传文件时通过一个form完成的。</p><p><img src="http://myphoto.mtianyan.cn/blog/180114/1IGKhbagJC.png?imageslim" alt="mark"></p><p>必须指明enctype，才能把文件类型传递到后台</p><p>url 和view</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 用户头像上传</span><br><span class="line">url(r&apos;^image/upload/$&apos;, UploadImageView.as_view(), name=&quot;image_upload&quot;),</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 用户上传图片的view:用于修改头像</span><br><span class="line">class UploadImageView(LoginRequiredMixin, View):</span><br><span class="line">    login_url = &apos;/login/&apos;</span><br><span class="line">    redirect_field_name = &apos;next&apos;</span><br><span class="line">    def post(self, request):</span><br><span class="line">        # 这时候用户上传的文件就已经被保存到imageform了</span><br><span class="line">        image_form = UploadImageForm(request.POST, request.FILES)</span><br><span class="line">        if image_form.is_valid():</span><br><span class="line">            pass</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180114/he98j111Lj.png?imageslim" alt="mark"></p><p>这里的name必须和form中的一样</p><p><img src="http://myphoto.mtianyan.cn/blog/180114/J6kBci76lA.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180114/3Bm665idcK.png?imageslim" alt="mark"></p><blockquote><p>所有验证通过的字段放在cleaned data</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 用户上传图片的view:用于修改头像</span><br><span class="line">class UploadImageView(LoginRequiredMixin, View):</span><br><span class="line">    login_url = &apos;/login/&apos;</span><br><span class="line">    redirect_field_name = &apos;next&apos;</span><br><span class="line">    def post(self, request):</span><br><span class="line">        # 这时候用户上传的文件就已经被保存到imageform了 ，为modelform添加instance值直接保存</span><br><span class="line">        image_form = UploadImageForm(request.POST, request.FILES, instance=request.user)</span><br><span class="line">        if image_form.is_valid():</span><br><span class="line">            image_form.save()</span><br><span class="line">            # # 取出cleaned data中的值,一个dict</span><br><span class="line">            # image = image_form.cleaned_data[&apos;image&apos;]</span><br><span class="line">            # request.user.image = image</span><br><span class="line">            # request.user.save()</span><br><span class="line">            return HttpResponse(&apos;&#123;&quot;status&quot;:&quot;success&quot;&#125;&apos;, content_type=&apos;application/json&apos;)</span><br><span class="line">        else:</span><br><span class="line">            return HttpResponse(&apos;&#123;&quot;status&quot;:&quot;fail&quot;&#125;&apos;, content_type=&apos;application/json&apos;)</span><br></pre></td></tr></table></figure><p>修改密码功能:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 在个人中心修改用户密码</span><br><span class="line">class UpdatePwdView(View):</span><br><span class="line">    def post(self, request):</span><br><span class="line">        modiypwd_form = ModifyPwdForm(request.POST)</span><br><span class="line">        if modiypwd_form.is_valid():</span><br><span class="line">            pwd1 = request.POST.get(&quot;password1&quot;, &quot;&quot;)</span><br><span class="line">            pwd2 = request.POST.get(&quot;password2&quot;, &quot;&quot;)</span><br><span class="line">            # 如果两次密码不相等，返回错误信息</span><br><span class="line">            if pwd1 != pwd2:</span><br><span class="line">                return HttpResponse(&apos;&#123;&quot;status&quot;:&quot;fail&quot;, &quot;msg&quot;:&quot;密码不一致&quot;&#125;&apos;, content_type=&apos;application/json&apos;)</span><br><span class="line">            # 如果密码一致</span><br><span class="line">            user =request.user</span><br><span class="line">            # 加密成密文</span><br><span class="line">            user.password = make_password(pwd2)</span><br><span class="line">            # save保存到数据库</span><br><span class="line">            user.save()</span><br><span class="line">            return HttpResponse(&apos;&#123;&quot;status&quot;:&quot;success&quot;&#125;&apos;, content_type=&apos;application/json&apos;)</span><br><span class="line">        # 验证失败说明密码位数不够。</span><br><span class="line">        else:</span><br><span class="line">            return HttpResponse(&apos;&#123;&quot;status&quot;:&quot;fail&quot;, &quot;msg&quot;:&quot;填写错误请检查&quot;&#125;&apos;, content_type=&apos;application/json&apos;)</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180114/CC02dfbG57.png?imageslim" alt="mark"></p><p>必须与我们的form中定义的一致</p><p>实现的js代码在deco-user.js</p><p>js文件中的url就一定不能用template的模板语言了</p><h2 id="修改邮箱提交form表单"><a href="#修改邮箱提交form表单" class="headerlink" title="修改邮箱提交form表单"></a>修改邮箱提交form表单</h2><p>有两个接口需要完成。点击获取验证码时，后台需要向用户新邮箱发送验证码。<br>邮箱如果出错，会返回错误信息。</p><p>输入了邮箱和验证码，验证是否匹配。</p><h3 id="获取验证码接口"><a href="#获取验证码接口" class="headerlink" title="获取验证码接口:"></a>获取验证码接口:</h3><p>配置url:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 专用于发送验证码的</span><br><span class="line">url(r&apos;^sendemail_code/$&apos;, SendEmailCodeView.as_view(), name=&quot;sendemail_code&quot;),</span><br></pre></td></tr></table></figure><p>新增邮箱验证码model类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SEND_CHOICES = (</span><br><span class="line">        (&quot;register&quot;, u&quot;注册&quot;),</span><br><span class="line">        (&quot;forget&quot;, u&quot;找回密码&quot;),</span><br><span class="line">        (&quot;update_email&quot;, u&quot;修改邮箱&quot;)</span><br><span class="line">    )</span><br><span class="line">           max_length=20,</span><br></pre></td></tr></table></figure><p>发送邮箱验证码view</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class SendEmailCodeView(LoginRequiredMixin, View):</span><br><span class="line">    def get(self,request):</span><br><span class="line">        # 取出需要发送的邮件</span><br><span class="line">        email = request.GET.get(&quot;email&quot;, &quot;&quot;)</span><br><span class="line"></span><br><span class="line">        # 不能是已注册的邮箱</span><br><span class="line">        if UserProfile.objects.filter(email=email):</span><br><span class="line">            return HttpResponse(&apos;&#123;&quot;email&quot;:&quot;邮箱已经存在&quot;&#125;&apos;, content_type=&apos;application/json&apos;)</span><br><span class="line">        send_register_eamil(email, &quot;update_email&quot;)</span><br><span class="line">        return HttpResponse(&apos;&#123;&quot;status&quot;:&quot;success&quot;&#125;&apos;, content_type=&apos;application/json&apos;)</span><br></pre></td></tr></table></figure><p>发送邮箱验证码的功能放在deco-user.js中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">elif send_type == &quot;update_email&quot;:</span><br><span class="line">    code = random_str(4)</span><br><span class="line">    email_title = &quot;mtianyan慕课小站 修改邮箱验证码&quot;</span><br><span class="line">    email_body = loader.render_to_string(</span><br><span class="line">        &quot;email_update_email.html&quot;,  # 需要渲染的html模板</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;active_code&quot;: code  # 参数</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    msg = EmailMessage(email_title, email_body, EMAIL_FROM, [email])</span><br><span class="line">    msg.content_subtype = &quot;html&quot;</span><br><span class="line">    send_status = msg.send()</span><br></pre></td></tr></table></figure><h3 id="修改邮箱的view"><a href="#修改邮箱的view" class="headerlink" title="修改邮箱的view"></a>修改邮箱的view</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 修改邮箱的view:</span><br><span class="line">class UpdateEmailView(LoginRequiredMixin, View):</span><br><span class="line">    login_url = &apos;/login/&apos;</span><br><span class="line">    redirect_field_name = &apos;next&apos;</span><br><span class="line">    def post(self, request):</span><br><span class="line">        email = request.POST.get(&quot;email&quot;, &quot;&quot;)</span><br><span class="line">        code = request.POST.get(&quot;code&quot;, &quot;&quot;)</span><br><span class="line"></span><br><span class="line">        existed_records = EmailVerifyRecord.objects.filter(email=email, code=code, send_type=&apos;update_email&apos;)</span><br><span class="line">        if existed_records:</span><br><span class="line">            user = request.user</span><br><span class="line">            user.email = email</span><br><span class="line">            user.save()</span><br><span class="line">            return HttpResponse(&apos;&#123;&quot;status&quot;:&quot;success&quot;&#125;&apos;, content_type=&apos;application/json&apos;)</span><br><span class="line">        else:</span><br><span class="line">            return HttpResponse(&apos;&#123;&quot;email&quot;:&quot;验证码无效&quot;&#125;&apos;, content_type=&apos;application/json&apos;)</span><br></pre></td></tr></table></figure><p>修改邮箱的url</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url(r&apos;^update_email/$&apos;, UpdateEmailView.as_view(), name=&quot;update_email&quot;),</span><br></pre></td></tr></table></figure><p>为userInfo view增加post方法。使用modelform完成直接提交</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def post(self,request):</span><br><span class="line">    # 不像用户咨询是一个新的。需要指明instance。不然无法修改，而是新增用户</span><br><span class="line">    user_info_form = UserInfoForm(request.POST, instance=request.user)</span><br><span class="line">    if user_info_form.is_valid():</span><br><span class="line">        user_info_form.save()</span><br></pre></td></tr></table></figure><p>user_info_form</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 用于个人中心修改个人信息</span><br><span class="line">class UserInfoForm(forms.ModelForm):</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        model = UserProfile</span><br><span class="line">        fields = [&apos;nick_name&apos;,&apos;gender&apos;,&apos;birthday&apos;,&apos;address&apos;,&apos;mobile&apos;]</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180114/ADFBmE7a6B.png?imageslim" alt="mark"></p><p>配置url和view</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 用户中心我的课程</span><br><span class="line">path(&apos;mycourse/&apos;, MyCourseView.as_view(), name=&quot;mycourse&quot;),</span><br></pre></td></tr></table></figure><p>usercenter base中添加链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 个人中心页我的课程</span><br><span class="line"></span><br><span class="line">class MyCourseView(LoginRequiredMixin, View):</span><br><span class="line">    login_url = &apos;/login/&apos;</span><br><span class="line">    redirect_field_name = &apos;next&apos;</span><br><span class="line"></span><br><span class="line">    def get(self, request):</span><br><span class="line">        user_courses = UserCourse.objects.filter(user=request.user)</span><br><span class="line">        return render(request, &quot;usercenter-mycourse.html&quot;, &#123;</span><br><span class="line">            &quot;user_courses&quot;:user_courses,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180114/8LAe6f1dl7.png?imageslim" alt="mark"></p><h3 id="配置url和view-1"><a href="#配置url和view-1" class="headerlink" title="配置url和view"></a>配置url和view</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 我收藏的课程机构</span><br><span class="line">path(&apos;myfav/org/&apos;, MyFavOrgView.as_view(), name=&quot;myfav_org&quot;),</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class MyFavOrgView(LoginRequiredMixin, View):</span><br><span class="line">    login_url = &apos;/login/&apos;</span><br><span class="line">    redirect_field_name = &apos;next&apos;</span><br><span class="line"></span><br><span class="line">    def get(self, request):</span><br><span class="line">        org_list = []</span><br><span class="line">        fav_orgs= UserFavorite.objects.filter(user=request.user, fav_type=2)</span><br><span class="line">        # 上面的fav_orgs只是存放了id。我们还需要通过id找到机构对象</span><br><span class="line">        for fav_org in fav_orgs:</span><br><span class="line">            # 取出fav_id也就是机构的id。</span><br><span class="line">            org_id = fav_org.fav_id</span><br><span class="line">            # 获取这个机构对象</span><br><span class="line">            org = CourseOrg.objects.get(id=org_id)</span><br><span class="line">            org_list.append(org)</span><br><span class="line">        return render(request, &quot;usercenter-fav-org.html&quot;, &#123;</span><br><span class="line">            &quot;org_list&quot;: org_list,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 我收藏的授课讲师</span><br><span class="line"></span><br><span class="line">class MyFavTeacherView(LoginRequiredMixin, View):</span><br><span class="line">    login_url = &apos;/login/&apos;</span><br><span class="line">    redirect_field_name = &apos;next&apos;</span><br><span class="line"></span><br><span class="line">    def get(self, request):</span><br><span class="line">        teacher_list = []</span><br><span class="line">        fav_teachers= UserFavorite.objects.filter(user=request.user, fav_type=3)</span><br><span class="line">        # 上面的fav_orgs只是存放了id。我们还需要通过id找到机构对象</span><br><span class="line">        for fav_teacher in fav_teachers:</span><br><span class="line">            # 取出fav_id也就是机构的id。</span><br><span class="line">            teacher_id = fav_teacher.fav_id</span><br><span class="line">            # 获取这个机构对象</span><br><span class="line">            teacher = Teacher.objects.get(id=teacher_id)</span><br><span class="line">            teacher_list.append(teacher)</span><br><span class="line">        return render(request, &quot;usercenter-fav-teacher.html&quot;, &#123;</span><br><span class="line">            &quot;teacher_list&quot;: teacher_list,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><p>url</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 我收藏的课程机构</span><br><span class="line">path(&apos;myfav/org/&apos;, MyFavOrgView.as_view(), name=&quot;myfav_org&quot;),</span><br><span class="line"></span><br><span class="line"># 我收藏的授课讲师</span><br><span class="line">path(&apos;myfav/teacher/&apos;, MyFavTeacherView.as_view(), name=&quot;myfav_teacher&quot;),</span><br></pre></td></tr></table></figure><h3 id="配置view和url"><a href="#配置view和url" class="headerlink" title="配置view和url"></a>配置view和url</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 我收藏的课程</span><br><span class="line"></span><br><span class="line">class MyFavCourseView(LoginRequiredMixin, View):</span><br><span class="line">    login_url = &apos;/login/&apos;</span><br><span class="line">    redirect_field_name = &apos;next&apos;</span><br><span class="line"></span><br><span class="line">    def get(self, request):</span><br><span class="line">        course_list = []</span><br><span class="line">        fav_courses = UserFavorite.objects.filter(user=request.user, fav_type=1)</span><br><span class="line">        # 上面的fav_orgs只是存放了id。我们还需要通过id找到机构对象</span><br><span class="line">        for fav_course in fav_courses:</span><br><span class="line">            # 取出fav_id也就是机构的id。</span><br><span class="line">            course_id = fav_course.fav_id</span><br><span class="line">            # 获取这个机构对象</span><br><span class="line">            course = Course.objects.get(id=course_id)</span><br><span class="line">            course_list.append(course)</span><br><span class="line">        return render(request, &quot;usercenter-fav-course.html&quot;, &#123;</span><br><span class="line">            &quot;course_list&quot;: course_list,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 我收藏的课程</span><br><span class="line">path(&apos;myfav/course/&apos;, MyFavCourseView.as_view(), name=&quot;myfav_course&quot;),</span><br></pre></td></tr></table></figure><h2 id="取消收藏"><a href="#取消收藏" class="headerlink" title="取消收藏"></a>取消收藏</h2><p>templates/usercenter-fav-course.html</p><p><img src="http://myphoto.mtianyan.cn/blog/180114/i92c3ffgJD.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180114/LjGjh0B3cL.png?imageslim" alt="mark"></p><p>取消收藏的代码在base页面中。三个js。</p><h2 id="我的消息页面"><a href="#我的消息页面" class="headerlink" title="我的消息页面"></a>我的消息页面</h2><p><img src="http://myphoto.mtianyan.cn/blog/180114/B4HKiBfla1.png?imageslim" alt="mark"></p><h3 id="配置url和view-2"><a href="#配置url和view-2" class="headerlink" title="配置url和view"></a>配置url和view</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 我收藏的课程</span><br><span class="line">path(&apos;my_message/&apos;, MyMessageView.as_view(), name=&quot;my_message&quot;),</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 我的消息</span><br><span class="line">class MyMessageView(LoginRequiredMixin, View):</span><br><span class="line">    login_url = &apos;/login/&apos;</span><br><span class="line">    redirect_field_name = &apos;next&apos;</span><br><span class="line"></span><br><span class="line">    def get(self, request):</span><br><span class="line">        all_message = UserMessage.objects.filter(user= request.user.id)</span><br><span class="line">        # 对课程机构进行分页</span><br><span class="line">        # 尝试获取前台get请求传递过来的page参数</span><br><span class="line">        # 如果是不合法的配置参数默认返回第一页</span><br><span class="line">        try:</span><br><span class="line">            page = request.GET.get(&apos;page&apos;, 1)</span><br><span class="line">        except PageNotAnInteger:</span><br><span class="line">            page = 1</span><br><span class="line">        # 这里指从allorg中取五个出来，每页显示5个</span><br><span class="line">        p = Paginator(all_message, 4)</span><br><span class="line">        messages = p.page(page)</span><br><span class="line">        return  render(request, &quot;usercenter-message.html&quot;, &#123;</span><br><span class="line">        &quot;messages&quot;:messages,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><h3 id="注册时发生欢迎消息"><a href="#注册时发生欢迎消息" class="headerlink" title="注册时发生欢迎消息"></a>注册时发生欢迎消息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 写入欢迎注册消息</span><br><span class="line">           user_message = UserMessage()</span><br><span class="line">           user_message.user = user_profile.id</span><br><span class="line">           user_message.message = &quot;欢迎注册mtianyan慕课小站!!&quot;</span><br><span class="line">           user_message.save()</span><br></pre></td></tr></table></figure><h3 id="页面顶部小喇叭"><a href="#页面顶部小喇叭" class="headerlink" title="页面顶部小喇叭"></a>页面顶部小喇叭</h3><p>所有页面都要读取一个共同的变量：未读消息的数量。我们需要向request中注入这个变量<br>所有页面都有request.user对象。所以我们在userprofile中自定义方法，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 获取用户未读消息的数量</span><br><span class="line">def unread_nums(self):</span><br><span class="line">    from operation.models import UserMessage</span><br><span class="line">    return  UserMessage.objects.filter(user=self.id).count()</span><br></pre></td></tr></table></figure><blockquote class="blockquote-center"><p>泰山不让土壤，故能成其大；河海不择细流，故能就其深。 </p></blockquote><div class="note success"><p>细节决定成败，大体的网站已经做好了。<br>佛曰：给我把细节再搞一搞</p></div><h1 id="首页-全局功能细节和404以及500页面配置"><a href="#首页-全局功能细节和404以及500页面配置" class="headerlink" title="首页,全局功能细节和404以及500页面配置"></a>首页,全局功能细节和404以及500页面配置</h1><h2 id="登出和点击数以及收藏数完善"><a href="#登出和点击数以及收藏数完善" class="headerlink" title="登出和点击数以及收藏数完善"></a>登出和点击数以及收藏数完善</h2><h3 id="退出登录"><a href="#退出登录" class="headerlink" title="退出登录"></a>退出登录</h3><p>Python3+django2.0.1下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class LogoutView(View):</span><br><span class="line">    def get(self, request):</span><br><span class="line">        # django自带的logout</span><br><span class="line">        logout(request)</span><br><span class="line">        # 重定向到首页,</span><br><span class="line">        return HttpResponseRedirect(reverse(&quot;index&quot;))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 退出功能url</span><br><span class="line">path(&apos;logout/&apos;, LogoutView.as_view(), name=&quot;logout&quot;),</span><br></pre></td></tr></table></figure><h3 id="点击数加1"><a href="#点击数加1" class="headerlink" title="点击数加1"></a>点击数加1</h3><p>CourseInfoView学习人数加1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">course.students += 1</span><br><span class="line">course.save()</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180115/kDd20GdFDb.png?imageslim" alt="mark"></p><p>TeacherDetailView：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">teacher.click_nums +=1</span><br><span class="line">teacher.save()</span><br></pre></td></tr></table></figure><p>OrgHomeView</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">course_org.click_nums +=1</span><br><span class="line">        course_org.save()</span><br></pre></td></tr></table></figure><p>收藏数统计</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">exist_records.delete()</span><br><span class="line">if int(type) == 1:</span><br><span class="line">    course = Course.objects.get(id=int(id))</span><br><span class="line">    course.fav_nums -=1</span><br><span class="line">    if course.fav_nums &lt; 0:</span><br><span class="line">        course.fav_nums = 0</span><br><span class="line">    course.save()</span><br><span class="line">elif int(type) == 2:</span><br><span class="line">    org = CourseOrg.objects.get(id=int(id))</span><br><span class="line">    org.fav_nums -= 1</span><br><span class="line">    if org.fav_nums &lt; 0:</span><br><span class="line">        org.fav_nums = 0</span><br><span class="line">    org.save()</span><br><span class="line">elif int(type) == 3:</span><br><span class="line">    teacher = Teacher.objects.get(id=int(id))</span><br><span class="line">    teacher.fav_nums -=1</span><br><span class="line">    if teacher.fav_nums &lt; 0:</span><br><span class="line">        teacher.fav_nums = 0</span><br><span class="line">    teacher.save()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">user_fav.save()</span><br><span class="line"></span><br><span class="line">               if int(type) == 1:</span><br><span class="line">                   course = Course.objects.get(id=int(id))</span><br><span class="line">                   course.fav_nums += 1</span><br><span class="line">                   course.save()</span><br><span class="line">               elif int(type) == 2:</span><br><span class="line">                   org = CourseOrg.objects.get(id=int(id))</span><br><span class="line">                   org.fav_nums += 1</span><br><span class="line">                   org.save()</span><br><span class="line">               elif int(type) == 3:</span><br><span class="line">                   teacher = Teacher.objects.get(id=int(id))</span><br><span class="line">                   teacher.fav_nums += 1</span><br><span class="line">                   teacher.save()</span><br></pre></td></tr></table></figure><p>注意负数的处理：</p><p>修改消息已读</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 用户进入个人中心消息页面，清空未读消息记录</span><br><span class="line">all_unread_messages = UserMessage.objects.filter(user=request.user.id, has_read=False)</span><br><span class="line">for unread_message in all_unread_messages:</span><br><span class="line">    unread_message.has_read = True</span><br><span class="line">    unread_message.save()</span><br></pre></td></tr></table></figure><p>改进取出未读数字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return  UserMessage.objects.filter(has_read=False, user=self.id).count()</span><br></pre></td></tr></table></figure><h2 id="首页功能开发"><a href="#首页功能开发" class="headerlink" title="首页功能开发"></a>首页功能开发</h2><p>轮播图</p><p>公开课</p><p>授课机构</p><p>新建view</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 首页view</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexView</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="comment"># 取出轮播图</span></span><br><span class="line">        all_banner = Banner.objects.all().order_by(<span class="string">'index'</span>)[:<span class="number">5</span>]</span><br><span class="line">        <span class="comment"># 正常位课程</span></span><br><span class="line">        courses = Course.objects.filter(is_banner=<span class="keyword">False</span>)[:<span class="number">6</span>]</span><br><span class="line">        <span class="comment"># 轮播图课程取三个</span></span><br><span class="line">        banner_courses = Course.objects.filter(is_banner=<span class="keyword">True</span>)[:<span class="number">3</span>]</span><br><span class="line">        <span class="comment"># 课程机构</span></span><br><span class="line">        course_orgs = CourseOrg.objects.all()[:<span class="number">15</span>]</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'index.html'</span>, &#123;</span><br><span class="line">            <span class="string">"all_banner"</span>:all_banner,</span><br><span class="line">            <span class="string">"courses"</span>:courses,</span><br><span class="line">            <span class="string">"banner_courses"</span>:banner_courses,</span><br><span class="line">            <span class="string">"course_orgs"</span>:course_orgs,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><p>为课程添加字段: <code>isbanner</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">is_banner = models.BooleanField(default=<span class="keyword">False</span>, verbose_name=<span class="string">u"是否轮播"</span>)</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">url配置:</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">path(<span class="string">''</span>, IndexView.as_view(), name=  <span class="string">"index"</span>)</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180115/8IDjg5e8K0.png?imageslim" alt="mark"></p><p>使用django自带模板标签<code>add</code>添加2</p><p>为<code>courseOrg</code>添加字段<code>tag</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tag = models.CharField(max_length=<span class="number">10</span>, default= <span class="string">u"国内名校"</span>,verbose_name=<span class="string">u"机构标签"</span>)</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180115/468aAaiajk.png?imageslim" alt="mark"></p><p>template内建标签被五整除</p><h2 id="配置全局404和500"><a href="#配置全局404和500" class="headerlink" title="配置全局404和500"></a>配置全局404和500</h2><p>Mxonline3/urls.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局404页面配置</span></span><br><span class="line">handler404 = <span class="string">'users.views.page_not_found'</span></span><br></pre></td></tr></table></figure><p>users/views.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 404对应处理view</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">page_not_found</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">from</span> django.shortcuts <span class="keyword">import</span>  render_to_response</span><br><span class="line">    response = render_to_response(<span class="string">"404.html"</span>, &#123;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment"># 设置response的状态码</span></span><br><span class="line">    response.status_code = <span class="number">404</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><p>Debug = True 404是不起作用的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALLOWED_HOSTS = [&apos;*&apos;]</span><br></pre></td></tr></table></figure><p>在debug为false情况下。</p><p>我们在访问media的时候配置过用serve来取<br>告诉它访问media的时候去哪个路径下找</p><p>debug为True</p><p>会自动前往STATICFILES——DIRS取文件的</p><p>一旦debug改为false，django就不会代管你的静态文件，</p><p>一般静态文件通过第三方http服务器代理转发。</p><p>nignx 和 Apache都会自动代理这些静态文件</p><p>方法1：我们自己url响应我们的static</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">STATIC_ROOT = os.path.join(BASE_DIR, &apos;static&apos;)</span><br></pre></td></tr></table></figure><h1 id="常见web攻击及防范"><a href="#常见web攻击及防范" class="headerlink" title="常见web攻击及防范"></a>常见web攻击及防范</h1><h2 id="sql注入攻击与防范"><a href="#sql注入攻击与防范" class="headerlink" title="sql注入攻击与防范"></a>sql注入攻击与防范</h2><p>sql注入的危害</p><p><img src="http://myphoto.mtianyan.cn/blog/180115/C2H1D6mBhg.png?imageslim" alt="mark"></p><p>对于用户的输入进行合法性判断。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class LoginUnsafeView(View):</span><br><span class="line">    def get(self, request):</span><br><span class="line">        return render(request, &quot;login.html&quot;, &#123;&#125;)</span><br><span class="line">    def post(self, request):</span><br><span class="line">        user_name = request.POST.get(&quot;username&quot;, &quot;&quot;)</span><br><span class="line">        pass_word = request.POST.get(&quot;password&quot;, &quot;&quot;)</span><br><span class="line"></span><br><span class="line">        import MySQLdb</span><br><span class="line">        conn = MySQLdb.connect(host=&apos;127.0.0.1&apos;, user=&apos;root&apos;, passwd=&apos;root&apos;, db=&apos;mxonline&apos;, charset=&apos;utf8&apos;)</span><br><span class="line">        cursor = conn.cursor()</span><br><span class="line">        sql_select = &quot;select * from users_userprofile where email=&apos;&#123;0&#125;&apos; and password=&apos;&#123;1&#125;&apos;&quot;.format(user_name, pass_word)</span><br><span class="line"></span><br><span class="line">        result = cursor.execute(sql_select)</span><br><span class="line">        for row in cursor.fetchall():</span><br><span class="line">            # 查询到用户</span><br><span class="line">            pass</span><br><span class="line">        print &apos;hello&apos;</span><br><span class="line"></span><br><span class="line">urls.py</span><br><span class="line">from users.views import LoginUnsafeView</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(&apos;^login/&apos;, LoginUnsafeView.as_view(), name=&apos;login&apos;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>参数中加入sql语句拼接字符串使之为真。</p><p>使用django的orm，它已经对这些做了处理</p><h2 id="xss攻击"><a href="#xss攻击" class="headerlink" title="xss攻击"></a>xss攻击</h2><p>xss跨站脚本攻击(Cross Site Scripting)的危害</p><p><img src="http://myphoto.mtianyan.cn/blog/180115/8EjD3Ik9Gj.png?imageslim" alt="mark"></p><p>正常流程</p><p><img src="http://myphoto.mtianyan.cn/blog/180115/4F1KK3IaaI.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180115/cB5cDiKFdJ.png?imageslim" alt="mark"></p><p>当传入iPhone6时，这个字符会被显示到页面中。</p><p><img src="http://myphoto.mtianyan.cn/blog/180115/kfLLLEGa19.png?imageslim" alt="mark"></p><p>将这段代码改成js代码</p><p><img src="http://myphoto.mtianyan.cn/blog/180115/d42ef1h5HC.png?imageslim" alt="mark"></p><p>黑客拿到你的cookie信息。然后伪装成用户。</p><p>Xss攻击防范</p><p><img src="http://myphoto.mtianyan.cn/blog/180115/03jDakfC5A.png?imageslim" alt="mark"></p><h2 id="crsf攻击与防护"><a href="#crsf攻击与防护" class="headerlink" title="crsf攻击与防护"></a>crsf攻击与防护</h2><p>crsf跨站请求伪造(Cross-site request forgery)的危害</p><p><img src="http://myphoto.mtianyan.cn/blog/180115/6Ikm6edG47.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180115/043H5F0K8G.png?imageslim" alt="mark"></p><p>用户并没有向a请求，而是访问了b。b要求用户访问a的。<br>原因：用户向a的每次请求都会带上session id</p><p>图片中插入。</p><p>提交form表单必须添加crsf token</p><p>攻击网站无法生成crsf token</p><h1 id="xadmin的进阶开发"><a href="#xadmin的进阶开发" class="headerlink" title="xadmin的进阶开发"></a>xadmin的进阶开发</h1><h2 id="static目录问题。"><a href="#static目录问题。" class="headerlink" title="static目录问题。"></a>static目录问题。</h2><p>xadmin的static文件在自己的目录下所以我们找不到</p><p>1- url下的static路由配置注释掉<br>2- setting中的StaticRoot注释掉</p><p><img src="http://myphoto.mtianyan.cn/blog/180115/blD3Cgd9jG.png?imageslim" alt="mark"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from xadmin.plugins.auth import UserAdmin</span><br><span class="line"></span><br><span class="line">class UserProfileAdmin(UserAdmin):</span><br><span class="line">pass</span><br><span class="line"></span><br><span class="line">xadmin.site.register(UserProfile,UserProfileAdmin)</span><br><span class="line"></span><br><span class="line">from django.contrib.auth.models import User</span><br><span class="line">xadmin.site.unregister(User)</span><br></pre></td></tr></table></figure><p>点进UserProfileAdmin中可以看官方是怎么实现布局的，我们可以重载</p><p>get_form_layout</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">自定义的显示方式</span><br></pre></td></tr></table></figure><p>get_user_model 获取用户: User = </p><p>django权限赋值方式：赋给用户。没一个表的增删改查。</p><p>auth_permission 组权限</p><h2 id="自定义icon"><a href="#自定义icon" class="headerlink" title="自定义icon"></a>自定义icon</h2><p>model_icon = ‘fa fa-group’</p><p>xadmin/static/xadmin/vendor/font-awesome</p><p>官网下载然后替换css和font</p><h2 id="默认排序"><a href="#默认排序" class="headerlink" title="默认排序"></a>默认排序</h2><p>adminx中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ordering = [&apos;-click_nums&apos;]</span><br><span class="line">readonly_fields =[&apos;click_nums&apos;,&apos;fav_nums&apos;]</span><br><span class="line">    exclude = [&apos;fav_nums&apos;]</span><br></pre></td></tr></table></figure><p>两个字段是冲突的。</p><h2 id="下拉框搜索："><a href="#下拉框搜索：" class="headerlink" title="下拉框搜索："></a>下拉框搜索：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">relfield_style = &apos;fk-ajax&apos;</span><br></pre></td></tr></table></figure><p>当有外键指向他，会以ajax方式加载</p><p>数据量过大时很有用</p><h2 id="inlines添加数据。"><a href="#inlines添加数据。" class="headerlink" title="inlines添加数据。"></a>inlines添加数据。</h2><p>在一个页面直接完成章节。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 课程直接添加章节</span><br><span class="line">class LessonInline(object):</span><br><span class="line">    model = Lesson</span><br><span class="line">    extra = 0</span><br><span class="line"></span><br><span class="line">        # 课程直接添加章节</span><br><span class="line">    inlines = [LessonInline]</span><br></pre></td></tr></table></figure><p>没法完成在章节中再嵌套视频<br>但是可以有多个inline。在添加课程时添加课程资源</p><h2 id="一张表分两个model来管理"><a href="#一张表分两个model来管理" class="headerlink" title="一张表分两个model来管理"></a>一张表分两个model来管理</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BannerCourse</span><span class="params">(Course)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">"轮播课程"</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line">        proxy = <span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>设置proxy = true会具有model的功能，但不会生成表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Course的admin管理器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BannerCourseAdmin</span><span class="params">(object)</span>:</span></span><br><span class="line">    list_display = [</span><br><span class="line">        <span class="string">'name'</span>,</span><br><span class="line">        <span class="string">'desc'</span>,</span><br><span class="line">        <span class="string">'detail'</span>,</span><br><span class="line">        <span class="string">'degree'</span>,</span><br><span class="line">        <span class="string">'learn_times'</span>,</span><br><span class="line">        <span class="string">'students'</span>]</span><br><span class="line">    search_fields = [<span class="string">'name'</span>, <span class="string">'desc'</span>, <span class="string">'detail'</span>, <span class="string">'degree'</span>, <span class="string">'students'</span>]</span><br><span class="line">    list_filter = [</span><br><span class="line">        <span class="string">'name'</span>,</span><br><span class="line">        <span class="string">'desc'</span>,</span><br><span class="line">        <span class="string">'detail'</span>,</span><br><span class="line">        <span class="string">'degree'</span>,</span><br><span class="line">        <span class="string">'learn_times'</span>,</span><br><span class="line">        <span class="string">'students'</span>]</span><br><span class="line">    ordering = [<span class="string">'-click_nums'</span>]</span><br><span class="line">    readonly_fields =[<span class="string">'click_nums'</span>]</span><br><span class="line">    exclude = [<span class="string">'fav_nums'</span>]</span><br><span class="line">    <span class="comment"># 课程直接添加章节</span></span><br><span class="line">    inlines = [LessonInline,CourseResourceInline]</span><br><span class="line"><span class="comment"># 将管理器与model进行注册关联</span></span><br><span class="line">xadmin.site.register(BannerCourse, BannerCourseAdmin)</span><br></pre></td></tr></table></figure><p>admin中重载queryset方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 过滤列表中的数据</span><br><span class="line">def queryset(self):</span><br><span class="line">    qs = super(BannerCourseAdmin, self).queryset()</span><br><span class="line">    qs = qs.filter(is_banner=True)</span><br><span class="line">    return qs</span><br><span class="line"># 过滤列表中的数据</span><br><span class="line">def queryset(self):</span><br><span class="line">    qs = super(CourseAdmin, self).queryset()</span><br><span class="line">    qs = qs.filter(is_banner=False)</span><br><span class="line">    return qs</span><br></pre></td></tr></table></figure><h2 id="xamdin其他常见功能："><a href="#xamdin其他常见功能：" class="headerlink" title="xamdin其他常见功能："></a>xamdin其他常见功能：</h2><h3 id="可以在列表上快速修改内容、"><a href="#可以在列表上快速修改内容、" class="headerlink" title="可以在列表上快速修改内容、"></a>可以在列表上快速修改内容、</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list_editable = [ &apos;degree&apos;,&apos;desc&apos;,]</span><br></pre></td></tr></table></figure><h3 id="自定义函数作为列"><a href="#自定义函数作为列" class="headerlink" title="自定义函数作为列"></a>自定义函数作为列</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def get_zj_nums(self):</span><br><span class="line">    return self.lesson_set.all().count()</span><br><span class="line">get_zj_nums.short_description = &quot;章节数&quot;</span><br></pre></td></tr></table></figure><h3 id="显示自定义的html代码"><a href="#显示自定义的html代码" class="headerlink" title="显示自定义的html代码"></a>显示自定义的html代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  def go_to(self):</span><br><span class="line">    from django.utils.safestring import mark_safe</span><br><span class="line">    # 如果不mark safe。会对其进行转义</span><br><span class="line">    return  mark_safe(&quot;&lt;a href=&apos;http://blog.mtianyan.cn&apos;&gt;跳转&lt;/&gt;&quot;)</span><br><span class="line">go_to.short_description = &quot;跳转&quot;</span><br></pre></td></tr></table></figure><h3 id="xadmin的工具-refresh"><a href="#xadmin的工具-refresh" class="headerlink" title="xadmin的工具: refresh"></a>xadmin的工具: refresh</h3><p>xadmin/plugins/refresh.py</p><p>列表页定时刷新的工具</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">refresh_times = [3,5]</span><br></pre></td></tr></table></figure><h3 id="字段联动"><a href="#字段联动" class="headerlink" title="字段联动"></a>字段联动</h3><p>应用场景: 新增一门课程之后，courseorg的课程数+1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">def save_models(self):</span><br><span class="line">      # 在保存课程的时候统计课程机构的课程数</span><br><span class="line">      # 字段联动</span><br><span class="line">      obj = self.new_obj</span><br><span class="line">      # 新增课程还没有保存，统计的课程数少一个</span><br><span class="line">      obj.save()</span><br><span class="line">      # 必须确定存在。</span><br><span class="line">      if obj.course_org is not None:</span><br><span class="line">          # obj实际是一个course对象</span><br><span class="line">          course_org = obj.course_org</span><br><span class="line">          course_org.course_nums = Course.objects.filter(course_org = course_org).count()</span><br><span class="line">          course_org.save()</span><br></pre></td></tr></table></figure><p>不用在课程里面添加章节数。</p><h2 id="xadmin自行探究"><a href="#xadmin自行探究" class="headerlink" title="xadmin自行探究"></a>xadmin自行探究</h2><ul><li>local 语言包</li><li>migration 数据表的记录</li><li>plugins 每一个后台页面都是一个plugin 插件机制</li><li>static文件。js css</li><li>template xadmin自己用到的html文件</li><li>对django admin的封装</li></ul><h3 id="下载源码包"><a href="#下载源码包" class="headerlink" title="下载源码包"></a>下载源码包</h3><p>添加插件使得可以识别ueditor field</p><p>记得在init中注册。</p><p><img src="http://myphoto.mtianyan.cn/blog/180115/jIJ1A5EijI.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180115/kF99c72b0K.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180115/lcH1c4Bb11.png?imageslim" alt="mark"></p><p>关闭自动转义。</p><h2 id="导入excel"><a href="#导入excel" class="headerlink" title="导入excel"></a>导入excel</h2><ol><li>如何注入导入excel代码到菜单</li><li>如何只在课程列表显示</li><li>如何接收文件对文件进行处理</li></ol><p><img src="http://myphoto.mtianyan.cn/blog/180115/H92HC8eJ1D.png?imageslim" alt="mark"></p><p>adminx 文件中的变量覆盖插件内部变量。</p><p>只需要重载<code>block_top_toolbar</code>，就会把这个放到页面里面<br>默认使用bootstrap</p><p><code>init</code>确定是否启用插件，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def post(self, request, *args , **kwargs):</span><br><span class="line">    if &apos;excel&apos; in request.FILES:</span><br><span class="line">        pass</span><br></pre></td></tr></table></figure><p>adminx中重写post方法。上传文件会被放在<code>request.FILES</code>中。</p><p>中间pass步骤不管做什么事情，都要最后return父类的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return super(CourseAdmin, self).post(request, args, kwargs)</span><br></pre></td></tr></table></figure><h1 id="把项目部署上线"><a href="#把项目部署上线" class="headerlink" title="把项目部署上线"></a>把项目部署上线</h1><p>nginx + uwsgi(Python) Tomcat(java)</p><p>端口转发。负载均衡。<br>静态文件交给nginx转发。静态文件代理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nginx</span><br><span class="line">ps aux | grep nginx</span><br><span class="line">ifconfig</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mysql-server</span><br><span class="line">提示:输入用户名密码</span><br><span class="line">ps aux | grep mysql</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">showdatabases</span><br></pre></td></tr></table></figure><p>修改<code>bind address</code>为<code>0.0.0.0</code> 是为了让win进行连接。真正部署尽量127.0.0.1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class="line"></span><br><span class="line">sudo service mysql restart</span><br><span class="line"></span><br><span class="line">ifconfig</span><br></pre></td></tr></table></figure><p>然后Navicat中连接会报错</p><p>你不用localhost(127)。使用本机ip都是不行的。</p><p><code>*.*</code>里面是可以指定某一张表。root用户名 IP地址<br>通过该IP地址过来的root用户，通过密码才可以访问所有表。<br>‘%’表示所有ip可以访问。</p><p>mysql下运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;tp131861&apos; WITH GRANT OPTION;</span><br><span class="line"></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><ol><li>安装pip</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://bootstrap.pypa.io/get-pip.py  --no-check-certificate</span><br><span class="line">sudo python get-pip.py</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenv</span><br><span class="line">pip install virtualenvwrapper</span><br><span class="line"></span><br><span class="line">workon</span><br><span class="line"></span><br><span class="line">vim ~/.bashrc</span><br><span class="line"></span><br><span class="line">export WORKON_HOME=$HOME/.virtualenvs</span><br><span class="line">source /usr/local/bin/virtualenvwrapper.sh</span><br><span class="line"></span><br><span class="line">source ~/.bashrc</span><br><span class="line"></span><br><span class="line">workon mxonline2</span><br><span class="line"></span><br><span class="line">pip freeze &gt; requirements.txt</span><br><span class="line"></span><br><span class="line">pip install -r requirements.txt</span><br><span class="line"></span><br><span class="line">sudo pip install virtualenvwrapper</span><br><span class="line"></span><br><span class="line">sudo apt-get install libmysqlclient-dev</span><br><span class="line"></span><br><span class="line">pip install -i https://pypi.douban.com/simple pillow==3.4.1</span><br><span class="line"></span><br><span class="line">pip install uwsgi</span><br><span class="line"></span><br><span class="line">uwsgi --http :8000 --module MxOnline.wsgi(暂时不管报错)</span><br><span class="line"></span><br><span class="line">python manage.py runserver</span><br><span class="line"></span><br><span class="line">数据库设置</span><br><span class="line"></span><br><span class="line">数据传输</span><br></pre></td></tr></table></figure><p>sudo ln -s /mnt/Mxonline2/uc_nginx.conf /etc/nginx/conf.d/</p><p>```</p><p>将setting中 static路径指明。然后将staticDIRS注释掉</p><p>项目根目录创建conf文件夹。然后创建uwsgi.ini.</p><p><code>uwsgi -i /mnt/Mxonline2/conf/uwsgi.ini &amp;</code></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;「比更大还更大」(Bigger than Bigger)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;note &quot;&gt;&lt;ul&gt;
&lt;li&gt;初级复习: 写一个留言板来复习Django基础知识&lt;/li&gt;
&lt;li&gt;项目实战: 使用Django+xadmin搭建一个在线教育网站&lt;br&gt;最终成果: &lt;a href=&quot;http://mxonline.mtianyan.cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://mxonline.mtianyan.cn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GitHub代码仓库:&lt;br&gt;&lt;a href=&quot;https://github.com/mtianyan/Mxonline2&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/mtianyan/Mxonline2&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Django+Xadmin打造在线教育平台" scheme="http://blog.mtianyan.cn/categories/Django-Xadmin%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E5%B9%B3%E5%8F%B0/"/>
    
    
      <category term="Python" scheme="http://blog.mtianyan.cn/tags/Python/"/>
    
      <category term="Django" scheme="http://blog.mtianyan.cn/tags/Django/"/>
    
      <category term="在线教育平台" scheme="http://blog.mtianyan.cn/tags/%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E5%B9%B3%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>强力Django+杀手级Xadmin打造在线教育平台(十三)</title>
    <link href="http://blog.mtianyan.cn/post/743baaa3.html"/>
    <id>http://blog.mtianyan.cn/post/743baaa3.html</id>
    <published>2018-01-16T14:49:17.000Z</published>
    <updated>2018-02-02T12:40:13.960Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>大渣好 我系谷天绿 我四渣渣辉 </p></blockquote><div class="note success"><p>给大家推荐一款糙好玩的框架，探挽xadmin，淋没有挽过的船新版本<br>挤需体验三番钟,里一定会刚我一样爱象节款游戏</p></div><a id="more"></a><h1 id="xadmin的进阶开发"><a href="#xadmin的进阶开发" class="headerlink" title="xadmin的进阶开发"></a>xadmin的进阶开发</h1><h2 id="static目录问题。"><a href="#static目录问题。" class="headerlink" title="static目录问题。"></a>static目录问题。</h2><p>xadmin的static文件在自己的目录下所以我们找不到</p><p>1- url下的static路由配置注释掉<br>2- setting中的StaticRoot注释掉</p><p><img src="http://myphoto.mtianyan.cn/blog/180115/blD3Cgd9jG.png?imageslim" alt="mark"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from xadmin.plugins.auth import UserAdmin</span><br><span class="line"></span><br><span class="line">class UserProfileAdmin(UserAdmin):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">xadmin.site.register(UserProfile,UserProfileAdmin)</span><br><span class="line"></span><br><span class="line">from django.contrib.auth.models import User</span><br><span class="line">xadmin.site.unregister(User)</span><br></pre></td></tr></table></figure><p>点进UserProfileAdmin中可以看官方是怎么实现布局的，我们可以重载</p><p>get_form_layout</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">自定义的显示方式</span><br></pre></td></tr></table></figure><p>get_user_model 获取用户: User = </p><p>django权限赋值方式：赋给用户。没一个表的增删改查。</p><p>auth_permission 组权限</p><h2 id="自定义icon"><a href="#自定义icon" class="headerlink" title="自定义icon"></a>自定义icon</h2><p>model_icon = ‘fa fa-group’</p><p>xadmin/static/xadmin/vendor/font-awesome</p><p>官网下载然后替换css和font</p><h2 id="默认排序"><a href="#默认排序" class="headerlink" title="默认排序"></a>默认排序</h2><p>adminx中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ordering = [&apos;-click_nums&apos;]</span><br><span class="line">readonly_fields =[&apos;click_nums&apos;,&apos;fav_nums&apos;]</span><br><span class="line">    exclude = [&apos;fav_nums&apos;]</span><br></pre></td></tr></table></figure><p>两个字段是冲突的。</p><h2 id="下拉框搜索："><a href="#下拉框搜索：" class="headerlink" title="下拉框搜索："></a>下拉框搜索：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">relfield_style = &apos;fk-ajax&apos;</span><br></pre></td></tr></table></figure><p>当有外键指向他，会以ajax方式加载</p><p>数据量过大时很有用</p><h2 id="inlines添加数据。"><a href="#inlines添加数据。" class="headerlink" title="inlines添加数据。"></a>inlines添加数据。</h2><p>在一个页面直接完成章节。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 课程直接添加章节</span><br><span class="line">class LessonInline(object):</span><br><span class="line">    model = Lesson</span><br><span class="line">    extra = 0</span><br><span class="line"></span><br><span class="line">        # 课程直接添加章节</span><br><span class="line">    inlines = [LessonInline]</span><br></pre></td></tr></table></figure><p>没法完成在章节中再嵌套视频<br>但是可以有多个inline。在添加课程时添加课程资源</p><h2 id="一张表分两个model来管理"><a href="#一张表分两个model来管理" class="headerlink" title="一张表分两个model来管理"></a>一张表分两个model来管理</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BannerCourse</span><span class="params">(Course)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">"轮播课程"</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line">        proxy = <span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>设置proxy = true会具有model的功能，但不会生成表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Course的admin管理器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BannerCourseAdmin</span><span class="params">(object)</span>:</span></span><br><span class="line">    list_display = [</span><br><span class="line">        <span class="string">'name'</span>,</span><br><span class="line">        <span class="string">'desc'</span>,</span><br><span class="line">        <span class="string">'detail'</span>,</span><br><span class="line">        <span class="string">'degree'</span>,</span><br><span class="line">        <span class="string">'learn_times'</span>,</span><br><span class="line">        <span class="string">'students'</span>]</span><br><span class="line">    search_fields = [<span class="string">'name'</span>, <span class="string">'desc'</span>, <span class="string">'detail'</span>, <span class="string">'degree'</span>, <span class="string">'students'</span>]</span><br><span class="line">    list_filter = [</span><br><span class="line">        <span class="string">'name'</span>,</span><br><span class="line">        <span class="string">'desc'</span>,</span><br><span class="line">        <span class="string">'detail'</span>,</span><br><span class="line">        <span class="string">'degree'</span>,</span><br><span class="line">        <span class="string">'learn_times'</span>,</span><br><span class="line">        <span class="string">'students'</span>]</span><br><span class="line">    ordering = [<span class="string">'-click_nums'</span>]</span><br><span class="line">    readonly_fields =[<span class="string">'click_nums'</span>]</span><br><span class="line">    exclude = [<span class="string">'fav_nums'</span>]</span><br><span class="line">    <span class="comment"># 课程直接添加章节</span></span><br><span class="line">    inlines = [LessonInline,CourseResourceInline]</span><br><span class="line"><span class="comment"># 将管理器与model进行注册关联</span></span><br><span class="line">xadmin.site.register(BannerCourse, BannerCourseAdmin)</span><br></pre></td></tr></table></figure><p>admin中重载queryset方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 过滤列表中的数据</span><br><span class="line">def queryset(self):</span><br><span class="line">    qs = super(BannerCourseAdmin, self).queryset()</span><br><span class="line">    qs = qs.filter(is_banner=True)</span><br><span class="line">    return qs</span><br><span class="line"># 过滤列表中的数据</span><br><span class="line">def queryset(self):</span><br><span class="line">    qs = super(CourseAdmin, self).queryset()</span><br><span class="line">    qs = qs.filter(is_banner=False)</span><br><span class="line">    return qs</span><br></pre></td></tr></table></figure><h2 id="xamdin其他常见功能："><a href="#xamdin其他常见功能：" class="headerlink" title="xamdin其他常见功能："></a>xamdin其他常见功能：</h2><h3 id="可以在列表上快速修改内容、"><a href="#可以在列表上快速修改内容、" class="headerlink" title="可以在列表上快速修改内容、"></a>可以在列表上快速修改内容、</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list_editable = [ &apos;degree&apos;,&apos;desc&apos;,]</span><br></pre></td></tr></table></figure><h3 id="自定义函数作为列"><a href="#自定义函数作为列" class="headerlink" title="自定义函数作为列"></a>自定义函数作为列</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def get_zj_nums(self):</span><br><span class="line">    return self.lesson_set.all().count()</span><br><span class="line">get_zj_nums.short_description = &quot;章节数&quot;</span><br></pre></td></tr></table></figure><h3 id="显示自定义的html代码"><a href="#显示自定义的html代码" class="headerlink" title="显示自定义的html代码"></a>显示自定义的html代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  def go_to(self):</span><br><span class="line">    from django.utils.safestring import mark_safe</span><br><span class="line">    # 如果不mark safe。会对其进行转义</span><br><span class="line">    return  mark_safe(&quot;&lt;a href=&apos;http://blog.mtianyan.cn&apos;&gt;跳转&lt;/&gt;&quot;)</span><br><span class="line">go_to.short_description = &quot;跳转&quot;</span><br></pre></td></tr></table></figure><h3 id="xadmin的工具-refresh"><a href="#xadmin的工具-refresh" class="headerlink" title="xadmin的工具: refresh"></a>xadmin的工具: refresh</h3><p>xadmin/plugins/refresh.py</p><p>列表页定时刷新的工具</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">refresh_times = [3,5]</span><br></pre></td></tr></table></figure><h3 id="字段联动"><a href="#字段联动" class="headerlink" title="字段联动"></a>字段联动</h3><p>应用场景: 新增一门课程之后，courseorg的课程数+1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">def save_models(self):</span><br><span class="line">      # 在保存课程的时候统计课程机构的课程数</span><br><span class="line">      # 字段联动</span><br><span class="line">      obj = self.new_obj</span><br><span class="line">      # 新增课程还没有保存，统计的课程数少一个</span><br><span class="line">      obj.save()</span><br><span class="line">      # 必须确定存在。</span><br><span class="line">      if obj.course_org is not None:</span><br><span class="line">          # obj实际是一个course对象</span><br><span class="line">          course_org = obj.course_org</span><br><span class="line">          course_org.course_nums = Course.objects.filter(course_org = course_org).count()</span><br><span class="line">          course_org.save()</span><br></pre></td></tr></table></figure><p>不用在课程里面添加章节数。</p><h2 id="xadmin自行探究"><a href="#xadmin自行探究" class="headerlink" title="xadmin自行探究"></a>xadmin自行探究</h2><ul><li>local 语言包</li><li>migration 数据表的记录</li><li>plugins 每一个后台页面都是一个plugin 插件机制</li><li>static文件。js css</li><li>template xadmin自己用到的html文件</li><li>对django admin的封装</li></ul><h3 id="下载源码包"><a href="#下载源码包" class="headerlink" title="下载源码包"></a>下载源码包</h3><p>添加插件使得可以识别ueditor field</p><p>记得在init中注册。</p><p><img src="http://myphoto.mtianyan.cn/blog/180115/jIJ1A5EijI.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180115/kF99c72b0K.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180115/lcH1c4Bb11.png?imageslim" alt="mark"></p><p>关闭自动转义。</p><h2 id="导入excel"><a href="#导入excel" class="headerlink" title="导入excel"></a>导入excel</h2><ol><li>如何注入导入excel代码到菜单</li><li>如何只在课程列表显示</li><li>如何接收文件对文件进行处理</li></ol><p><img src="http://myphoto.mtianyan.cn/blog/180115/H92HC8eJ1D.png?imageslim" alt="mark"></p><p>adminx 文件中的变量覆盖插件内部变量。</p><p>只需要重载<code>block_top_toolbar</code>，就会把这个放到页面里面<br>默认使用bootstrap</p><p><code>init</code>确定是否启用插件，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def post(self, request, *args , **kwargs):</span><br><span class="line">    if &apos;excel&apos; in request.FILES:</span><br><span class="line">        pass</span><br></pre></td></tr></table></figure><p>adminx中重写post方法。上传文件会被放在<code>request.FILES</code>中。</p><p>中间pass步骤不管做什么事情，都要最后return父类的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return super(CourseAdmin, self).post(request, args, kwargs)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;大渣好 我系谷天绿 我四渣渣辉 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;note success&quot;&gt;&lt;p&gt;给大家推荐一款糙好玩的框架，探挽xadmin，淋没有挽过的船新版本&lt;br&gt;挤需体验三番钟,里一定会刚我一样爱象节款游戏&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Django+Xadmin打造在线教育平台" scheme="http://blog.mtianyan.cn/categories/Django-Xadmin%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E5%B9%B3%E5%8F%B0/"/>
    
    
      <category term="Python" scheme="http://blog.mtianyan.cn/tags/Python/"/>
    
      <category term="Django" scheme="http://blog.mtianyan.cn/tags/Django/"/>
    
      <category term="在线教育平台" scheme="http://blog.mtianyan.cn/tags/%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E5%B9%B3%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>强力Django+杀手级Xadmin打造在线教育平台(十二)</title>
    <link href="http://blog.mtianyan.cn/post/ac88a88.html"/>
    <id>http://blog.mtianyan.cn/post/ac88a88.html</id>
    <published>2018-01-16T14:09:17.000Z</published>
    <updated>2018-02-02T12:40:13.960Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>君子以思患而豫防之 </p></blockquote><div class="note success"><p>安全问题还是要搞一搞的: sql注入，xss攻击，crsf攻击。</p></div><a id="more"></a><h2 id="sql注入攻击与防范"><a href="#sql注入攻击与防范" class="headerlink" title="sql注入攻击与防范"></a>sql注入攻击与防范</h2><p>sql注入的危害</p><p><img src="http://myphoto.mtianyan.cn/blog/180115/C2H1D6mBhg.png?imageslim" alt="mark"></p><p>对于用户的输入进行合法性判断。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class LoginUnsafeView(View):</span><br><span class="line">    def get(self, request):</span><br><span class="line">        return render(request, &quot;login.html&quot;, &#123;&#125;)</span><br><span class="line">    def post(self, request):</span><br><span class="line">        user_name = request.POST.get(&quot;username&quot;, &quot;&quot;)</span><br><span class="line">        pass_word = request.POST.get(&quot;password&quot;, &quot;&quot;)</span><br><span class="line"></span><br><span class="line">        import MySQLdb</span><br><span class="line">        conn = MySQLdb.connect(host=&apos;127.0.0.1&apos;, user=&apos;root&apos;, passwd=&apos;root&apos;, db=&apos;mxonline&apos;, charset=&apos;utf8&apos;)</span><br><span class="line">        cursor = conn.cursor()</span><br><span class="line">        sql_select = &quot;select * from users_userprofile where email=&apos;&#123;0&#125;&apos; and password=&apos;&#123;1&#125;&apos;&quot;.format(user_name, pass_word)</span><br><span class="line"></span><br><span class="line">        result = cursor.execute(sql_select)</span><br><span class="line">        for row in cursor.fetchall():</span><br><span class="line">            # 查询到用户</span><br><span class="line">            pass</span><br><span class="line">        print &apos;hello&apos;</span><br><span class="line"></span><br><span class="line">urls.py</span><br><span class="line">from users.views import LoginUnsafeView</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(&apos;^login/&apos;, LoginUnsafeView.as_view(), name=&apos;login&apos;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>参数中加入sql语句拼接字符串使之为真。</p><p>使用django的orm，它已经对这些做了处理</p><h2 id="xss攻击"><a href="#xss攻击" class="headerlink" title="xss攻击"></a>xss攻击</h2><p>xss跨站脚本攻击(Cross Site Scripting)的危害</p><p><img src="http://myphoto.mtianyan.cn/blog/180115/8EjD3Ik9Gj.png?imageslim" alt="mark"></p><p>正常流程</p><p><img src="http://myphoto.mtianyan.cn/blog/180115/4F1KK3IaaI.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180115/cB5cDiKFdJ.png?imageslim" alt="mark"></p><p>当传入iPhone6时，这个字符会被显示到页面中。</p><p><img src="http://myphoto.mtianyan.cn/blog/180115/kfLLLEGa19.png?imageslim" alt="mark"></p><p>将这段代码改成js代码</p><p><img src="http://myphoto.mtianyan.cn/blog/180115/d42ef1h5HC.png?imageslim" alt="mark"></p><p>黑客拿到你的cookie信息。然后伪装成用户。</p><p>Xss攻击防范</p><p><img src="http://myphoto.mtianyan.cn/blog/180115/03jDakfC5A.png?imageslim" alt="mark"></p><h2 id="crsf攻击与防护"><a href="#crsf攻击与防护" class="headerlink" title="crsf攻击与防护"></a>crsf攻击与防护</h2><p>crsf跨站请求伪造(Cross-site request forgery)的危害</p><p><img src="http://myphoto.mtianyan.cn/blog/180115/6Ikm6edG47.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180115/043H5F0K8G.png?imageslim" alt="mark"></p><p>用户并没有向a请求，而是访问了b。b要求用户访问a的。<br>原因：用户向a的每次请求都会带上session id</p><p>图片中插入。</p><p>提交form表单必须添加crsf token</p><p>攻击网站无法生成crsf token</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;君子以思患而豫防之 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;note success&quot;&gt;&lt;p&gt;安全问题还是要搞一搞的: sql注入，xss攻击，crsf攻击。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Django+Xadmin打造在线教育平台" scheme="http://blog.mtianyan.cn/categories/Django-Xadmin%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E5%B9%B3%E5%8F%B0/"/>
    
    
      <category term="Python" scheme="http://blog.mtianyan.cn/tags/Python/"/>
    
      <category term="Django" scheme="http://blog.mtianyan.cn/tags/Django/"/>
    
      <category term="在线教育平台" scheme="http://blog.mtianyan.cn/tags/%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E5%B9%B3%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>强力Django+杀手级Xadmin打造在线教育平台(十一)</title>
    <link href="http://blog.mtianyan.cn/post/a5f911ea.html"/>
    <id>http://blog.mtianyan.cn/post/a5f911ea.html</id>
    <published>2018-01-16T14:09:17.000Z</published>
    <updated>2018-02-02T12:40:13.960Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>泰山不让土壤，故能成其大；河海不择细流，故能就其深。 </p></blockquote><div class="note success"><p>细节决定成败，大体的网站已经做好了。<br>佛曰：给我把细节再搞一搞</p></div><a id="more"></a><h1 id="首页-全局功能细节和404以及500页面配置"><a href="#首页-全局功能细节和404以及500页面配置" class="headerlink" title="首页,全局功能细节和404以及500页面配置"></a>首页,全局功能细节和404以及500页面配置</h1><h2 id="登出和点击数以及收藏数完善"><a href="#登出和点击数以及收藏数完善" class="headerlink" title="登出和点击数以及收藏数完善"></a>登出和点击数以及收藏数完善</h2><h3 id="退出登录"><a href="#退出登录" class="headerlink" title="退出登录"></a>退出登录</h3><p>Python3+django2.0.1下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class LogoutView(View):</span><br><span class="line">    def get(self, request):</span><br><span class="line">        # django自带的logout</span><br><span class="line">        logout(request)</span><br><span class="line">        # 重定向到首页,</span><br><span class="line">        return HttpResponseRedirect(reverse(&quot;index&quot;))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 退出功能url</span><br><span class="line">path(&apos;logout/&apos;, LogoutView.as_view(), name=&quot;logout&quot;),</span><br></pre></td></tr></table></figure><h3 id="点击数加1"><a href="#点击数加1" class="headerlink" title="点击数加1"></a>点击数加1</h3><p>CourseInfoView学习人数加1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">course.students += 1</span><br><span class="line">course.save()</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180115/kDd20GdFDb.png?imageslim" alt="mark"></p><p>TeacherDetailView：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">teacher.click_nums +=1</span><br><span class="line">teacher.save()</span><br></pre></td></tr></table></figure><p>OrgHomeView</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">course_org.click_nums +=1</span><br><span class="line">        course_org.save()</span><br></pre></td></tr></table></figure><p>收藏数统计</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">exist_records.delete()</span><br><span class="line">if int(type) == 1:</span><br><span class="line">    course = Course.objects.get(id=int(id))</span><br><span class="line">    course.fav_nums -=1</span><br><span class="line">    if course.fav_nums &lt; 0:</span><br><span class="line">        course.fav_nums = 0</span><br><span class="line">    course.save()</span><br><span class="line">elif int(type) == 2:</span><br><span class="line">    org = CourseOrg.objects.get(id=int(id))</span><br><span class="line">    org.fav_nums -= 1</span><br><span class="line">    if org.fav_nums &lt; 0:</span><br><span class="line">        org.fav_nums = 0</span><br><span class="line">    org.save()</span><br><span class="line">elif int(type) == 3:</span><br><span class="line">    teacher = Teacher.objects.get(id=int(id))</span><br><span class="line">    teacher.fav_nums -=1</span><br><span class="line">    if teacher.fav_nums &lt; 0:</span><br><span class="line">        teacher.fav_nums = 0</span><br><span class="line">    teacher.save()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">user_fav.save()</span><br><span class="line"></span><br><span class="line">               if int(type) == 1:</span><br><span class="line">                   course = Course.objects.get(id=int(id))</span><br><span class="line">                   course.fav_nums += 1</span><br><span class="line">                   course.save()</span><br><span class="line">               elif int(type) == 2:</span><br><span class="line">                   org = CourseOrg.objects.get(id=int(id))</span><br><span class="line">                   org.fav_nums += 1</span><br><span class="line">                   org.save()</span><br><span class="line">               elif int(type) == 3:</span><br><span class="line">                   teacher = Teacher.objects.get(id=int(id))</span><br><span class="line">                   teacher.fav_nums += 1</span><br><span class="line">                   teacher.save()</span><br></pre></td></tr></table></figure><p>注意负数的处理：</p><p>修改消息已读</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 用户进入个人中心消息页面，清空未读消息记录</span><br><span class="line">all_unread_messages = UserMessage.objects.filter(user=request.user.id, has_read=False)</span><br><span class="line">for unread_message in all_unread_messages:</span><br><span class="line">    unread_message.has_read = True</span><br><span class="line">    unread_message.save()</span><br></pre></td></tr></table></figure><p>改进取出未读数字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return  UserMessage.objects.filter(has_read=False, user=self.id).count()</span><br></pre></td></tr></table></figure><h2 id="首页功能开发"><a href="#首页功能开发" class="headerlink" title="首页功能开发"></a>首页功能开发</h2><p>轮播图</p><p>公开课</p><p>授课机构</p><p>新建view</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 首页view</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexView</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="comment"># 取出轮播图</span></span><br><span class="line">        all_banner = Banner.objects.all().order_by(<span class="string">'index'</span>)[:<span class="number">5</span>]</span><br><span class="line">        <span class="comment"># 正常位课程</span></span><br><span class="line">        courses = Course.objects.filter(is_banner=<span class="keyword">False</span>)[:<span class="number">6</span>]</span><br><span class="line">        <span class="comment"># 轮播图课程取三个</span></span><br><span class="line">        banner_courses = Course.objects.filter(is_banner=<span class="keyword">True</span>)[:<span class="number">3</span>]</span><br><span class="line">        <span class="comment"># 课程机构</span></span><br><span class="line">        course_orgs = CourseOrg.objects.all()[:<span class="number">15</span>]</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'index.html'</span>, &#123;</span><br><span class="line">            <span class="string">"all_banner"</span>:all_banner,</span><br><span class="line">            <span class="string">"courses"</span>:courses,</span><br><span class="line">            <span class="string">"banner_courses"</span>:banner_courses,</span><br><span class="line">            <span class="string">"course_orgs"</span>:course_orgs,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><p>为课程添加字段: <code>isbanner</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">is_banner = models.BooleanField(default=<span class="keyword">False</span>, verbose_name=<span class="string">u"是否轮播"</span>)</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">url配置:</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">path(<span class="string">''</span>, IndexView.as_view(), name=  <span class="string">"index"</span>)</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180115/8IDjg5e8K0.png?imageslim" alt="mark"></p><p>使用django自带模板标签<code>add</code>添加2</p><p>为<code>courseOrg</code>添加字段<code>tag</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tag = models.CharField(max_length=<span class="number">10</span>, default= <span class="string">u"国内名校"</span>,verbose_name=<span class="string">u"机构标签"</span>)</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180115/468aAaiajk.png?imageslim" alt="mark"></p><p>template内建标签被五整除</p><h2 id="配置全局404和500"><a href="#配置全局404和500" class="headerlink" title="配置全局404和500"></a>配置全局404和500</h2><p>Mxonline3/urls.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局404页面配置</span></span><br><span class="line">handler404 = <span class="string">'users.views.page_not_found'</span></span><br></pre></td></tr></table></figure><p>users/views.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 404对应处理view</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">page_not_found</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">from</span> django.shortcuts <span class="keyword">import</span>  render_to_response</span><br><span class="line">    response = render_to_response(<span class="string">"404.html"</span>, &#123;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment"># 设置response的状态码</span></span><br><span class="line">    response.status_code = <span class="number">404</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><p>Debug = True 404是不起作用的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALLOWED_HOSTS = [&apos;*&apos;]</span><br></pre></td></tr></table></figure><p>在debug为false情况下。</p><p>我们在访问media的时候配置过用serve来取<br>告诉它访问media的时候去哪个路径下找</p><p>debug为True</p><p>会自动前往STATICFILES——DIRS取文件的</p><p>一旦debug改为false，django就不会代管你的静态文件，</p><p>一般静态文件通过第三方http服务器代理转发。</p><p>nignx 和 Apache都会自动代理这些静态文件</p><p>方法1：我们自己url响应我们的static</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">STATIC_ROOT = os.path.join(BASE_DIR, &apos;static&apos;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;泰山不让土壤，故能成其大；河海不择细流，故能就其深。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;note success&quot;&gt;&lt;p&gt;细节决定成败，大体的网站已经做好了。&lt;br&gt;佛曰：给我把细节再搞一搞&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Django+Xadmin打造在线教育平台" scheme="http://blog.mtianyan.cn/categories/Django-Xadmin%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E5%B9%B3%E5%8F%B0/"/>
    
    
      <category term="Python" scheme="http://blog.mtianyan.cn/tags/Python/"/>
    
      <category term="Django" scheme="http://blog.mtianyan.cn/tags/Django/"/>
    
      <category term="在线教育平台" scheme="http://blog.mtianyan.cn/tags/%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E5%B9%B3%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>强力Django+杀手级Xadmin打造在线教育平台(十)</title>
    <link href="http://blog.mtianyan.cn/post/fe5291db.html"/>
    <id>http://blog.mtianyan.cn/post/fe5291db.html</id>
    <published>2018-01-15T14:09:17.000Z</published>
    <updated>2018-02-02T12:40:13.960Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>不以个人为中心, 但我们得有个个人中心。 </p></blockquote><div class="note default"><p>做一做全局导航，做一做个人中心，做一做全局搜索。<br>洒洒水啦。</p></div><a id="more"></a><h2 id="配置全局导航"><a href="#配置全局导航" class="headerlink" title="配置全局导航"></a>配置全局导航</h2><p>让index页面也继承base页面</p><p>base页面的导航栏配置</p><p><img src="http://myphoto.mtianyan.cn/blog/180114/4LGd72eA4J.png?imageslim" alt="mark"></p><p>但是现在我们不知道当前是哪一个页面，因为后端没有传值过来</p><p>后台的每个view中添加current nav字段。然后向上传递到base页面</p><p>为了满足前台有current view的值，我们写的每个view都得加上这个字段。</p><p>小技巧：根据request的地址中的前几位来判断在哪一个区域之下</p><p>request.path</p><p>修改url中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 访问机构讲师</span><br><span class="line">url(r&apos;^org_teacher/(?P&lt;org_id&gt;\d+)/$&apos;, OrgTeacherView.as_view(), name=&quot;org_teacher&quot;),</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180114/kGG5I71CE1.png?imageslim" alt="mark"></p><h2 id="全局搜索功能开发"><a href="#全局搜索功能开发" class="headerlink" title="全局搜索功能开发"></a>全局搜索功能开发</h2><p>搜索跳到列表展示</p><p>courselist后加参数keywords</p><p>搜索的代码放在deco-common js中</p><p>课程的搜索功能：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 搜索功能</span><br><span class="line">search_keywords = request.GET.get(&apos;keywords&apos;,&apos;&apos;)</span><br><span class="line">if search_keywords:</span><br><span class="line">    # 在name字段进行操作,做like语句的操作。i代表不区分大小写</span><br><span class="line">    # or操作使用Q</span><br><span class="line">    all_course = all_course.filter(Q(name__icontains=search_keywords)|Q(desc__icontains=search_keywords)|Q(detail__icontains=search_keywords))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;search_keywords&quot;:search_keywords,</span><br></pre></td></tr></table></figure><h2 id="个人中心信息展示"><a href="#个人中心信息展示" class="headerlink" title="个人中心信息展示"></a>个人中心信息展示</h2><p>将用户中心相关的六个页面，全部拷贝进template</p><p>新建usercenter base页面</p><p><img src="http://myphoto.mtianyan.cn/blog/180114/3I2G5kaK1G.png?imageslim" alt="mark"></p><p>配置url</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># user app的url配置</span><br><span class="line">url(r&quot;^users/&quot;, include(&apos;users.urls&apos;, namespace=&quot;users&quot;)),</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># encoding: utf-8</span><br><span class="line">from .views import UserInfoView</span><br><span class="line"></span><br><span class="line">__author__ = &apos;mtianyan&apos;</span><br><span class="line">__date__ = &apos;2018/1/14 0014 04:00&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from django.conf.urls import url</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    # 用户信息</span><br><span class="line">    url(r&apos;^info/$&apos;, UserInfoView.as_view(), name=&quot;user_info&quot;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 用户个人信息view</span><br><span class="line">class UserInfoView(LoginRequiredMixin,View):</span><br><span class="line">    login_url = &apos;/login/&apos;</span><br><span class="line">    redirect_field_name = &apos;next&apos;</span><br><span class="line">    def get(self, request):</span><br><span class="line">        return render(request, &quot;usercenter-info.html&quot;, &#123;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><p>user app 下新建url</p><p>django自带的filter </p><p>request.user.mobile|default_if_none:’’</p><h2 id="修改密码和修改头像"><a href="#修改密码和修改头像" class="headerlink" title="修改密码和修改头像"></a>修改密码和修改头像</h2><p>新建url 和 view</p><p>小技巧:</p><blockquote><p>django的xadmin和admin当中，实际上是可以对form定义为文件的时候，是可以自动对上传的文件做保存的。<br>使用form的一个字段定义一个文件类型。把字段取出来就是内存中的文件。<br>赋值到user.image 就完成图片的一个存储。</p></blockquote><p>users/forms.py：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 用于文件上传，修改头像</span><br><span class="line">class UploadImageForm(forms.ModelForm):</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        model = UserProfile</span><br><span class="line">        fields = [&apos;image&apos;]</span><br></pre></td></tr></table></figure><p>实例化时，传进来是post 和 文件类型的request 存放地址</p><p><img src="http://myphoto.mtianyan.cn/blog/180114/Jabljb878I.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180114/Lb09b3457I.png?imageslim" alt="mark"></p><p>上传文件时通过一个form完成的。</p><p><img src="http://myphoto.mtianyan.cn/blog/180114/1IGKhbagJC.png?imageslim" alt="mark"></p><p>必须指明enctype，才能把文件类型传递到后台</p><p>url 和view</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 用户头像上传</span><br><span class="line">url(r&apos;^image/upload/$&apos;, UploadImageView.as_view(), name=&quot;image_upload&quot;),</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 用户上传图片的view:用于修改头像</span><br><span class="line">class UploadImageView(LoginRequiredMixin, View):</span><br><span class="line">    login_url = &apos;/login/&apos;</span><br><span class="line">    redirect_field_name = &apos;next&apos;</span><br><span class="line">    def post(self, request):</span><br><span class="line">        # 这时候用户上传的文件就已经被保存到imageform了</span><br><span class="line">        image_form = UploadImageForm(request.POST, request.FILES)</span><br><span class="line">        if image_form.is_valid():</span><br><span class="line">            pass</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180114/he98j111Lj.png?imageslim" alt="mark"></p><p>这里的name必须和form中的一样</p><p><img src="http://myphoto.mtianyan.cn/blog/180114/J6kBci76lA.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180114/3Bm665idcK.png?imageslim" alt="mark"></p><blockquote><p>所有验证通过的字段放在cleaned data</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 用户上传图片的view:用于修改头像</span><br><span class="line">class UploadImageView(LoginRequiredMixin, View):</span><br><span class="line">    login_url = &apos;/login/&apos;</span><br><span class="line">    redirect_field_name = &apos;next&apos;</span><br><span class="line">    def post(self, request):</span><br><span class="line">        # 这时候用户上传的文件就已经被保存到imageform了 ，为modelform添加instance值直接保存</span><br><span class="line">        image_form = UploadImageForm(request.POST, request.FILES, instance=request.user)</span><br><span class="line">        if image_form.is_valid():</span><br><span class="line">            image_form.save()</span><br><span class="line">            # # 取出cleaned data中的值,一个dict</span><br><span class="line">            # image = image_form.cleaned_data[&apos;image&apos;]</span><br><span class="line">            # request.user.image = image</span><br><span class="line">            # request.user.save()</span><br><span class="line">            return HttpResponse(&apos;&#123;&quot;status&quot;:&quot;success&quot;&#125;&apos;, content_type=&apos;application/json&apos;)</span><br><span class="line">        else:</span><br><span class="line">            return HttpResponse(&apos;&#123;&quot;status&quot;:&quot;fail&quot;&#125;&apos;, content_type=&apos;application/json&apos;)</span><br></pre></td></tr></table></figure><p>修改密码功能:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 在个人中心修改用户密码</span><br><span class="line">class UpdatePwdView(View):</span><br><span class="line">    def post(self, request):</span><br><span class="line">        modiypwd_form = ModifyPwdForm(request.POST)</span><br><span class="line">        if modiypwd_form.is_valid():</span><br><span class="line">            pwd1 = request.POST.get(&quot;password1&quot;, &quot;&quot;)</span><br><span class="line">            pwd2 = request.POST.get(&quot;password2&quot;, &quot;&quot;)</span><br><span class="line">            # 如果两次密码不相等，返回错误信息</span><br><span class="line">            if pwd1 != pwd2:</span><br><span class="line">                return HttpResponse(&apos;&#123;&quot;status&quot;:&quot;fail&quot;, &quot;msg&quot;:&quot;密码不一致&quot;&#125;&apos;, content_type=&apos;application/json&apos;)</span><br><span class="line">            # 如果密码一致</span><br><span class="line">            user =request.user</span><br><span class="line">            # 加密成密文</span><br><span class="line">            user.password = make_password(pwd2)</span><br><span class="line">            # save保存到数据库</span><br><span class="line">            user.save()</span><br><span class="line">            return HttpResponse(&apos;&#123;&quot;status&quot;:&quot;success&quot;&#125;&apos;, content_type=&apos;application/json&apos;)</span><br><span class="line">        # 验证失败说明密码位数不够。</span><br><span class="line">        else:</span><br><span class="line">            return HttpResponse(&apos;&#123;&quot;status&quot;:&quot;fail&quot;, &quot;msg&quot;:&quot;填写错误请检查&quot;&#125;&apos;, content_type=&apos;application/json&apos;)</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180114/CC02dfbG57.png?imageslim" alt="mark"></p><p>必须与我们的form中定义的一致</p><p>实现的js代码在deco-user.js</p><p>js文件中的url就一定不能用template的模板语言了</p><h2 id="修改邮箱提交form表单"><a href="#修改邮箱提交form表单" class="headerlink" title="修改邮箱提交form表单"></a>修改邮箱提交form表单</h2><p>有两个接口需要完成。点击获取验证码时，后台需要向用户新邮箱发送验证码。<br>邮箱如果出错，会返回错误信息。</p><p>输入了邮箱和验证码，验证是否匹配。</p><h3 id="获取验证码接口"><a href="#获取验证码接口" class="headerlink" title="获取验证码接口:"></a>获取验证码接口:</h3><p>配置url:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 专用于发送验证码的</span><br><span class="line">url(r&apos;^sendemail_code/$&apos;, SendEmailCodeView.as_view(), name=&quot;sendemail_code&quot;),</span><br></pre></td></tr></table></figure><p>新增邮箱验证码model类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SEND_CHOICES = (</span><br><span class="line">        (&quot;register&quot;, u&quot;注册&quot;),</span><br><span class="line">        (&quot;forget&quot;, u&quot;找回密码&quot;),</span><br><span class="line">        (&quot;update_email&quot;, u&quot;修改邮箱&quot;)</span><br><span class="line">    )</span><br><span class="line">           max_length=20,</span><br></pre></td></tr></table></figure><p>发送邮箱验证码view</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class SendEmailCodeView(LoginRequiredMixin, View):</span><br><span class="line">    def get(self,request):</span><br><span class="line">        # 取出需要发送的邮件</span><br><span class="line">        email = request.GET.get(&quot;email&quot;, &quot;&quot;)</span><br><span class="line"></span><br><span class="line">        # 不能是已注册的邮箱</span><br><span class="line">        if UserProfile.objects.filter(email=email):</span><br><span class="line">            return HttpResponse(&apos;&#123;&quot;email&quot;:&quot;邮箱已经存在&quot;&#125;&apos;, content_type=&apos;application/json&apos;)</span><br><span class="line">        send_register_eamil(email, &quot;update_email&quot;)</span><br><span class="line">        return HttpResponse(&apos;&#123;&quot;status&quot;:&quot;success&quot;&#125;&apos;, content_type=&apos;application/json&apos;)</span><br></pre></td></tr></table></figure><p>发送邮箱验证码的功能放在deco-user.js中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">elif send_type == &quot;update_email&quot;:</span><br><span class="line">    code = random_str(4)</span><br><span class="line">    email_title = &quot;mtianyan慕课小站 修改邮箱验证码&quot;</span><br><span class="line">    email_body = loader.render_to_string(</span><br><span class="line">        &quot;email_update_email.html&quot;,  # 需要渲染的html模板</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;active_code&quot;: code  # 参数</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    msg = EmailMessage(email_title, email_body, EMAIL_FROM, [email])</span><br><span class="line">    msg.content_subtype = &quot;html&quot;</span><br><span class="line">    send_status = msg.send()</span><br></pre></td></tr></table></figure><h3 id="修改邮箱的view"><a href="#修改邮箱的view" class="headerlink" title="修改邮箱的view"></a>修改邮箱的view</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 修改邮箱的view:</span><br><span class="line">class UpdateEmailView(LoginRequiredMixin, View):</span><br><span class="line">    login_url = &apos;/login/&apos;</span><br><span class="line">    redirect_field_name = &apos;next&apos;</span><br><span class="line">    def post(self, request):</span><br><span class="line">        email = request.POST.get(&quot;email&quot;, &quot;&quot;)</span><br><span class="line">        code = request.POST.get(&quot;code&quot;, &quot;&quot;)</span><br><span class="line"></span><br><span class="line">        existed_records = EmailVerifyRecord.objects.filter(email=email, code=code, send_type=&apos;update_email&apos;)</span><br><span class="line">        if existed_records:</span><br><span class="line">            user = request.user</span><br><span class="line">            user.email = email</span><br><span class="line">            user.save()</span><br><span class="line">            return HttpResponse(&apos;&#123;&quot;status&quot;:&quot;success&quot;&#125;&apos;, content_type=&apos;application/json&apos;)</span><br><span class="line">        else:</span><br><span class="line">            return HttpResponse(&apos;&#123;&quot;email&quot;:&quot;验证码无效&quot;&#125;&apos;, content_type=&apos;application/json&apos;)</span><br></pre></td></tr></table></figure><p>修改邮箱的url</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url(r&apos;^update_email/$&apos;, UpdateEmailView.as_view(), name=&quot;update_email&quot;),</span><br></pre></td></tr></table></figure><p>为userInfo view增加post方法。使用modelform完成直接提交</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def post(self,request):</span><br><span class="line">    # 不像用户咨询是一个新的。需要指明instance。不然无法修改，而是新增用户</span><br><span class="line">    user_info_form = UserInfoForm(request.POST, instance=request.user)</span><br><span class="line">    if user_info_form.is_valid():</span><br><span class="line">        user_info_form.save()</span><br></pre></td></tr></table></figure><p>user_info_form</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 用于个人中心修改个人信息</span><br><span class="line">class UserInfoForm(forms.ModelForm):</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        model = UserProfile</span><br><span class="line">        fields = [&apos;nick_name&apos;,&apos;gender&apos;,&apos;birthday&apos;,&apos;address&apos;,&apos;mobile&apos;]</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180114/ADFBmE7a6B.png?imageslim" alt="mark"></p><p>配置url和view</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 用户中心我的课程</span><br><span class="line">path(&apos;mycourse/&apos;, MyCourseView.as_view(), name=&quot;mycourse&quot;),</span><br></pre></td></tr></table></figure><p>usercenter base中添加链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 个人中心页我的课程</span><br><span class="line"></span><br><span class="line">class MyCourseView(LoginRequiredMixin, View):</span><br><span class="line">    login_url = &apos;/login/&apos;</span><br><span class="line">    redirect_field_name = &apos;next&apos;</span><br><span class="line"></span><br><span class="line">    def get(self, request):</span><br><span class="line">        user_courses = UserCourse.objects.filter(user=request.user)</span><br><span class="line">        return render(request, &quot;usercenter-mycourse.html&quot;, &#123;</span><br><span class="line">            &quot;user_courses&quot;:user_courses,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180114/8LAe6f1dl7.png?imageslim" alt="mark"></p><h3 id="配置url和view"><a href="#配置url和view" class="headerlink" title="配置url和view"></a>配置url和view</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 我收藏的课程机构</span><br><span class="line">path(&apos;myfav/org/&apos;, MyFavOrgView.as_view(), name=&quot;myfav_org&quot;),</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class MyFavOrgView(LoginRequiredMixin, View):</span><br><span class="line">    login_url = &apos;/login/&apos;</span><br><span class="line">    redirect_field_name = &apos;next&apos;</span><br><span class="line"></span><br><span class="line">    def get(self, request):</span><br><span class="line">        org_list = []</span><br><span class="line">        fav_orgs= UserFavorite.objects.filter(user=request.user, fav_type=2)</span><br><span class="line">        # 上面的fav_orgs只是存放了id。我们还需要通过id找到机构对象</span><br><span class="line">        for fav_org in fav_orgs:</span><br><span class="line">            # 取出fav_id也就是机构的id。</span><br><span class="line">            org_id = fav_org.fav_id</span><br><span class="line">            # 获取这个机构对象</span><br><span class="line">            org = CourseOrg.objects.get(id=org_id)</span><br><span class="line">            org_list.append(org)</span><br><span class="line">        return render(request, &quot;usercenter-fav-org.html&quot;, &#123;</span><br><span class="line">            &quot;org_list&quot;: org_list,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 我收藏的授课讲师</span><br><span class="line"></span><br><span class="line">class MyFavTeacherView(LoginRequiredMixin, View):</span><br><span class="line">    login_url = &apos;/login/&apos;</span><br><span class="line">    redirect_field_name = &apos;next&apos;</span><br><span class="line"></span><br><span class="line">    def get(self, request):</span><br><span class="line">        teacher_list = []</span><br><span class="line">        fav_teachers= UserFavorite.objects.filter(user=request.user, fav_type=3)</span><br><span class="line">        # 上面的fav_orgs只是存放了id。我们还需要通过id找到机构对象</span><br><span class="line">        for fav_teacher in fav_teachers:</span><br><span class="line">            # 取出fav_id也就是机构的id。</span><br><span class="line">            teacher_id = fav_teacher.fav_id</span><br><span class="line">            # 获取这个机构对象</span><br><span class="line">            teacher = Teacher.objects.get(id=teacher_id)</span><br><span class="line">            teacher_list.append(teacher)</span><br><span class="line">        return render(request, &quot;usercenter-fav-teacher.html&quot;, &#123;</span><br><span class="line">            &quot;teacher_list&quot;: teacher_list,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><p>url</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 我收藏的课程机构</span><br><span class="line">path(&apos;myfav/org/&apos;, MyFavOrgView.as_view(), name=&quot;myfav_org&quot;),</span><br><span class="line"></span><br><span class="line"># 我收藏的授课讲师</span><br><span class="line">path(&apos;myfav/teacher/&apos;, MyFavTeacherView.as_view(), name=&quot;myfav_teacher&quot;),</span><br></pre></td></tr></table></figure><h3 id="配置view和url"><a href="#配置view和url" class="headerlink" title="配置view和url"></a>配置view和url</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 我收藏的课程</span><br><span class="line"></span><br><span class="line">class MyFavCourseView(LoginRequiredMixin, View):</span><br><span class="line">    login_url = &apos;/login/&apos;</span><br><span class="line">    redirect_field_name = &apos;next&apos;</span><br><span class="line"></span><br><span class="line">    def get(self, request):</span><br><span class="line">        course_list = []</span><br><span class="line">        fav_courses = UserFavorite.objects.filter(user=request.user, fav_type=1)</span><br><span class="line">        # 上面的fav_orgs只是存放了id。我们还需要通过id找到机构对象</span><br><span class="line">        for fav_course in fav_courses:</span><br><span class="line">            # 取出fav_id也就是机构的id。</span><br><span class="line">            course_id = fav_course.fav_id</span><br><span class="line">            # 获取这个机构对象</span><br><span class="line">            course = Course.objects.get(id=course_id)</span><br><span class="line">            course_list.append(course)</span><br><span class="line">        return render(request, &quot;usercenter-fav-course.html&quot;, &#123;</span><br><span class="line">            &quot;course_list&quot;: course_list,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 我收藏的课程</span><br><span class="line">path(&apos;myfav/course/&apos;, MyFavCourseView.as_view(), name=&quot;myfav_course&quot;),</span><br></pre></td></tr></table></figure><h2 id="取消收藏"><a href="#取消收藏" class="headerlink" title="取消收藏"></a>取消收藏</h2><p>templates/usercenter-fav-course.html</p><p><img src="http://myphoto.mtianyan.cn/blog/180114/i92c3ffgJD.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180114/LjGjh0B3cL.png?imageslim" alt="mark"></p><p>取消收藏的代码在base页面中。三个js。</p><h2 id="我的消息页面"><a href="#我的消息页面" class="headerlink" title="我的消息页面"></a>我的消息页面</h2><p><img src="http://myphoto.mtianyan.cn/blog/180114/B4HKiBfla1.png?imageslim" alt="mark"></p><h3 id="配置url和view-1"><a href="#配置url和view-1" class="headerlink" title="配置url和view"></a>配置url和view</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 我收藏的课程</span><br><span class="line">path(&apos;my_message/&apos;, MyMessageView.as_view(), name=&quot;my_message&quot;),</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 我的消息</span><br><span class="line">class MyMessageView(LoginRequiredMixin, View):</span><br><span class="line">    login_url = &apos;/login/&apos;</span><br><span class="line">    redirect_field_name = &apos;next&apos;</span><br><span class="line"></span><br><span class="line">    def get(self, request):</span><br><span class="line">        all_message = UserMessage.objects.filter(user= request.user.id)</span><br><span class="line">        # 对课程机构进行分页</span><br><span class="line">        # 尝试获取前台get请求传递过来的page参数</span><br><span class="line">        # 如果是不合法的配置参数默认返回第一页</span><br><span class="line">        try:</span><br><span class="line">            page = request.GET.get(&apos;page&apos;, 1)</span><br><span class="line">        except PageNotAnInteger:</span><br><span class="line">            page = 1</span><br><span class="line">        # 这里指从allorg中取五个出来，每页显示5个</span><br><span class="line">        p = Paginator(all_message, 4)</span><br><span class="line">        messages = p.page(page)</span><br><span class="line">        return  render(request, &quot;usercenter-message.html&quot;, &#123;</span><br><span class="line">        &quot;messages&quot;:messages,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><h3 id="注册时发生欢迎消息"><a href="#注册时发生欢迎消息" class="headerlink" title="注册时发生欢迎消息"></a>注册时发生欢迎消息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 写入欢迎注册消息</span><br><span class="line">           user_message = UserMessage()</span><br><span class="line">           user_message.user = user_profile.id</span><br><span class="line">           user_message.message = &quot;欢迎注册mtianyan慕课小站!!&quot;</span><br><span class="line">           user_message.save()</span><br></pre></td></tr></table></figure><h3 id="页面顶部小喇叭"><a href="#页面顶部小喇叭" class="headerlink" title="页面顶部小喇叭"></a>页面顶部小喇叭</h3><p>所有页面都要读取一个共同的变量：未读消息的数量。我们需要向request中注入这个变量<br>所有页面都有request.user对象。所以我们在userprofile中自定义方法，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 获取用户未读消息的数量</span><br><span class="line">def unread_nums(self):</span><br><span class="line">    from operation.models import UserMessage</span><br><span class="line">    return  UserMessage.objects.filter(user=self.id).count()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;不以个人为中心, 但我们得有个个人中心。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;note default&quot;&gt;&lt;p&gt;做一做全局导航，做一做个人中心，做一做全局搜索。&lt;br&gt;洒洒水啦。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Django+Xadmin打造在线教育平台" scheme="http://blog.mtianyan.cn/categories/Django-Xadmin%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E5%B9%B3%E5%8F%B0/"/>
    
    
      <category term="Python" scheme="http://blog.mtianyan.cn/tags/Python/"/>
    
      <category term="Django" scheme="http://blog.mtianyan.cn/tags/Django/"/>
    
      <category term="在线教育平台" scheme="http://blog.mtianyan.cn/tags/%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E5%B9%B3%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>强力Django+杀手级Xadmin打造在线教育平台(九)</title>
    <link href="http://blog.mtianyan.cn/post/83fbe6af.html"/>
    <id>http://blog.mtianyan.cn/post/83fbe6af.html</id>
    <published>2018-01-14T14:09:17.000Z</published>
    <updated>2018-02-02T12:40:13.960Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>师者，所以传道受业解惑也 - 韩愈 </p></blockquote><div class="note "><p>上帝说得课程得有老师来讲！ 得有老师的详情 ！<br>老师应该可以收藏分享，我得看到老师是哪个机构，它讲了啥课。于是这章出现了。</p></div><a id="more"></a><p>授课讲师列表页。列表页右侧是讲师排行榜。列表页可以进行排序</p><p>点击课程讲师进入课程讲师的详情页: 分享 &amp; 点击收藏 右边是讲师所属课程机构</p><p>下面是讲师的课程详情。</p><h2 id="9-1-讲师列表页"><a href="#9-1-讲师列表页" class="headerlink" title="9-1 讲师列表页"></a>9-1 讲师列表页</h2><p>teacherlist 和 teacher detail 一起放到template目录之下</p><p>继承base页面</p><p><img src="http://myphoto.mtianyan.cn/blog/180113/ljke7AEDjj.png?imageslim" alt="mark"></p><h3 id="书写view与配置url"><a href="#书写view与配置url" class="headerlink" title="书写view与配置url"></a>书写view与配置url</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 讲师列表</span><br><span class="line">path(&apos;teacher_list/&apos;, TeacherListView.as_view(), name=&quot;teacher_list&quot;),</span><br></pre></td></tr></table></figure><p>添加讲师的年龄字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">age = models.IntegerField(default=18, verbose_name=u&quot;年龄&quot;)</span><br></pre></td></tr></table></figure><h3 id="分页仿照orglist-注意object-list"><a href="#分页仿照orglist-注意object-list" class="headerlink" title="分页仿照orglist 注意object_list"></a>分页仿照orglist 注意object_list</h3><p>view</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 课程讲师列表页</span><br><span class="line">class TeacherListView(View):</span><br><span class="line">        def get(self, request):</span><br><span class="line">            all_teacher = Teacher.objects.all()</span><br><span class="line">            # 总共有多少老师使用count进行统计</span><br><span class="line">            teacher_nums = all_teacher.count()</span><br><span class="line">            # 对讲师进行分页</span><br><span class="line">            # 尝试获取前台get请求传递过来的page参数</span><br><span class="line">            # 如果是不合法的配置参数默认返回第一页</span><br><span class="line">            try:</span><br><span class="line">                page = request.GET.get(&apos;page&apos;, 1)</span><br><span class="line">            except PageNotAnInteger:</span><br><span class="line">                page = 1</span><br><span class="line">            # 这里指从allorg中取五个出来，每页显示5个</span><br><span class="line">            p = Paginator(all_teacher, 4, request=request)</span><br><span class="line">            teachers = p.page(page)</span><br><span class="line">            return render(request, &quot;teachers-list.html&quot;, &#123;</span><br><span class="line">            &quot;all_teacher&quot;:teachers,</span><br><span class="line">            &quot;teacher_nums&quot;:teacher_nums</span><br><span class="line">            &#125;)</span><br></pre></td></tr></table></figure><h3 id="排序-amp-讲师排行榜"><a href="#排序-amp-讲师排行榜" class="headerlink" title="排序 &amp; 讲师排行榜"></a>排序 &amp; 讲师排行榜</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sort = request.GET.get(&quot;sort&quot;, &quot;&quot;)</span><br><span class="line">           if sort:</span><br><span class="line">               if sort == &quot;hot&quot;:</span><br><span class="line">                   all_teacher = all_teacher.order_by(&quot;-click_nums&quot;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;sort&quot;:sort</span><br></pre></td></tr></table></figure><p>将sort return到前端。实现active</p><p>排行榜讲师</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 排行榜讲师</span><br><span class="line">rank_teacher = Teacher.objects.all().order_by(&quot;-fav_nums&quot;)[:5]</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180114/k03L400l4c.png?imageslim" alt="mark"></p><p>forloop.count 取出当前是第几次循环</p><h2 id="9-2-讲师详情页"><a href="#9-2-讲师详情页" class="headerlink" title="9-2 讲师详情页"></a>9-2 讲师详情页</h2><p><img src="http://myphoto.mtianyan.cn/blog/180114/H49BkEleaA.png?imageslim" alt="mark"></p><h3 id="配置url和view"><a href="#配置url和view" class="headerlink" title="配置url和view"></a>配置url和view</h3><p>列表页中配置入口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 教师详情页面</span><br><span class="line"></span><br><span class="line">class TeacherDetailView(View):</span><br><span class="line">    def get(self, request, teacher_id):</span><br><span class="line">        teacher = Teacher.objects.get(id = int(teacher_id))</span><br><span class="line">        all_course = teacher.course_set.all()</span><br><span class="line">        # 排行榜讲师</span><br><span class="line">        rank_teacher = Teacher.objects.all().order_by(&quot;-fav_nums&quot;)[:5]</span><br><span class="line"></span><br><span class="line">        has_fav_teacher = False</span><br><span class="line">        if UserFavorite.objects.filter(user=request.user, fav_type=3, fav_id= teacher.id):</span><br><span class="line">            has_fav_teacher = True</span><br><span class="line">        has_fav_org = False</span><br><span class="line">        if  UserFavorite.objects.filter(user=request.user, fav_type=2, fav_id= teacher.org.id):</span><br><span class="line">            has_fav_org = True</span><br><span class="line">        return render(request, &quot;teacher-detail.html&quot;, &#123;</span><br><span class="line">            &quot;teacher&quot;:teacher,</span><br><span class="line">            &quot;all_course&quot;:all_course,</span><br><span class="line">            &quot;rank_teacher&quot;:rank_teacher,</span><br><span class="line">            &quot;has_fav_teacher&quot;:has_fav_teacher,</span><br><span class="line">            &quot;has_fav_org&quot;:has_fav_org,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 访问机构讲师</span><br><span class="line">re_path(&apos;teacher/detail/(?P&lt;teacher_id&gt;\d+)/&apos;, TeacherDetailView.as_view(), name=&quot;teacher_detail&quot;),</span><br></pre></td></tr></table></figure><blockquote><p>第九章完结</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;师者，所以传道受业解惑也 - 韩愈 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;note &quot;&gt;&lt;p&gt;上帝说得课程得有老师来讲！ 得有老师的详情 ！&lt;br&gt;老师应该可以收藏分享，我得看到老师是哪个机构，它讲了啥课。于是这章出现了。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Django+Xadmin打造在线教育平台" scheme="http://blog.mtianyan.cn/categories/Django-Xadmin%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E5%B9%B3%E5%8F%B0/"/>
    
    
      <category term="Python" scheme="http://blog.mtianyan.cn/tags/Python/"/>
    
      <category term="Django" scheme="http://blog.mtianyan.cn/tags/Django/"/>
    
      <category term="在线教育平台" scheme="http://blog.mtianyan.cn/tags/%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E5%B9%B3%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>强力Django+杀手级Xadmin打造在线教育平台(八)</title>
    <link href="http://blog.mtianyan.cn/post/9f2a0c4b.html"/>
    <id>http://blog.mtianyan.cn/post/9f2a0c4b.html</id>
    <published>2018-01-13T14:09:17.000Z</published>
    <updated>2018-02-02T12:40:13.960Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>三年六班，三年六班，李子明，李子明同学，你妈妈拿了两罐旺仔牛奶给你 </p></blockquote><div class="note success"><p>上帝说得有课程！ 得有详情 ！点了开始学习，得有章节！章节得有视频。<br>课程还得能评论下，还得有相关课程。于是这章出现了。</p></div><a id="more"></a><h2 id="8-1-课程列表"><a href="#8-1-课程列表" class="headerlink" title="8-1 课程列表"></a>8-1 课程列表</h2><p>拷贝课程列表页到template目录</p><p>创建课程相关的urls.py</p><p>Mxonline2/urls.py中声明包含到course的url中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 课程app的url配置</span><br><span class="line">url(r&quot;^course/&quot;, include(&apos;courses.urls&apos;, namespace=&quot;course&quot;)),</span><br></pre></td></tr></table></figure><p>django2.0.1版本:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 课程app的url配置</span><br><span class="line">path(&quot;course/&quot;, include(&apos;courses.urls&apos;, namespace=&quot;course&quot;)),</span><br></pre></td></tr></table></figure><p>书写处理列表展示相关的view</p><p>courses/views.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class CourseListView(View):</span><br><span class="line">    def get(self, request):</span><br><span class="line">        return render(request, &quot;course-list.html&quot;, &#123; &#125;)</span><br></pre></td></tr></table></figure><p>courses/urls.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># encoding: utf-8</span><br><span class="line">from courses.views import CourseListView</span><br><span class="line"></span><br><span class="line">__author__ = &apos;mtianyan&apos;</span><br><span class="line">__date__ = &apos;2018/1/13 0013 00:39&apos;</span><br><span class="line"></span><br><span class="line">from django.conf.urls import url</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    # 课程列表url</span><br><span class="line">    url(r&apos;^list/$&apos;, CourseListView.as_view(), name=&quot;list&quot;),</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>django2.0.1版本:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># encoding: utf-8</span><br><span class="line">__author__ = &apos;mtianyan&apos;</span><br><span class="line">__date__ = &apos;2018/1/13 0013 01:57&apos;</span><br><span class="line"></span><br><span class="line"># encoding: utf-8</span><br><span class="line">from courses.views import CourseListView</span><br><span class="line">from django.urls import path</span><br><span class="line">app_name = &quot;courses&quot;</span><br><span class="line">urlpatterns = [</span><br><span class="line">    # 课程列表url</span><br><span class="line">    path(&apos;list/&apos;, CourseListView.as_view(), name=&quot;list&quot;),</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>此时访问没有样式。我们开始对于course list html进行工作<br>可以观察到它和orglist一样可以有共同的头尾。所以继承base页面</p><p>xadmin中添加一些课程。</p><p>然后在view中返回课程数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class CourseListView(View):</span><br><span class="line">    def get(self, request):</span><br><span class="line">        all_course = Course.objects.all()</span><br><span class="line">        return render(request, &quot;course-list.html&quot;, &#123;</span><br><span class="line">            &quot;all_course&quot;:all_course,</span><br><span class="line">            </span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180113/32hbAB04ec.png?imageslim" alt="mark"></p><p>保留一个div</p><p><img src="http://myphoto.mtianyan.cn/blog/180113/L1Jm283bck.png?imageslim" alt="mark"></p><blockquote><p>通过外键字段取外键表中字段</p></blockquote><h3 id="分页功能"><a href="#分页功能" class="headerlink" title="分页功能"></a>分页功能</h3><p>拷贝代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from pure_pagination import Paginator, EmptyPage, PageNotAnInteger</span><br><span class="line"> # 对课程机构进行分页</span><br><span class="line">        # 尝试获取前台get请求传递过来的page参数</span><br><span class="line">        # 如果是不合法的配置参数默认返回第一页</span><br><span class="line">        try:</span><br><span class="line">            page = request.GET.get(&apos;page&apos;, 1)</span><br><span class="line">        except PageNotAnInteger:</span><br><span class="line">            page = 1</span><br><span class="line">        # 这里指从allorg中取五个出来，每页显示5个</span><br><span class="line">        p = Paginator(all_orgs, 4, request=request)</span><br><span class="line">        orgs = p.page(page)</span><br></pre></td></tr></table></figure><p>改动完成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class CourseListView(View):</span><br><span class="line">    def get(self, request):</span><br><span class="line">        all_course = Course.objects.all()</span><br><span class="line">        # 对课程进行分页</span><br><span class="line">        # 尝试获取前台get请求传递过来的page参数</span><br><span class="line">        # 如果是不合法的配置参数默认返回第一页</span><br><span class="line">        try:</span><br><span class="line">            page = request.GET.get(&apos;page&apos;, 1)</span><br><span class="line">        except PageNotAnInteger:</span><br><span class="line">            page = 1</span><br><span class="line">        # 这里指从allorg中取五个出来，每页显示5个</span><br><span class="line">        p = Paginator(all_course,6 , request=request)</span><br><span class="line">        courses = p.page(page)</span><br><span class="line">        return render(request, &quot;course-list.html&quot;, &#123;</span><br><span class="line">            &quot;all_course&quot;:courses,</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><p>在html中使用时注意object_list</p><blockquote><p>此时的all_course已经不是一个queryset，而是一个purepage对象。</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180113/JBm95D0fK8.png?imageslim" alt="mark"></p><h3 id="对于页码进行修改"><a href="#对于页码进行修改" class="headerlink" title="对于页码进行修改"></a>对于页码进行修改</h3><p><img src="http://myphoto.mtianyan.cn/blog/180113/L7Ibjh9g72.png?imageslim" alt="mark"></p><p>直接把orglist中的那段拿过来就行了。自行替换变量名称</p><p>此时已经好了。</p><h3 id="排序功能"><a href="#排序功能" class="headerlink" title="排序功能"></a>排序功能</h3><p>将之前的sort逻辑拷贝过来:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 进行排序</span><br><span class="line">        sort = request.GET.get(&apos;sort&apos;, &quot;&quot;)</span><br><span class="line">        if sort:</span><br><span class="line">            if sort == &quot;students&quot;:</span><br><span class="line">                all_orgs = all_orgs.order_by(&quot;-students&quot;)</span><br><span class="line">            elif sort == &quot;courses&quot;:</span><br><span class="line">                all_orgs = all_orgs.order_by(&quot;-course_nums&quot;)</span><br></pre></td></tr></table></figure><p>修改完成:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 进行排序</span><br><span class="line">sort = request.GET.get(&apos;sort&apos;, &quot;&quot;)</span><br><span class="line">if sort:</span><br><span class="line">    if sort == &quot;students&quot;:</span><br><span class="line">        all_course = all_course.order_by(&quot;-students&quot;)</span><br><span class="line">    elif sort == &quot;hot&quot;:</span><br><span class="line">        all_course = all_course.order_by(&quot;-click_nums&quot;)</span><br></pre></td></tr></table></figure><p>应放在分页之前。让分页处理所有筛选过的数据</p><p>return render时添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;sort&quot;:sort,</span><br></pre></td></tr></table></figure><blockquote><p>用来判断激活状态。</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180113/0DhjiABaA4.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180113/al219GFJJ1.png?imageslim" alt="mark"></p><p>修改a标签参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 热门课程推荐</span><br><span class="line">    hot_courses = Course.objects.all().order_by(&quot;-students&quot;)[:3]</span><br><span class="line">    return render</span><br><span class="line">     &quot;hot_courses&quot;:hot_courses</span><br></pre></td></tr></table></figure><p>修改html中<br><img src="http://myphoto.mtianyan.cn/blog/180113/FkIJ7mCjH3.png?imageslim" alt="mark"></p><p>for循环填充内容</p><p><img src="http://myphoto.mtianyan.cn/blog/180113/ji6bee4D31.png?imageslim" alt="mark"></p><p>这里的degree我们在数据库中填写的是字母。如何显示为中文。</p><ul><li>个人猜测: template if</li></ul><p>get_degree_display degree是字段名。专门用于choice字段显示</p><p>本小节完成对应commit：</p><blockquote><p>8-1完成课程列表页展示，分页，热门课程。</p></blockquote><h2 id="8-2-课程详情页1"><a href="#8-2-课程详情页1" class="headerlink" title="8-2 课程详情页1"></a>8-2 课程详情页1</h2><p>拷贝course_detail进入template目录</p><p>可以看出这个页面也是继承base页面的。将course_list的页面框架拿过来</p><p>替换面包屑。</p><p><img src="http://myphoto.mtianyan.cn/blog/180113/Jb07I8Ef1f.png?imageslim" alt="mark"></p><p>配置url访问</p><p>django2.0.1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 课程详情页</span><br><span class="line">re_path(&apos;course/(?P&lt;course_id&gt;\d+)/&apos;, CourseDetailView.as_view(), name=&quot;course_detail&quot;),</span><br></pre></td></tr></table></figure><p>书写对应访问的view</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> 课程详情处理view</span><br><span class="line"></span><br><span class="line">class CourseDetailView(View):</span><br><span class="line">    def get(self, request, course_id):</span><br><span class="line">        return  render(request, &quot;course-detail.html&quot;, &#123;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><p>尝试访问：</p><p>在列表展示页放入详情的url。</p><p><img src="http://myphoto.mtianyan.cn/blog/180113/6Ca5l1lBCf.png?imageslim" alt="mark"></p><p>有参数类型的把参数也传进来</p><p>进行数据填充:先取出当前的课程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 此处的id为表默认为我们添加的值。</span><br><span class="line">course = Course.objects.get(id = int(course_id))</span><br><span class="line"></span><br><span class="line">        return  render(request, &quot;course-detail.html&quot;, &#123;</span><br><span class="line">    &quot;course&quot;:course,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>html中取出数据:</p><p><img src="http://myphoto.mtianyan.cn/blog/180113/mk6Gb823k6.png?imageslim" alt="mark"></p><p>课程的章节数如何实现？</p><p>models.py中自定义方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def get_zj_nums(self):</span><br><span class="line">    # 获取课程章节数的方法</span><br><span class="line">    return self.lesson_set.all().count()</span><br></pre></td></tr></table></figure><p>添加课程类别字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">category = models.CharField(max_length=20, default=u&quot;&quot;, verbose_name=u&quot;课程类别&quot;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">makemigrations</span><br><span class="line">migrate</span><br></pre></td></tr></table></figure><p>operation中专门有张表是做用户学习记录的。</p><p>UserCourse查询有哪些学生学习了这门课</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 获取学习这门课程的用户</span><br><span class="line">def get_learn_users(self):</span><br><span class="line">    # 谁的里面添加了它做外键，他都可以取出来</span><br><span class="line">    return self.usercourse_set.all()[:5]</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180113/HKLll9bL4F.png?imageslim" alt="mark"></p><p>链式调用取出数据</p><p>添加一些用户课程进行验证</p><p><img src="http://myphoto.mtianyan.cn/blog/180113/3kmjFehf7F.png?imageslim" alt="mark"></p><p>可以看到已经大功告成</p><p>课程详情的view中添加clicknums+1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 增加课程点击数</span><br><span class="line">course.click_nums += 1</span><br><span class="line">course.save()</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180113/93LBHie41d.png?imageslim" alt="mark"></p><h2 id="8-3-课程详情页2"><a href="#8-3-课程详情页2" class="headerlink" title="8-3 课程详情页2"></a>8-3 课程详情页2</h2><p><img src="http://myphoto.mtianyan.cn/blog/180113/F0jLggJge6.png?imageslim" alt="mark"></p><p>tab_cont1 中填充我们自己的内容。</p><p><img src="http://myphoto.mtianyan.cn/blog/180113/8fDFkB7DIm.png?imageslim" alt="mark"></p><p>教师数自定义函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def get_teacher_nums:</span><br><span class="line">return self.teacher_set.all().count</span><br></pre></td></tr></table></figure><p>不用自定义函数的方法如下</p><p><img src="http://myphoto.mtianyan.cn/blog/180113/37jDHdha1l.png?imageslim" alt="mark"></p><h3 id="课程是否相关"><a href="#课程是否相关" class="headerlink" title="课程是否相关"></a>课程是否相关</h3><p>定义课程的tag ，如果tag相同，那么是相关课程。</p><p>courses/models.py:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tag = models.CharField(max_length=15, verbose_name=u&quot;课程标签&quot;, default=u&quot;&quot;)</span><br></pre></td></tr></table></figure><p>更改数据库后必然。此处略。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tag = course.tag</span><br><span class="line">       if tag:</span><br><span class="line">       # 需要从1开始不然会推荐自己</span><br><span class="line">           relate_courses = Course.objects.filter(tag=tag)[1:2]</span><br><span class="line">       else:</span><br><span class="line">           relate_courses = []</span><br></pre></td></tr></table></figure><p>return render加上：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;relate_courses&quot;:relate_courses,</span><br></pre></td></tr></table></figure><h3 id="收藏功能"><a href="#收藏功能" class="headerlink" title="收藏功能:"></a>收藏功能:</h3><p>将block js写到页面底部。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">//收藏分享</span><br><span class="line">function add_fav(current_elem, fav_id, fav_type)&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        cache: false,</span><br><span class="line">        type: &quot;POST&quot;,</span><br><span class="line">        url:&quot;&#123;% url &quot;org:add_fav&quot; %&#125;&quot;,</span><br><span class="line">        data:&#123;&apos;fav_id&apos;:fav_id, &apos;fav_type&apos;:fav_type&#125;,</span><br><span class="line">        async: true,</span><br><span class="line">        beforeSend:function(xhr, settings)&#123;</span><br><span class="line">            xhr.setRequestHeader(&quot;X-CSRFToken&quot;, &quot;&#123;&#123; csrf_token &#125;&#125;&quot;);</span><br><span class="line">        &#125;,</span><br><span class="line">        success: function(data) &#123;</span><br><span class="line">            if(data.status == &apos;fail&apos;)&#123;</span><br><span class="line">                if(data.msg == &apos;用户未登录&apos;)&#123;</span><br><span class="line">                    window.location.href=&quot;/login/&quot;;</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    alert(data.msg)</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;else if(data.status == &apos;success&apos;)&#123;</span><br><span class="line">                current_elem.text(data.msg)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$(&apos;#jsLeftBtn&apos;).on(&apos;click&apos;, function()&#123;</span><br><span class="line">    add_fav($(this), &#123;&#123; course.id &#125;&#125;, 1);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(&apos;#jsRightBtn&apos;).on(&apos;click&apos;, function()&#123;</span><br><span class="line">    add_fav($(this), &#123;&#123; course.course_org.id &#125;&#125;, 2);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>刷新后又不见了的问题，从view中传递has_fav的参数。前台进行判断。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 是否收藏课程</span><br><span class="line">      has_fav_course = False</span><br><span class="line">      has_fav_org = False</span><br><span class="line"></span><br><span class="line">      # 必须是用户已登录我们才需要判断。</span><br><span class="line">      if request.user.is_authenticated:</span><br><span class="line">          if UserFavorite.objects.filter(user=request.user, fav_id=course.id, fav_type=1):</span><br><span class="line">              has_fav_course = True</span><br><span class="line">          if UserFavorite.objects.filter(user=request.user, fav_id=course.course_org.id, fav_type=2):</span><br><span class="line">              has_fav_org = True</span><br></pre></td></tr></table></figure><p>return render</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;has_fav_course&quot;:has_fav_course,</span><br><span class="line">&quot;has_fav_org&quot;:has_fav_org,</span><br></pre></td></tr></table></figure><p>html中使用；</p><p><img src="http://myphoto.mtianyan.cn/blog/180113/KJc25I0KF8.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180113/mKHhjj2d32.png?imageslim" alt="mark"></p><blockquote><p>8-2&amp;3完成课程详情页展示，课程详情页机构，相关推荐课程。收藏课程，收藏机构。</p></blockquote><h2 id="8-4-课程章节信息"><a href="#8-4-课程章节信息" class="headerlink" title="8-4 课程章节信息"></a>8-4 课程章节信息</h2><p>章节信息，评论信息。</p><p>course comments 和 course video放入 template</p><p>它也有head和foot继承我们的base页面</p><p><img src="http://myphoto.mtianyan.cn/blog/180113/D4L8a0lmI0.png?imageslim" alt="mark"></p><p>配置相应的url:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 处理课程章节信息页面的view</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CourseInfoView</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, course_id)</span>:</span></span><br><span class="line">        <span class="comment"># 此处的id为表默认为我们添加的值。</span></span><br><span class="line">        course = Course.objects.get(id=int(course_id))</span><br><span class="line">        <span class="comment"># 是否收藏课程</span></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">"course-video.html"</span>, &#123;</span><br><span class="line">            <span class="string">"course"</span>: course,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 课程章节信息页</span><br><span class="line">url(r&apos;^info/(?P&lt;course_id&gt;\d+)/$&apos;, CourseInfoView.as_view(), name=&quot;course_info&quot;),</span><br></pre></td></tr></table></figure><p>用户点击开始学习链接修改</p><p><img src="http://myphoto.mtianyan.cn/blog/180113/hBAAmHlm4g.png?imageslim" alt="mark"></p><p>为课程添加章节以及视频。</p><h2 id="8-5-章节视频信息"><a href="#8-5-章节视频信息" class="headerlink" title="8-5 章节视频信息"></a>8-5 章节视频信息</h2><p>为video表添加视频对应的url信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url = models.CharField(max_length=200, default=&quot;http://blog.mtianyan.cn/&quot; ,verbose_name=u&quot;访问地址&quot;)</span><br></pre></td></tr></table></figure><p>将章节信息填充进页面</p><p>通过课程可以找到章节:course.lesson_set</p><p><img src="http://myphoto.mtianyan.cn/blog/180113/5GjjhDe40D.png?imageslim" alt="mark"></p><p>video的时长添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 使用分钟做后台记录(存储最小单位)前台转换</span><br><span class="line">   learn_times = models.IntegerField(default=0, verbose_name=u&quot;学习时长(分钟数)&quot;)</span><br></pre></td></tr></table></figure><p>资源下载功能:</p><p>后台自行上传点文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">all_resources = CourseResource.objects.filter(course=course)</span><br><span class="line"></span><br><span class="line">          &quot;all_resources&quot;:all_resources,</span><br></pre></td></tr></table></figure><p>或者前端直接:</p><p><img src="http://myphoto.mtianyan.cn/blog/180113/CL7fke0LGF.png?imageslim" alt="mark"></p><p>创建课程与讲师之间的外键关联</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">teacher = models.ForeignKey(Teacher,verbose_name=u&quot;讲师&quot;, null=True, blank=True)</span><br></pre></td></tr></table></figure><p>前往课程，设置讲师。</p><p><strong>注意:不要在Unicode方法里使用外键字段很容易报错。</strong></p><p>增加课程需知字段和老师告诉你学什么？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">you_need_know = models.CharField(max_length=300, default=u&quot;一颗勤学的心是本课程必要前提&quot;,verbose_name=u&quot;课程须知&quot;)</span><br><span class="line">  teacher_tell = models.CharField(max_length=300, default=u&quot;按时交作业,不然叫家长&quot;,verbose_name=u&quot;老师告诉你&quot;)</span><br></pre></td></tr></table></figure><p>将这两个字段显示到页面。</p><p>对应commit:</p><p>8-4&amp;5完成课程章节信息，课程资源，课程老师信息。</p><h2 id="8-6-课程评论页面"><a href="#8-6-课程评论页面" class="headerlink" title="8-6 课程评论页面"></a>8-6 课程评论页面</h2><p>配置课程评论的url和view</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class CommentsView(View):</span><br><span class="line">    def get(self, request, course_id):</span><br><span class="line">        # 此处的id为表默认为我们添加的值。</span><br><span class="line">        course = Course.objects.get(id=int(course_id))</span><br><span class="line">        all_resources = CourseResource.objects.filter(course=course)</span><br><span class="line">        return render(request, &quot;course-comment.html&quot;, &#123;</span><br><span class="line">            &quot;course&quot;: course,</span><br><span class="line">            &quot;all_resources&quot;: all_resources,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 课程章节信息页</span><br><span class="line">    re_path(&apos;comments/(?P&lt;course_id&gt;\d+)/&apos;, CommentsView.as_view(), name=&quot;course_comments&quot;),</span><br></pre></td></tr></table></figure><p>course video中跳转到评论链接</p><p>发表评论功能</p><p>ajax操作。如果发布成功就会刷新页面。</p><p>新建view用于添加评论:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># ajax方式添加评论</span><br><span class="line">class AddCommentsView(View):</span><br><span class="line">    def post(self, request):</span><br><span class="line">        if not request.user.is_authenticated:</span><br><span class="line">            # 未登录时返回json提示未登录，跳转到登录页面是在ajax中做的</span><br><span class="line">            return HttpResponse(&apos;&#123;&quot;status&quot;:&quot;fail&quot;, &quot;msg&quot;:&quot;用户未登录&quot;&#125;&apos;, content_type=&apos;application/json&apos;)</span><br><span class="line">        course_id = request.POST.get(&quot;course_id&quot;, 0)</span><br><span class="line">        comments = request.POST.get(&quot;comments&quot;, &quot;&quot;)</span><br><span class="line">        if int(course_id) &gt; 0 and comments:</span><br><span class="line">            course_comments = CourseComments()</span><br><span class="line">            # get只能取出一条数据，如果有多条抛出异常。没有数据也抛异常</span><br><span class="line">            # filter取一个列表出来，queryset。没有数据返回空的queryset不会抛异常</span><br><span class="line">            course = Course.objects.get(id = int(course_id))</span><br><span class="line">            # 外键存入要存入对象</span><br><span class="line">            course_comments.course = course</span><br><span class="line">            course_comments.comments = comments</span><br><span class="line">            course_comments.user = request.user</span><br><span class="line">            course_comments.save()</span><br><span class="line">            return HttpResponse(&apos;&#123;&quot;status&quot;:&quot;success&quot;, &quot;msg&quot;:&quot;评论成功&quot;&#125;&apos;, content_type=&apos;application/json&apos;)</span><br><span class="line">        else:</span><br><span class="line">            return HttpResponse(&apos;&#123;&quot;status&quot;:&quot;fail&quot;, &quot;msg&quot;:&quot;评论失败&quot;&#125;&apos;, content_type=&apos;application/json&apos;)</span><br></pre></td></tr></table></figure><p>添加配套的url:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加课程评论,已经把参数放到post当中了</span></span><br><span class="line">path(<span class="string">'add_comment/'</span>, AddCommentsView.as_view(), name=<span class="string">"add_comment"</span>),</span><br></pre></td></tr></table></figure><p>js代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    //添加评论</span><br><span class="line">    $(&apos;#js-pl-submit&apos;).on(&apos;click&apos;, function()&#123;</span><br><span class="line">        var comments = $(&quot;#js-pl-textarea&quot;).val()</span><br><span class="line">        if(comments == &quot;&quot;)&#123;</span><br><span class="line">            alert(&quot;评论不能为空&quot;)</span><br><span class="line">            return</span><br><span class="line">        &#125;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            cache: false,</span><br><span class="line">            type: &quot;POST&quot;,</span><br><span class="line">            url:&quot;&#123;% url &apos;course:add_comment&apos; %&#125;&quot;,</span><br><span class="line">            data:&#123;&apos;course_id&apos;:&#123;&#123; course.id &#125;&#125;, &apos;comments&apos;:comments&#125;,</span><br><span class="line">            async: true,</span><br><span class="line">            beforeSend:function(xhr, settings)&#123;</span><br><span class="line">                xhr.setRequestHeader(&quot;X-CSRFToken&quot;, &quot;&#123;&#123; csrf_token &#125;&#125;&quot;);</span><br><span class="line">            &#125;,</span><br><span class="line">            success: function(data) &#123;</span><br><span class="line">                if(data.status == &apos;fail&apos;)&#123;</span><br><span class="line">                    if(data.msg == &apos;用户未登录&apos;)&#123;</span><br><span class="line">                        window.location.href=&quot;/login/&quot;;</span><br><span class="line">                    &#125;else&#123;</span><br><span class="line">                        alert(data.msg)</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;else if(data.status == &apos;success&apos;)&#123;</span><br><span class="line">                    window.location.reload();//刷新当前页面.</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>后端已经将all_comments传过来了。然后for循环输出。</p><p>本小节完毕对应commit:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8-6完成课程评论功能，添加评论并展示到页面。</span><br></pre></td></tr></table></figure><h2 id="8-7-相关课程推荐"><a href="#8-7-相关课程推荐" class="headerlink" title="8-7 相关课程推荐:"></a>8-7 相关课程推荐:</h2><blockquote><p>学过该课程的还学过</p></blockquote><p>CourseInfoView</p><p>添加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 选出学了这门课的学生关系</span></span><br><span class="line">        user_courses = UserCourse.objects.filter(course= course)</span><br><span class="line">        <span class="comment"># 从关系中取出user_id</span></span><br><span class="line">        user_ids = [user_course.user_id <span class="keyword">for</span> user_course <span class="keyword">in</span> user_courses]</span><br><span class="line">        <span class="comment"># 这些用户学了的课程,外键会自动有id，取到字段</span></span><br><span class="line">        all_user_courses = UserCourse.objects.filter(user_id__in=user_ids)</span><br><span class="line">        <span class="comment"># 取出所有课程id</span></span><br><span class="line">        course_ids = [all_user_course.course_id <span class="keyword">for</span> all_user_course <span class="keyword">in</span> all_user_courses]</span><br><span class="line">        <span class="comment"># 获取学过该课程用户学过的其他课程</span></span><br><span class="line">        relate_courses = Course.objects.filter(id__in=course_ids).order_by(<span class="string">"-click_nums"</span>)[:<span class="number">5</span>]</span><br><span class="line">        <span class="comment"># 是否收藏课程</span></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">"course-video.html"</span>, &#123;</span><br><span class="line">            <span class="string">"course"</span>: course,</span><br><span class="line">            <span class="string">"all_resources"</span>: all_resources,</span><br><span class="line">            <span class="string">"relate_courses"</span>:relate_courses,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><blockquote><p>重点: 两个下划线代表我传进来的是一个list，你进行遍历。</p></blockquote><p>comments也做同样处理</p><p>用户未登录，不要让他能点进view</p><p>如果使用的是方法型编程可以使用装饰器<code>loginrequired</code></p><p>而我们使用的是类。所以要继承。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.mixins <span class="keyword">import</span> LoginRequiredMixin</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CourseInfoView</span><span class="params">(LoginRequiredMixin, View)</span>:</span></span><br><span class="line">    login_url = <span class="string">'/login/'</span></span><br><span class="line">    redirect_field_name = <span class="string">'redirect_to'</span></span><br></pre></td></tr></table></figure><blockquote><p>8-7完成相关课程推荐功能，取出相关课程去除本身。课程评论login require鉴权添加。登录页面重定向回登录前浏览页面</p></blockquote><h2 id="8-8-课程播放页面"><a href="#8-8-课程播放页面" class="headerlink" title="8-8 课程播放页面"></a>8-8 课程播放页面</h2><p>将视频播放页面拷贝到template目录</p><p>使用开源库video js</p><p><img src="http://myphoto.mtianyan.cn/blog/180113/f0j8Ffec87.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180113/kCAHJkbAdb.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180113/26FehA9AAf.png?imageslim" alt="mark"></p><p>添加访问的url和view；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 课程视频播放页</span><br><span class="line">url(r&apos;^video/(?P&lt;video_id&gt;\d+)/$&apos;, VideoPlayView.as_view(), name=&quot;video_play&quot;),</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 播放视频的view</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VideoPlayView</span><span class="params">(LoginRequiredMixin, View)</span>:</span></span><br><span class="line">    login_url = <span class="string">'/login/'</span></span><br><span class="line">    redirect_field_name = <span class="string">'next'</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, video_id)</span>:</span></span><br><span class="line">        <span class="comment"># 此处的id为表默认为我们添加的值。</span></span><br><span class="line">        video = Video.objects.get(id=int(video_id))</span><br><span class="line">        <span class="comment"># 找到对应的course</span></span><br><span class="line">        course = video.lesson.course</span><br><span class="line">        <span class="comment"># 查询用户是否开始学习了该课，如果还未学习则，加入用户课程表</span></span><br><span class="line">        user_courses = UserCourse.objects.filter(user=request.user, course=course)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> user_courses:</span><br><span class="line">            user_course = UserCourse(user=request.user, course=course)</span><br><span class="line">            user_course.save()</span><br><span class="line">        <span class="comment"># 查询课程资源</span></span><br><span class="line">        all_resources = CourseResource.objects.filter(course=course)</span><br><span class="line">        <span class="comment"># 选出学了这门课的学生关系</span></span><br><span class="line">        user_courses = UserCourse.objects.filter(course=course)</span><br><span class="line">        <span class="comment"># 从关系中取出user_id</span></span><br><span class="line">        user_ids = [user_course.user_id <span class="keyword">for</span> user_course <span class="keyword">in</span> user_courses]</span><br><span class="line">        <span class="comment"># 这些用户学了的课程,外键会自动有id，取到字段</span></span><br><span class="line">        all_user_courses = UserCourse.objects.filter(user_id__in=user_ids)</span><br><span class="line">        <span class="comment"># 取出所有课程id</span></span><br><span class="line">        course_ids = [user_course.course_id <span class="keyword">for</span> user_course <span class="keyword">in</span> all_user_courses]</span><br><span class="line">        <span class="comment"># 获取学过该课程用户学过的其他课程</span></span><br><span class="line">        relate_courses = Course.objects.filter(id__in=course_ids).order_by(<span class="string">"-click_nums"</span>).exclude(id=course.id)[:<span class="number">4</span>]</span><br><span class="line">        <span class="comment"># 是否收藏课程</span></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">"course-play.html"</span>, &#123;</span><br><span class="line">            <span class="string">"course"</span>: course,</span><br><span class="line">            <span class="string">"all_resources"</span>: all_resources,</span><br><span class="line">            <span class="string">"relate_courses"</span>: relate_courses,</span><br><span class="line">            <span class="string">"video"</span>: video,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><p>title 与面包屑的修改</p><p>对应commit:</p><blockquote><p>第八章公开课模块全部完成，完结撒花。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;三年六班，三年六班，李子明，李子明同学，你妈妈拿了两罐旺仔牛奶给你 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;note success&quot;&gt;&lt;p&gt;上帝说得有课程！ 得有详情 ！点了开始学习，得有章节！章节得有视频。&lt;br&gt;课程还得能评论下，还得有相关课程。于是这章出现了。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Django+Xadmin打造在线教育平台" scheme="http://blog.mtianyan.cn/categories/Django-Xadmin%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E5%B9%B3%E5%8F%B0/"/>
    
    
      <category term="Python" scheme="http://blog.mtianyan.cn/tags/Python/"/>
    
      <category term="Django" scheme="http://blog.mtianyan.cn/tags/Django/"/>
    
      <category term="在线教育平台" scheme="http://blog.mtianyan.cn/tags/%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E5%B9%B3%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>强力Django+杀手级Xadmin打造在线教育平台(七)</title>
    <link href="http://blog.mtianyan.cn/post/5678b347.html"/>
    <id>http://blog.mtianyan.cn/post/5678b347.html</id>
    <published>2018-01-12T14:09:17.000Z</published>
    <updated>2018-02-02T12:40:13.960Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>在绝望中寻找希望，人生终将辉煌 - 新东方 </p></blockquote><div class="note default"><p>作为一个正经的教育网站，我们更是拥有正规的机构合作: 比如来自火星的星星优培。</p><ul><li>完成授课机构的功能实现，</li></ul></div><a id="more"></a><h2 id="7-1-django-templates模板继承1"><a href="#7-1-django-templates模板继承1" class="headerlink" title="7-1 django templates模板继承1"></a>7-1 django templates模板继承1</h2><ul><li>机构可以筛选类别</li><li>机构可以根据所在地区进行分类</li></ul><p>右侧我要学习功能: form表单提交<br>右下：授课机构排名</p><p>页面头部与底部为全局头和全局底部。</p><h3 id="Django-template-共用头部底部机制"><a href="#Django-template-共用头部底部机制" class="headerlink" title="Django template 共用头部底部机制"></a>Django template 共用头部底部机制</h3><p>将head和foot放在两个html中，然后在写其他需要这两个部分的页面时include进来。</p><p>Django也是支持include机制的。</p><h3 id="include的问题"><a href="#include的问题" class="headerlink" title="include的问题"></a>include的问题</h3><p>include的进来的死页面，这时候该怎么办？</p><p>解决这种问题：进行模板的继承机制。定义一个父类的框架，子类可以替换其中一部分block，子类只需要重写自己需要改变的block。</p><h3 id="template中新建base-html"><a href="#template中新建base-html" class="headerlink" title="template中新建base.html"></a>template中新建base.html</h3><p>将课程机构列表页。orglist拷贝进template目录</p><p>将orglist内容替换base内容。</p><p><img src="http://myphoto.mtianyan.cn/blog/180111/Idbj8d04h5.png?imageslim" alt="mark"></p><p>将div收起来</p><p><img src="http://myphoto.mtianyan.cn/blog/180111/4gb7aiICk7.png?imageslim" alt="mark"></p><p>loadstaticfiles &amp; 修改静态文件路径为static</p><blockquote><p>这个步骤做过太多遍了，自行完成。耐心就行了。</p></blockquote><h3 id="定义父模板-包含head-amp-footer"><a href="#定义父模板-包含head-amp-footer" class="headerlink" title="定义父模板: 包含head &amp; footer"></a>定义父模板: 包含head &amp; footer</h3><p>title应该是可以被子页面替换的所以要包起来。</p><p><img src="http://myphoto.mtianyan.cn/blog/180111/3e96fGcGma.png?imageslim" alt="mark"></p><p>css有共用的部分，也有可以被子页面替换的部分。</p><p><img src="http://myphoto.mtianyan.cn/blog/180111/14mBAlhH8D.png?imageslim" alt="mark"></p><p>js同理</p><p><img src="http://myphoto.mtianyan.cn/blog/180111/bBjf5DBLh2.png?imageslim" alt="mark"></p><p>面包屑是需要被各个页面自己替换的。</p><p><img src="http://myphoto.mtianyan.cn/blog/180111/IekmEbK9A8.png?imageslim" alt="mark"></p><p>将正文内容包起来；</p><p><img src="http://myphoto.mtianyan.cn/blog/180111/hbhi9lBah2.png?imageslim" alt="mark"></p><p>此时base页面就制作好了</p><h2 id="7-2-开始orglist编写"><a href="#7-2-开始orglist编写" class="headerlink" title="7-2 开始orglist编写"></a>7-2 开始orglist编写</h2><p>第一步:清空所有内容</p><ul><li>继承base页面</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180111/9AL06C2hjh.png?imageslim" alt="mark"></p><ul><li>覆盖父类的title</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180111/BL8G2CkmGl.png?imageslim" alt="mark"></p><ul><li>书写课程机构view<br>organization/views.py</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># encoding: utf-8</span><br><span class="line">from django.views.generic.base import View</span><br><span class="line"># 处理课程机构列表的view</span><br><span class="line">class OrgView(View):</span><br><span class="line">    def get(self,request):</span><br><span class="line">        return render(request, &quot;org-list.html&quot;, &#123; &#125;)</span><br></pre></td></tr></table></figure><ul><li>Django2.0.1配置课程机构首页url</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 课程机构首页url</span><br><span class="line">path(&apos;org_list/&apos;, OrgView.as_view(), name=&quot;org_list&quot;),</span><br></pre></td></tr></table></figure><ul><li>Django1.9.8配置url：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 课程机构首页url</span><br><span class="line">url(r&apos;^org_list/$&apos;, OrgView.as_view(), name=&quot;org_list&quot;),</span><br></pre></td></tr></table></figure><h3 id="修改面包屑"><a href="#修改面包屑" class="headerlink" title="修改面包屑"></a>修改面包屑</h3><ul><li>base中只保留首页</li><li>org中重写block custom_bread</li><li><p>block之间没有先后顺序。</p></li><li><p>将base中block content拿到orglist重写</p></li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180111/emCCcfGcEd.png?imageslim" alt="mark"></p><ul><li>然后将base中block中间section删除掉</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180111/7KKbaGb97i.png?imageslim" alt="mark"></p><blockquote><p>orglist开始loadstaticfiles</p></blockquote><p><code>ctrl+d</code>快速删除</p><p><img src="http://myphoto.mtianyan.cn/blog/180111/D5hBDAjHeA.png?imageslim" alt="mark"></p><p>页面的继承关系使得变量也可以直接用</p><blockquote><p>比如user中的form数据传递到register文件当中.如果register继承的是base页面。<br>base页面当中也是可以用这些数据的。<code>参数的向上传递</code></p></blockquote><p>每个request对象都会传递到html中来，如果继承了base，request也会向上传递到base。<br>base中就可以加入我们的逻辑: 用户是否登录等。</p><p>小节结束对应commit:</p><blockquote><p>完成Django templates的继承关系了解，机构列表展示页。对应7-1 &amp; 2</p></blockquote><h2 id="7-3-课程机构列表页数据展示1"><a href="#7-3-课程机构列表页数据展示1" class="headerlink" title="7-3 课程机构列表页数据展示1"></a>7-3 课程机构列表页数据展示1</h2><p>确定由后台传过来的动态数据:</p><p>授课机构列表本身， 授课机构的排名，所在地区(后台取出所有地区), 机构类别写成静态，因为一般不怎么变动。</p><p>在xadmin中添加城市信息，课程信息。</p><p>添加城市</p><p><img src="http://myphoto.mtianyan.cn/blog/180111/CJG79b8JJ5.png?imageslim" alt="mark"></p><p>添加机构。</p><p>插播知识点：</p><p><img src="http://myphoto.mtianyan.cn/blog/180111/325Id7l954.png?imageslim" alt="mark"></p><p>这里指定的路径是一个相对路径</p><p>setting中要配置我们把文件存放在哪个根目录之下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 设置我们上传文件的路径</span><br><span class="line"></span><br><span class="line">MEDIA_URL = &apos;/media/&apos;</span><br><span class="line">MEDIA_ROOT = os.path.join(BASE_DIR, &apos;media&apos;)</span><br></pre></td></tr></table></figure><p>在项目根目录创建media文件夹</p><p>在后台上传图片</p><p><img src="http://myphoto.mtianyan.cn/blog/180111/EG198BJgi3.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180111/I4A16CDal5.png?imageslim" alt="mark"></p><p>修改机构信息中封面图为logo</p><p>自行添加十个课程机构</p><h3 id="models中添加机构类别"><a href="#models中添加机构类别" class="headerlink" title="models中添加机构类别"></a>models中添加机构类别</h3><p>organization/models.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CourseOrg</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    ORG_CHOICES =(</span><br><span class="line">        (<span class="string">"pxjg"</span>, <span class="string">u"培训机构"</span>),</span><br><span class="line">        (<span class="string">"gx"</span>, <span class="string">u"高校"</span>),</span><br><span class="line">        (<span class="string">"gr"</span>, <span class="string">u"个人"</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    name = models.CharField(max_length=<span class="number">50</span>, verbose_name=<span class="string">u"机构名称"</span>)</span><br><span class="line">    <span class="comment"># 机构描述，后面会替换为富文本展示</span></span><br><span class="line">    desc = models.TextField(verbose_name=<span class="string">u"机构描述"</span>)</span><br><span class="line">    <span class="comment"># 机构类别:</span></span><br><span class="line">    category = models.CharField(max_length=<span class="number">20</span>, choices=ORG_CHOICES, verbose_name=<span class="string">u"机构类别"</span>, default=<span class="string">"pxjg"</span>)</span><br></pre></td></tr></table></figure><p>修改了models之后做数据库的变动:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">makemigrations organization</span><br><span class="line">migrate organization</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180111/lFLGKIH5fE.png?imageslim" alt="mark"></p><p>完成之后打开Navicat进行验证：</p><p><img src="http://myphoto.mtianyan.cn/blog/180111/C6B1Hb7LKD.png?imageslim" alt="mark"></p><p>可以看到新增了。</p><h3 id="完善我们的view"><a href="#完善我们的view" class="headerlink" title="完善我们的view"></a>完善我们的view</h3><p>将列表里的静态数据变成后台获取的动态数据</p><p>organization/views.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> CourseOrg, CityDict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrgView</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="comment"># 查找到所有的课程机构</span></span><br><span class="line">        all_orgs = CourseOrg.objects.all()</span><br><span class="line">        <span class="comment"># 取出所有的城市</span></span><br><span class="line">        all_citys = CityDict.objects.all()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">"org-list.html"</span>, &#123;</span><br><span class="line">            <span class="string">"all_orgs"</span>:all_orgs,</span><br><span class="line">            <span class="string">"all_citys"</span>: all_citys,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><h2 id="7-4-课程机构列表页数据展示2"><a href="#7-4-课程机构列表页数据展示2" class="headerlink" title="7-4 课程机构列表页数据展示2"></a>7-4 课程机构列表页数据展示2</h2><h3 id="前去html中进行数据填充"><a href="#前去html中进行数据填充" class="headerlink" title="前去html中进行数据填充"></a>前去html中进行数据填充</h3><p><img src="http://myphoto.mtianyan.cn/blog/180111/amEhg6kFbf.png?imageslim" alt="mark"></p><blockquote><p>可以看到所有城市是通过a标签，当前选中城市为active。</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180111/LcIB9jeKem.png?imageslim" alt="mark"></p><p>之后把下面的写死的城市删除掉。</p><p><img src="http://myphoto.mtianyan.cn/blog/180111/hg5g6Cc7f0.png?imageslim" alt="mark"></p><p>这时就是我们在后台添加的数据了</p><p><img src="http://myphoto.mtianyan.cn/blog/180111/8D6a8Dl3h3.png?imageslim" alt="mark"></p><p>可以看到每个课程机构都是一个dl</p><p>同理使用for循环。</p><h3 id="如何将imageField转换为图片地址"><a href="#如何将imageField转换为图片地址" class="headerlink" title="如何将imageField转换为图片地址"></a>如何将imageField转换为图片地址</h3><p>数据库中img存放的是字符串：相对路径</p><p><img src="http://myphoto.mtianyan.cn/blog/180111/k1DG3bflLH.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180111/L7d5cE3D7h.png?imageslim" alt="mark"></p><p>上图这种取法会取出一个相对地址。</p><p><img src="http://myphoto.mtianyan.cn/blog/180111/6ejHjBFb9c.png?imageslim" alt="mark"></p><p>将setting中配置的mediaurl放在前面可以补全地址。</p><h3 id="设置media处理器"><a href="#设置media处理器" class="headerlink" title="设置media处理器"></a>设置media处理器</h3><p><img src="http://myphoto.mtianyan.cn/blog/180111/H0Gjeci29F.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180111/E18ecbCEEI.png?imageslim" alt="mark"></p><blockquote><p>注册之后，mediaurl将可以在html中使用</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180111/c2kA33KE9E.png?imageslim" alt="mark"></p><p>图片还是没有显示。因为url中没有处理图片相应路径的url</p><p>Django1.9.8 urls.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.static <span class="keyword">import</span> serve</span><br><span class="line">    <span class="comment"># 处理图片显示的url,使用Django自带serve,传入参数告诉它去哪个路径找，我们有配置好的路径MEDIAROOT</span></span><br><span class="line">    url(<span class="string">r'^media/(?P&lt;path&gt;.*)$'</span>, serve, &#123;<span class="string">"document_root"</span>: MEDIA_ROOT &#125;)</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180111/cKmHj6E9gi.png?imageslim" alt="mark"></p><p>Django2.0.1 urls.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.static <span class="keyword">import</span> serve</span><br><span class="line"><span class="comment"># 处理图片显示的url,使用Django自带serve,传入参数告诉它去哪个路径找，我们有配置好的路径MEDIAROOT</span></span><br><span class="line">    re_path(<span class="string">r'^media/(?P&lt;path&gt;.*)'</span>, serve, &#123;<span class="string">"document_root"</span>: MEDIA_ROOT &#125;)</span><br></pre></td></tr></table></figure><h3 id="完善xadmin的adminx为机构添加分类索引字段"><a href="#完善xadmin的adminx为机构添加分类索引字段" class="headerlink" title="完善xadmin的adminx为机构添加分类索引字段"></a>完善xadmin的adminx为机构添加分类索引字段</h3><p>organization/adminx.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 机构课程信息管理器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CourseOrgAdmin</span><span class="params">(object)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'name'</span>, <span class="string">'desc'</span>,<span class="string">'category'</span>, <span class="string">'click_nums'</span>, <span class="string">'fav_nums'</span>,<span class="string">'add_time'</span> ]</span><br><span class="line">    search_fields = [<span class="string">'name'</span>, <span class="string">'desc'</span>, <span class="string">'category'</span>,<span class="string">'click_nums'</span>, <span class="string">'fav_nums'</span>]</span><br><span class="line">    list_filter = [<span class="string">'name'</span>, <span class="string">'desc'</span>,<span class="string">'category'</span> ,<span class="string">'click_nums'</span>, <span class="string">'fav_nums'</span>,<span class="string">'city__name'</span>,<span class="string">'address'</span>,<span class="string">'add_time'</span>]</span><br></pre></td></tr></table></figure><h3 id="去除加载小圈圈"><a href="#去除加载小圈圈" class="headerlink" title="去除加载小圈圈"></a>去除加载小圈圈</h3><p>static/css/style.css中scrollLoading置为空:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.scrollLoading &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>完成后台数据添加，列表页数据展示。对应7-3&amp;7-4</p></blockquote><h2 id="7-5-列表分页功能"><a href="#7-5-列表分页功能" class="headerlink" title="7-5 列表分页功能"></a>7-5 列表分页功能</h2><p>github搜索django-pure-pagination</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django-pure-pagination</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180111/cA22hF4fi7.png?imageslim" alt="mark"></p><p>install app中添加:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'pure_pagination'</span>,</span><br></pre></td></tr></table></figure><p>可设置参数；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PAGINATION_SETTINGS = &#123;</span><br><span class="line">    &apos;PAGE_RANGE_DISPLAYED&apos;: 10,</span><br><span class="line">    &apos;MARGIN_PAGES_DISPLAYED&apos;: 2,</span><br><span class="line">    &apos;SHOW_FIRST_PAGE_WHEN_INVALID&apos;: True,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180111/8KAAL61KBk.png?imageslim" alt="mark"></p><p><code>PAGE_RANGE_DISPLAYED</code>是总共会显示多少个page。(包括省略号，包括两边和中间)<br><code>MARGIN_PAGES_DISPLAYED</code>是旁边会显示多少个。<br><code>SHOW_FIRST_PAGE_WHEN_INVALID</code>:当输入页数不合法是否要跳到第一页</p><p>官方实例；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render_to_response</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pure_pagination <span class="keyword">import</span> Paginator, EmptyPage, PageNotAnInteger</span><br><span class="line"></span><br><span class="line"><span class="comment"># 尝试获取页数参数</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        page = request.GET.get(<span class="string">'page'</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">except</span> PageNotAnInteger:</span><br><span class="line">        page = <span class="number">1</span></span><br><span class="line">    <span class="comment"># objects是取到的数据</span></span><br><span class="line">    objects = [<span class="string">'john'</span>, <span class="string">'edward'</span>, <span class="string">'josh'</span>, <span class="string">'frank'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Provide Paginator with the request object for complete querystring generation</span></span><br><span class="line">    <span class="comment"># 对于取到的数据进行分页处理。</span></span><br><span class="line">    p = Paginator(objects, request=request)</span><br><span class="line">    <span class="comment"># 此时前台显示的就应该是我们此时获取的第几页的数据</span></span><br><span class="line">    people = p.page(page)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_to_response(<span class="string">'index.html'</span>, &#123;</span><br><span class="line">        <span class="string">'people'</span>: people,</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们对照着的实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pure_pagination <span class="keyword">import</span> Paginator, EmptyPage, PageNotAnInteger</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrgView</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="comment"># 查找到所有的课程机构</span></span><br><span class="line">        all_orgs = CourseOrg.objects.all()</span><br><span class="line">        <span class="comment"># 总共有多少家机构使用count进行统计</span></span><br><span class="line">        org_nums = all_orgs.count()</span><br><span class="line">        <span class="comment"># 取出所有的城市</span></span><br><span class="line">        all_city = CityDict.objects.all()</span><br><span class="line">        <span class="comment"># 对课程机构进行分页</span></span><br><span class="line">        <span class="comment"># 尝试获取前台get请求传递过来的page参数</span></span><br><span class="line">        <span class="comment"># 如果是不合法的配置参数默认返回第一页</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            page = request.GET.get(<span class="string">'page'</span>, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">except</span> PageNotAnInteger:</span><br><span class="line">            page = <span class="number">1</span></span><br><span class="line">        <span class="comment"># 这里指从allorg中取五个出来，每页显示5个</span></span><br><span class="line">        p = Paginator(all_orgs, <span class="number">5</span>, request=request)</span><br><span class="line">        orgs = p.page(page)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">"org-list.html"</span>, &#123;</span><br><span class="line">            <span class="string">"all_orgs"</span>:orgs,</span><br><span class="line">            <span class="string">"all_city"</span>: all_city,</span><br><span class="line">            <span class="string">"org_nums"</span>: org_nums,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><h3 id="对于html中分页进行配置"><a href="#对于html中分页进行配置" class="headerlink" title="对于html中分页进行配置"></a>对于html中分页进行配置</h3><blockquote><p>不再是objects，而是objectlist</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180111/jadkKHKkbI.png?imageslim" alt="mark"></p><blockquote><p>使用默认的render<br><img src="http://myphoto.mtianyan.cn/blog/180111/fcae2A0E0c.png?imageslim" alt="mark"></p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180111/8gcmfdHb4J.png?imageslim" alt="mark"></p><h3 id="自定义html的样式"><a href="#自定义html的样式" class="headerlink" title="自定义html的样式"></a>自定义html的样式</h3><p><img src="http://myphoto.mtianyan.cn/blog/180112/DmC94JAmh3.png?imageslim" alt="mark"></p><p>本小节完成对应commit:</p><blockquote><p>7-3, 4 &amp; 5:完成列表数据展示列表分页功能：使用pure_pagination</p></blockquote><h2 id="7-6-分类筛选功能"><a href="#7-6-分类筛选功能" class="headerlink" title="7-6 分类筛选功能"></a>7-6 分类筛选功能</h2><p><img src="http://myphoto.mtianyan.cn/blog/180112/jIL4FAdjJb.png?imageslim" alt="mark"></p><p>当用户点击某一个city时对应加上参数city的id</p><h3 id="在后台处理这个city"><a href="#在后台处理这个city" class="headerlink" title="在后台处理这个city"></a>在后台处理这个city</h3><p><img src="http://myphoto.mtianyan.cn/blog/180112/59iFhGLaCD.png?imageslim" alt="mark"></p><p>获取传入的参数进行进一步筛选。</p><p><img src="http://myphoto.mtianyan.cn/blog/180112/aiKJL6kCKL.png?imageslim" alt="mark"></p><blockquote><p>将city_id传回html，使得可以知道哪个是选中的。</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180112/mmChH6l2j9.png?imageslim" alt="mark"></p><p>因为city.id是后端传回来的值是一个int。所以我们要做类型转换。</p><p><img src="http://myphoto.mtianyan.cn/blog/180112/GJa43hh95F.png?imageslim" alt="mark"></p><p>当city_id为空的时候，显示全部。</p><h3 id="后台处理类别"><a href="#后台处理类别" class="headerlink" title="后台处理类别"></a>后台处理类别</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 类别筛选</span><br><span class="line">      category = request.GET.get(&apos;ct&apos;, &quot;&quot;)</span><br><span class="line">      if category:</span><br><span class="line">          # 我们就在机构中作进一步筛选类别</span><br><span class="line">          all_orgs = all_orgs.filter(category=category)</span><br></pre></td></tr></table></figure><p>返回前台类别值以active</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">return render(request, &quot;org-list.html&quot;, &#123;</span><br><span class="line">          &quot;all_orgs&quot;:orgs,</span><br><span class="line">          &quot;all_city&quot;: all_city,</span><br><span class="line">          &quot;org_nums&quot;: org_nums,</span><br><span class="line">          &quot;city_id&quot;:city_id,</span><br><span class="line">          &quot;category&quot;:category,</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180112/Fgl4eHGJb8.png?imageslim" alt="mark"></p><p>对于类别做同样的ifequal判断</p><p><img src="http://myphoto.mtianyan.cn/blog/180112/me43dl1f0g.png?imageslim" alt="mark"></p><p>如上图所示进行城市与分类的联动:</p><p>当选择全部类别的时候，就只通过当前城市id。<br>当选择全部城市的时候，就只通过当前目录id。<br>当两者都选的时候使用&amp;连接。</p><p>刚才统计机构数目过早，应该移到后面后面已经筛选过后，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 总共有多少家机构使用count进行统计</span><br><span class="line">       org_nums = all_orgs.count()</span><br></pre></td></tr></table></figure><h3 id="课程机构排名"><a href="#课程机构排名" class="headerlink" title="课程机构排名"></a>课程机构排名</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 热门机构,如果不加负号会是有小到大。</span><br><span class="line">     hot_orgs = all_orgs.order_by(&quot;-click_nums&quot;)[:3]</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180112/BiKdf066CL.png?imageslim" alt="mark"></p><p>循环时内置变量forloop.counter取当前循环到第几次</p><p>待完成:点击排名机构的连接</p><h3 id="课程机构排序。"><a href="#课程机构排序。" class="headerlink" title="课程机构排序。"></a>课程机构排序。</h3><p>学习人数，课程数</p><p>organization/models.py<br>CourseOrg</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当学生点击学习课程，找到所属机构，学习人数加1</span></span><br><span class="line">   students = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">u"学习人数"</span>)</span><br><span class="line">   <span class="comment"># 当发布课程就加1</span></span><br><span class="line">   course_nums =  models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">u"课程数"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">makemigrations organization</span><br><span class="line">migrate organization</span><br></pre></td></tr></table></figure><p>前端页面学习人数，添加参数sort</p><p><img src="http://myphoto.mtianyan.cn/blog/180112/dbFlbHIBmb.png?imageslim" alt="mark"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进行排序</span></span><br><span class="line">       sort = request.GET.get(<span class="string">'sort'</span>, <span class="string">""</span>)</span><br><span class="line">       <span class="keyword">if</span> sort:</span><br><span class="line">           <span class="keyword">if</span> sort == <span class="string">"students"</span>:</span><br><span class="line">               all_orgs = all_orgs.order_by(<span class="string">"-students"</span>)</span><br><span class="line">           <span class="keyword">elif</span> sort == <span class="string">"courses"</span>:</span><br><span class="line">               all_orgs = all_orgs.order_by(<span class="string">"-course_nums"</span>)</span><br></pre></td></tr></table></figure><p>添加选择效果</p><p><img src="http://myphoto.mtianyan.cn/blog/180112/DJeKIb9cK1.png?imageslim" alt="mark"></p><h2 id="7-7-modelform-提交我要学习咨询1"><a href="#7-7-modelform-提交我要学习咨询1" class="headerlink" title="7-7 modelform 提交我要学习咨询1"></a>7-7 modelform 提交我要学习咨询1</h2><p>对应表<code>userask</code></p><p><code>form</code>会对字段先做验证，然后保存到数据库中。</p><p>可以看到我们的forms和我们的model中有很多内容是一样的。我们如何让代码重复利用呢？</p><p>使用modelform解决这个问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> operation.models <span class="keyword">import</span> UserAsk</span><br><span class="line"></span><br><span class="line">__author__ = <span class="string">'mtianyan'</span></span><br><span class="line">__date__ = <span class="string">'2018/1/12 0012 03:20'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 普通版本的form</span></span><br><span class="line"><span class="comment"># class UserAskForm(forms.Form):</span></span><br><span class="line"><span class="comment">#     name = forms.CharField(required=True, min_length=2, max_length=20)</span></span><br><span class="line"><span class="comment">#     phone = forms.CharField(required=True, max_length=11, min_length=11)</span></span><br><span class="line"><span class="comment">#     course_name = forms.CharField(required=True, min_length=5, max_length=50)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进阶版本的modelform：它可以向model一样save</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnotherUserForm</span><span class="params">(forms.ModelForm)</span>:</span></span><br><span class="line">    <span class="comment"># 继承之余还可以新增字段</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 是由哪个model转换的</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = UserAsk</span><br><span class="line">        <span class="comment"># 我需要验证的字段</span></span><br><span class="line">        fields = [<span class="string">'name'</span>,<span class="string">'mobile'</span>,<span class="string">'course_name'</span>]</span><br></pre></td></tr></table></figure><h3 id="include的机制配置应用自己的url"><a href="#include的机制配置应用自己的url" class="headerlink" title="include的机制配置应用自己的url"></a>include的机制配置应用自己的url</h3><p>django1.9.8 创建organization/urls.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line">__author__ = <span class="string">'mtianyan'</span></span><br><span class="line">__date__ = <span class="string">'2018/1/12 0012 06:20'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> organization.views <span class="keyword">import</span> OrgView</span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># 课程机构列表url</span></span><br><span class="line">    url(<span class="string">'list/&amp;'</span>, OrgView.as_view(), name=<span class="string">"org_list"</span>),</span><br></pre></td></tr></table></figure><p>django1.9.8 Mxonline2/urls.py:<br>删掉orglist,新增如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 课程机构app的url配置</span></span><br><span class="line">  url(<span class="string">r"^org/"</span>, include(<span class="string">'organization.urls'</span>,namespace=<span class="string">"org"</span>)),</span><br></pre></td></tr></table></figure><p>django2.0.1: 新建organization/urls.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> organization.views <span class="keyword">import</span> OrgView</span><br><span class="line"></span><br><span class="line">__author__ = <span class="string">'mtianyan'</span></span><br><span class="line">__date__ = <span class="string">'2018/1/12 0012 03:28'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># 课程机构列表url</span></span><br><span class="line">    path(<span class="string">'list/'</span>, OrgView.as_view(), name=<span class="string">"org_list"</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>django2.0.1: urls.py中:</p><p>删掉org_list，新增include</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 课程机构app的url配置</span><br><span class="line">path(&quot;org/&quot;, include(&apos;organization.urls&apos;,namespace=&quot;org&quot;)),</span><br></pre></td></tr></table></figure><p>使用命名空间防止重复</p><p><img src="http://myphoto.mtianyan.cn/blog/180112/cH5Dmm14Cj.png?imageslim" alt="mark"></p><p>解决Django2.0.1报错:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   <span class="string">'Specifying a namespace in include() without providing an app_name '</span> </span><br><span class="line">django.core.exceptions.ImproperlyConfigured: Specifying a namespace <span class="keyword">in</span> </span><br><span class="line">include() without providing an app_name <span class="keyword">is</span> <span class="keyword">not</span> supported. Set the app_name </span><br><span class="line">attribute <span class="keyword">in</span> the included module, <span class="keyword">or</span> <span class="keyword">pass</span> a <span class="number">2</span>-tuple containing the list of </span><br><span class="line">patterns <span class="keyword">and</span> app_name instead.</span><br></pre></td></tr></table></figure><p>在自己的app下的urls中写上appname</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># encoding: utf-8</span><br><span class="line">from organization.views import OrgView</span><br><span class="line"></span><br><span class="line">__author__ = &apos;mtianyan&apos;</span><br><span class="line">__date__ = &apos;2018/1/12 0012 03:28&apos;</span><br><span class="line"></span><br><span class="line">from django.urls import path, re_path</span><br><span class="line"></span><br><span class="line">app_name = &quot;organization&quot;</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line"></span><br><span class="line">    # 课程机构列表url</span><br><span class="line">    path(&apos;list/&apos;, OrgView.as_view(), name=&quot;org_list&quot;),</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>html中使用命名空间方式:</p><p><img src="http://myphoto.mtianyan.cn/blog/180112/FkaCFJ4B7h.png?imageslim" alt="mark"></p><h3 id="使用modelform做提交"><a href="#使用modelform做提交" class="headerlink" title="使用modelform做提交"></a>使用modelform做提交</h3><p>比较合理的操作是异步的，不会对整个页面进行刷新。<br>如果有错误，显示错误。一种ajax的异步操作。</p><p>因此我们此时不能直接render一个页面回来。<br>应该是给前端返回json数据，而不是页面</p><p><code>HttpResponse</code>类指明给用户返回哪种类型数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from django.http import HttpResponse</span><br></pre></td></tr></table></figure><p>配置一个modelform的view</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用户添加我要学习</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddUserAskView</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="comment"># 处理表单提交当然post</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        userask_form = UserAskForm(request.POST)</span><br><span class="line">        <span class="comment"># 判断该form是否有效</span></span><br><span class="line">        <span class="keyword">if</span> userask_form.is_valid():</span><br><span class="line">            <span class="comment"># 这里是modelform和form的区别</span></span><br><span class="line">            <span class="comment"># 它有model的属性</span></span><br><span class="line">            <span class="comment"># 当commit为true进行真正保存</span></span><br><span class="line">            user_ask = userask_form.save(commit=<span class="keyword">True</span>)</span><br><span class="line">            <span class="comment"># 这样就不需要把一个一个字段取出来然后存到model的对象中之后save</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 如果保存成功,返回json字符串,后面content type是告诉浏览器的,</span></span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">"&#123;'status': 'success'&#125;"</span>, content_type=<span class="string">'application/json'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 如果保存失败，返回json字符串,并将form的报错信息通过msg传递到前端</span></span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">"&#123;'status': 'fail', 'msg':&#123;0&#125;&#125;"</span>.format(userask_form.errors),  content_type=<span class="string">'application/json'</span>)</span><br></pre></td></tr></table></figure><h3 id="配置相应的url"><a href="#配置相应的url" class="headerlink" title="配置相应的url"></a>配置相应的url</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 添加我要学习</span><br><span class="line">path(&apos;add_ask/&apos;, AddUserAskView.as_view(), name=&quot;add_ask&quot;)</span><br></pre></td></tr></table></figure><h2 id="7-8-modelform-提交我要学习"><a href="#7-8-modelform-提交我要学习" class="headerlink" title="7-8 modelform 提交我要学习"></a>7-8 modelform 提交我要学习</h2><h3 id="分析ajax请求"><a href="#分析ajax请求" class="headerlink" title="分析ajax请求"></a>分析ajax请求</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(function()&#123;</span><br><span class="line">        $(&apos;#jsStayBtn&apos;).on(&apos;click&apos;, function()&#123;</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                cache: false,</span><br><span class="line">                type: &quot;POST&quot;,</span><br><span class="line">  url:&quot;&#123;% url &quot;org:add_ask&quot; %&#125;&quot;,</span><br><span class="line">                data:$(&apos;#jsStayForm&apos;).serialize(),</span><br><span class="line">                async: true,</span><br><span class="line">                success: function(data) &#123;</span><br><span class="line">                    if(data.status == &apos;success&apos;)&#123;</span><br><span class="line">                        $(&apos;#jsStayForm&apos;)[0].reset();</span><br><span class="line">                        alert(&quot;提交成功&quot;)</span><br><span class="line">                    &#125;else if(data.status == &apos;fail&apos;)&#123;</span><br><span class="line">                        $(&apos;#jsCompanyTips&apos;).html(data.msg)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>监听这个button，用户如果点击了button。我们来向这个url进行post请求。<br>将我们的表单进行序列化。</p></blockquote><p>form表单添加crsf_token</p><p>如果后台返回的状态值为success，那么我们将弹出提交成功。<br>失败，就会在错误提示框中写入。</p><h3 id="手机号码正则表达式验证"><a href="#手机号码正则表达式验证" class="headerlink" title="手机号码正则表达式验证:"></a>手机号码正则表达式验证:</h3><p>organization/forms.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 手机号的正则表达式验证</span><br><span class="line">    def clean_mobile(self):</span><br><span class="line">        mobile = self.cleaned_data[&apos;mobile&apos;]</span><br><span class="line">        REGEX_MOBILE = &quot;^1[358]\d&#123;9&#125;$|^147\d&#123;8&#125;$|^176\d&#123;8&#125;$&quot;</span><br><span class="line">        p = re.compile(REGEX_MOBILE)</span><br><span class="line">        if p.match(mobile):</span><br><span class="line">            return mobile</span><br><span class="line">        else:</span><br><span class="line">            raise forms.ValidationError(u&quot;手机号码非法&quot;, code=&quot;mobile_invalid&quot;)</span><br></pre></td></tr></table></figure><p>本小节完毕对应提交commit:</p><blockquote><p>7-7&amp;8 使用modelform完成表单我要学习的异步提交</p></blockquote><h2 id="7-9-机构详情"><a href="#7-9-机构详情" class="headerlink" title="7-9 机构详情"></a>7-9 机构详情</h2><ul><li>机构首页</li><li>机构课程</li><li>机构介绍</li><li>机构讲师</li></ul><p>登录xadmin添加基础的必要数据。添加课程与讲师。</p><p>课程中应该有一个外键指向它是哪个机构的。</p><p>courses/models.py</p><p>Django1.9.8中:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> organization.models <span class="keyword">import</span> CourseOrg</span><br><span class="line"></span><br><span class="line">course_org = models.ForeignKey(CourseOrg, verbose_name=<span class="string">u"所属机构"</span>,null=<span class="keyword">True</span>,blank=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>django2.0.1下；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">course_org = models.ForeignKey(CourseOrg,on_delete=models.CASCADE, verbose_name=<span class="string">u"所属机构"</span>,null=<span class="keyword">True</span>,blank=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>新增外键字段应该<code>null=true,blank=true。</code></p><blockquote><p>因为历史数据中没有这个外键字段</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">makemigration course</span><br><span class="line">migrate course</span><br></pre></td></tr></table></figure><p>将前端给我们的org相关的四个页面拷进template</p><p><img src="http://myphoto.mtianyan.cn/blog/180112/BeIFlkf97m.png?imageslim" alt="mark"></p><p>新建org_base页面</p><p>将org_home页面内容拿过去。</p><p><img src="http://myphoto.mtianyan.cn/blog/180112/DFHg4mGkFb.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180112/k09CHekje2.png?imageslim" alt="mark"></p><ul><li>loadstaticfiles -&gt; 改css文件路径-&gt;改js文件路径-&gt;改图片路径</li><li>改已经实现的url。-&gt;将子页面继承后需要改得地方使用block包裹。</li></ul><p>将home页面清空</p><p><img src="http://myphoto.mtianyan.cn/blog/180112/BBI8iLE97D.png?imageslim" alt="mark"></p><p>完成替换之后添加访问的view以及URl</p><p>organization/views.py:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class OrgHomeView(View):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">   机构首页</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def get(self, request, org_id):</span><br><span class="line">        # 根据id取到课程机构</span><br><span class="line">        course_org = CourseOrg.objects.get(id= int(org_id))</span><br><span class="line">        # 通过课程机构找到课程。内建的变量，找到指向这个字段的外键引用</span><br><span class="line">        all_courses = course_org.course_set.all()[:4]</span><br><span class="line">        all_teacher = course_org.teacher_set.all()[:2]</span><br><span class="line"></span><br><span class="line">        return render(request, &apos;org-detail-homepage.html&apos;,&#123;</span><br><span class="line">           &apos;all_courses&apos;:all_courses,</span><br><span class="line">            &apos;all_teacher&apos;:all_teacher,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><p>Django2.0.1下url</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">   # home页面,取纯数字</span><br><span class="line">re_path(&apos;home/(?P&lt;org_id&gt;\d+)/&apos;, OrgHomeView.as_view(), name=&quot;org_home&quot;),</span><br></pre></td></tr></table></figure><p>django1.9.8下url:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># home页面,取纯数字</span><br><span class="line">url(r&apos;home/(?P&lt;org_id&gt;\d+)/$&apos;, OrgHomeView.as_view(), name=&quot;org_home&quot;)</span><br></pre></td></tr></table></figure><p>html中使用for循环遍历:</p><p><img src="http://myphoto.mtianyan.cn/blog/180112/ECJ36kDclf.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180112/4j037g1DKj.png?imageslim" alt="mark"></p><blockquote><p>如上图可以直接通过外键字段再找到外键对象的字段</p></blockquote><p>templates/org-list.html</p><p>配置里面跳转到详情页的url</p><p><img src="http://myphoto.mtianyan.cn/blog/180112/90m2l2A0Dj.png?imageslim" alt="mark"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> render(request, <span class="string">'org-detail-homepage.html'</span>,&#123;</span><br><span class="line">   <span class="string">'all_courses'</span>:all_courses,</span><br><span class="line">    <span class="string">'all_teacher'</span>:all_teacher,</span><br><span class="line">    <span class="string">'course_org'</span>: course_org,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>将<code>course_org</code>也return回来，就可以把网页里这部分值替换掉</p><p>templates/org_base.html</p><p>数值会随继承链向上传递。</p><p><img src="http://myphoto.mtianyan.cn/blog/180112/0ED5bcC9Jf.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180112/I83bFbddC3.png?imageslim" alt="mark"></p><h3 id="为讲师增加头像字段"><a href="#为讲师增加头像字段" class="headerlink" title="为讲师增加头像字段"></a>为讲师增加头像字段</h3><p>organization/models.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">image = models.ImageField(</span><br><span class="line">    default= &apos;&apos;,</span><br><span class="line">    upload_to=&quot;teacher/%Y/%m&quot;,</span><br><span class="line">    verbose_name=u&quot;头像&quot;,</span><br><span class="line">    max_length=100)</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">makemgration organization</span><br><span class="line">migrate organization</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180112/mL08LkChhe.png?imageslim" alt="mark"></p><p>使用for循环填充数据</p><p><img src="http://myphoto.mtianyan.cn/blog/180112/cLg8IFB1jA.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180112/G2ICdgdDgh.png?imageslim" alt="mark"></p><p>同理可得，我们把机构课程页不同的部分拿出来即可</p><h3 id="配置访问的view和url"><a href="#配置访问的view和url" class="headerlink" title="配置访问的view和url"></a>配置访问的view和url</h3><p>organization/urls.py:</p><p>Django 2.0.1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 访问课程</span><br><span class="line">re_path(&apos;course/(?P&lt;org_id&gt;\d+)/&apos;, OrgCourseView.as_view(), name=&quot;org_course&quot;),</span><br></pre></td></tr></table></figure><p>Django 1.9.8：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 访问课程</span><br><span class="line">url(r&apos;^course/(?P&lt;org_id&gt;\d+)/$&apos;, OrgCourseView.as_view(), name=&quot;org_course&quot;),</span><br></pre></td></tr></table></figure><p>organization/views.py<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class OrgCourseView(View):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">   机构课程列表页</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def get(self, request, org_id):</span><br><span class="line">        # 根据id取到课程机构</span><br><span class="line">        course_org = CourseOrg.objects.get(id= int(org_id))</span><br><span class="line">        # 通过课程机构找到课程。内建的变量，找到指向这个字段的外键引用</span><br><span class="line">        all_courses = course_org.course_set.all()</span><br><span class="line"></span><br><span class="line">        return render(request, &apos;org-detail-course.html&apos;,&#123;</span><br><span class="line">           &apos;all_courses&apos;:all_courses,</span><br><span class="line">            &apos;course_org&apos;: course_org,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></p><p>base页面的left链接修改</p><blockquote><p>这里能直接用到course_org.id。是因为子页面render时都向上传递了course_org对象</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180112/b7heml49dh.png?imageslim" alt="mark"></p><p>使用for循环，填充内容。</p><p><img src="http://myphoto.mtianyan.cn/blog/180112/5gjFji2d25.png?imageslim" alt="mark"></p><h3 id="左侧active修改"><a href="#左侧active修改" class="headerlink" title="左侧active修改"></a>左侧active修改</h3><p>因为现在没有值能判断当前是哪个页面。所以在orghomeview中传值回来current page<br><img src="http://myphoto.mtianyan.cn/blog/180112/Kd5ijhIAgK.png?imageslim" alt="mark"><br><img src="http://myphoto.mtianyan.cn/blog/180112/3CFjke2B3C.png?imageslim" alt="mark"></p><p>写两个view</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">class OrgDescView(View):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">   机构描述详情页</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def get(self, request, org_id):</span><br><span class="line">        # 向前端传值，表明现在在home页</span><br><span class="line">        current_page = &quot;desc&quot;</span><br><span class="line">        # 根据id取到课程机构</span><br><span class="line">        course_org = CourseOrg.objects.get(id= int(org_id))</span><br><span class="line">        # 通过课程机构找到课程。内建的变量，找到指向这个字段的外键引用</span><br><span class="line">        # 向前端传值说明用户是否收藏</span><br><span class="line">        has_fav = False</span><br><span class="line">        # 必须是用户已登录我们才需要判断。</span><br><span class="line">        if request.user.is_authenticated:</span><br><span class="line">            if UserFavorite.objects.filter(user=request.user, fav_id=course_org.id, fav_type=2):</span><br><span class="line">                has_fav = True</span><br><span class="line">        return render(request, &apos;org-detail-desc.html&apos;,&#123;</span><br><span class="line">            &apos;course_org&apos;: course_org,</span><br><span class="line">            &quot;current_page&quot;:current_page,</span><br><span class="line">            &quot;has_fav&quot;:has_fav,</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">class OrgTeacherView(View):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">   机构讲师列表页</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def get(self, request, org_id):</span><br><span class="line">        # 向前端传值，表明现在在home页</span><br><span class="line">        current_page = &quot;teacher&quot;</span><br><span class="line">        # 根据id取到课程机构</span><br><span class="line">        course_org = CourseOrg.objects.get(id= int(org_id))</span><br><span class="line">        # 通过课程机构找到课程。内建的变量，找到指向这个字段的外键引用</span><br><span class="line">        all_teachers = course_org.teacher_set.all()</span><br><span class="line">        # 向前端传值说明用户是否收藏</span><br><span class="line">        has_fav = False</span><br><span class="line">        # 必须是用户已登录我们才需要判断。</span><br><span class="line">        if request.user.is_authenticated:</span><br><span class="line">            if UserFavorite.objects.filter(user=request.user, fav_id=course_org.id, fav_type=2):</span><br><span class="line">                has_fav = True</span><br><span class="line">        return render(request, &apos;org-detail-teachers.html&apos;,&#123;</span><br><span class="line">           &apos;all_teachers&apos;:all_teachers,</span><br><span class="line">            &apos;course_org&apos;: course_org,</span><br><span class="line">            &quot;current_page&quot;:current_page,</span><br><span class="line">            &quot;has_fav&quot;:has_fav</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><p>加两个url</p><p>Django2.0.1下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 访问机构描述</span><br><span class="line">re_path(&apos;desc/(?P&lt;org_id&gt;\d+)/&apos;, OrgDescView.as_view(), name=&quot;org_desc&quot;),</span><br><span class="line"></span><br><span class="line"># 访问机构讲师</span><br><span class="line">re_path(&apos;teacher/(?P&lt;org_id&gt;\d+)/&apos;, OrgTeacherView.as_view(), name=&quot;org_teacher&quot;),</span><br></pre></td></tr></table></figure><p>Django1.9.8下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 访问机构描述</span><br><span class="line">url(r&apos;^desc/(?P&lt;org_id&gt;\d+)/$&apos;, OrgDescView.as_view(), name=&quot;org_desc&quot;),</span><br><span class="line"></span><br><span class="line"># 访问机构讲师</span><br><span class="line">url(r&apos;^teacher/(?P&lt;org_id&gt;\d+)/$&apos;, OrgTeacherView.as_view(), name=&quot;org_teacher&quot;),</span><br></pre></td></tr></table></figure><p>修改base页面相关跳转链接，注意点：加上course_org.id</p><p>重载我们的pagepath，使得面包屑动态显示</p><p><img src="http://myphoto.mtianyan.cn/blog/180112/2AdFE6He3D.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180112/4f7A1Ei2Fg.png?imageslim" alt="mark"></p><h2 id="7-10-课程机构收藏功能"><a href="#7-10-课程机构收藏功能" class="headerlink" title="7-10 课程机构收藏功能"></a>7-10 课程机构收藏功能</h2><p>书写收藏的后台逻辑:</p><p>url配置</p><p>django2.0.1下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 机构收藏</span></span><br><span class="line">path(<span class="string">'add_fav/'</span>, AddFavView.as_view(), name=<span class="string">"add_fav"</span>),</span><br></pre></td></tr></table></figure><p>django1.9.8下；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 机构收藏</span><br><span class="line">url(r&apos;^add_fav/$&apos;, AddFavView.as_view(), name=&quot;add_fav&quot;),</span><br></pre></td></tr></table></figure><p>配套的view；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddFavView</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    用户收藏与取消收藏功能</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="comment"># 表明你收藏的不管是课程，讲师，还是机构。他们的id</span></span><br><span class="line">        <span class="comment"># 默认值取0是因为空串转int报错</span></span><br><span class="line">        id = request.POST.get(<span class="string">'fav_id'</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="comment"># 取到你收藏的类别，从前台提交的ajax请求中取</span></span><br><span class="line">        type = request.POST.get(<span class="string">'fav_type'</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 收藏与已收藏取消收藏</span></span><br><span class="line">        <span class="comment"># 判断用户是否登录:即使没登录会有一个匿名的user</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> request.user.is_authenticated:</span><br><span class="line">            <span class="comment"># 未登录时返回json提示未登录，跳转到登录页面是在ajax中做的</span></span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">'&#123;"status":"fail", "msg":"用户未登录"&#125;'</span>, content_type=<span class="string">'application/json'</span>)</span><br><span class="line">        exist_records = UserFavorite.objects.filter(user=request.user, fav_id=int(id), fav_type=int(type))</span><br><span class="line">        <span class="keyword">if</span> exist_records:</span><br><span class="line">            <span class="comment"># 如果记录已经存在， 则表示用户取消收藏</span></span><br><span class="line">            exist_records.delete()</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">'&#123;"status":"success", "msg":"收藏"&#125;'</span>, content_type=<span class="string">'application/json'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            user_fav = UserFavorite()</span><br><span class="line">            <span class="comment"># 过滤掉未取到fav_id type的默认情况</span></span><br><span class="line">            <span class="keyword">if</span> int(type) &gt;<span class="number">0</span> <span class="keyword">and</span> int(id) &gt;<span class="number">0</span>:</span><br><span class="line">                user_fav.fav_id = int(id)</span><br><span class="line">                user_fav.fav_type = int(type)</span><br><span class="line">                user_fav.user = request.user</span><br><span class="line">                user_fav.save()</span><br><span class="line">                <span class="keyword">return</span> HttpResponse(<span class="string">'&#123;"status":"success", "msg":"已收藏"&#125;'</span>, content_type=<span class="string">'application/json'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> HttpResponse(<span class="string">'&#123;"status":"fail", "msg":"收藏出错"&#125;'</span>, content_type=<span class="string">'application/json'</span>)</span><br></pre></td></tr></table></figure><p>相关处理收藏的jQuery代码写在org base Html</p><p><img src="http://myphoto.mtianyan.cn/blog/180112/c8aa7f62L1.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180112/KelfeB7D2C.png?imageslim" alt="mark"></p><p>添加返回页面的收藏值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 向前端传值说明用户是否收藏</span><br><span class="line">       has_fav = False</span><br><span class="line">       # 必须是用户已登录我们才需要判断。</span><br><span class="line">       if request.user.is_authenticated:</span><br><span class="line">           if UserFavorite.objects.filter(user=request.user, fav_id=course_org.id, fav_type=2):</span><br><span class="line">               has_fav = True</span><br><span class="line"></span><br><span class="line"># return redener加上值</span><br><span class="line">            &quot;has_fav&quot;: has_fav</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180112/DI3GJKkJLI.png?imageslim" alt="mark"></p><p>前台 org_base.html中</p><p><img src="http://myphoto.mtianyan.cn/blog/180112/3gBdC96Aij.png?imageslim" alt="mark"></p><p>同理添加剩下的几个页面的。</p><p>第七章完结撒花。对应commit:</p><blockquote><p>7-9&amp;10&amp;11&amp;12将机构详情展示完毕，为课程机构添加了收藏功能。修复了index未登录状态下爆炸的错误</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;在绝望中寻找希望，人生终将辉煌 - 新东方 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;note default&quot;&gt;&lt;p&gt;作为一个正经的教育网站，我们更是拥有正规的机构合作: 比如来自火星的星星优培。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;完成授课机构的功能实现，&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Django+Xadmin打造在线教育平台" scheme="http://blog.mtianyan.cn/categories/Django-Xadmin%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E5%B9%B3%E5%8F%B0/"/>
    
    
      <category term="Python" scheme="http://blog.mtianyan.cn/tags/Python/"/>
    
      <category term="Django" scheme="http://blog.mtianyan.cn/tags/Django/"/>
    
      <category term="在线教育平台" scheme="http://blog.mtianyan.cn/tags/%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E5%B9%B3%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>强力Django+杀手级Xadmin打造在线教育平台(六)</title>
    <link href="http://blog.mtianyan.cn/post/c970abcd.html"/>
    <id>http://blog.mtianyan.cn/post/c970abcd.html</id>
    <published>2018-01-11T14:09:17.000Z</published>
    <updated>2018-02-02T12:40:13.960Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>矛盾的普遍性是指矛盾存在于一切事物的发展过程之中，矛盾存在于一切事物发展过程的始终。 </p></blockquote><div class="note "><p> 我想只要是个系统，就少不了登录注册。这是我们需要首先处理的主要矛盾。</p><ul><li>完成登录 注册 找回密码 激活 验证码集成</li></ul></div><a id="more"></a><h2 id="6-1-首页和登录页面的配置"><a href="#6-1-首页和登录页面的配置" class="headerlink" title="6-1 首页和登录页面的配置"></a>6-1 首页和登录页面的配置</h2><p>用户访问我们的根目录，我们需要把html文件返回给用户。因此我们第一步把html文件放入template目录。</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/fBkbi7968D.png?imageslim" alt="mark"></p><p>在html中找到首页的html。拷贝到我们的template目录</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/1EJD2hFc7E.png?imageslim" alt="mark"></p><h3 id="新建static目录"><a href="#新建static目录" class="headerlink" title="新建static目录"></a>新建static目录</h3><blockquote><p>用来存放css, js等静态文件</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180110/ECL5dmKFkc.png?imageslim" alt="mark"></p><h4 id="配置处理静态文件的url。"><a href="#配置处理静态文件的url。" class="headerlink" title="配置处理静态文件的url。"></a>配置处理静态文件的url。</h4><p>Django2.0.1版本下:</p><p>Mxonline3/urls.py：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from django.views.generic import TemplateView</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(&apos;xadmin/&apos;, xadmin.site.urls),</span><br><span class="line">    # TemplateView.as_view会将template转换为view</span><br><span class="line">    path(&apos;&apos;, TemplateView.as_view(template_name= &quot;index.html&quot;), name=  &quot;index&quot;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>Django1.9.8版本下:</p><p>Mxonline2/urls.py：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from django.views.generic import TemplateView</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(r&apos;^xadmin/&apos;, xadmin.site.urls),</span><br><span class="line">    url(&apos;^$&apos;, TemplateView.as_view(template_name=&quot;index.html&quot;), name=&quot;index&quot;)</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>此时运行访问就可以访问到我们的index页面，不过会没有样式。</p><h3 id="设置static文件"><a href="#设置static文件" class="headerlink" title="设置static文件"></a>设置static文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 说明静态文件放在哪个目录</span></span><br><span class="line"></span><br><span class="line">STATIC_URL = <span class="string">'/static/'</span></span><br><span class="line"></span><br><span class="line">STATICFILES_DIRS = (</span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">"static"</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="修改index页面中前端样式的引用地址"><a href="#修改index页面中前端样式的引用地址" class="headerlink" title="修改index页面中前端样式的引用地址"></a>修改index页面中前端样式的引用地址</h3><p><img src="http://myphoto.mtianyan.cn/blog/180110/LflfkaA3Kj.png?imageslim" alt="mark"></p><p>使用ctrl+f查找出所有<code>../</code>,全部替换为<code>/static/</code></p><p>然后点击运行，刷新页面可以看到我们的页面已经显示正常了。</p><h3 id="拷贝登录页面到template"><a href="#拷贝登录页面到template" class="headerlink" title="拷贝登录页面到template"></a>拷贝登录页面到template</h3><p><img src="http://myphoto.mtianyan.cn/blog/180110/cJ8c3l41H4.png?imageslim" alt="mark"></p><p>使用ctrl+f查找出所有<code>../</code>,全部替换为<code>/static/</code></p><blockquote><p>将css，js，图片全部替换完。</p></blockquote><h4 id="url配置跳转登录页面"><a href="#url配置跳转登录页面" class="headerlink" title="url配置跳转登录页面"></a>url配置跳转登录页面</h4><p>Mxonline2/urls.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 登录页面跳转url</span></span><br><span class="line">url(<span class="string">'^login/$'</span>, TemplateView.as_view(template_name=<span class="string">"login.html"</span>), name=<span class="string">"login"</span>)</span><br></pre></td></tr></table></figure><p>Mxonline3/urls.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># TemplateView.as_view会将template转换为view</span></span><br><span class="line">path(<span class="string">''</span>, TemplateView.as_view(template_name= <span class="string">"index.html"</span>), name=  <span class="string">"index"</span>),</span><br><span class="line">path(<span class="string">'login/'</span>, TemplateView.as_view(template_name= <span class="string">"login.html"</span>), name=  <span class="string">"login"</span>)</span><br></pre></td></tr></table></figure><p>在index页面，ctrl+f找到登录。将a标签中地址替换为login的url。</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/CBIAK2cjH0.png?imageslim" alt="mark"></p><p>取消注释后，将login.html改为<code>/login/</code></p><p><img src="http://myphoto.mtianyan.cn/blog/180110/ejcbBB0diJ.png?imageslim" alt="mark"></p><p>点击左侧减号收起。然后使用<code>&lt;!--</code>与<code>--&gt;</code>将个人中心暂时注释。</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/889BdI0a2g.png?imageslim" alt="mark"></p><p>可以看到登录注册，点击登录。</p><blockquote><p>根路径下的所有url都不需要斜杠</p><p>此时我们的首页已经可以成功显示，通过首页点击登录也可以成功跳转登录页面</p></blockquote><p>本小节完成对应commit:</p><blockquote><p>6-1: 完成首页与登录页面配置，设置了STATICFILES_DIRS。注意：dirs是一个元组，不要少逗号。删除了前面上传头像等直接传到根目录的目录。</p></blockquote><h2 id="6-2-用户登录-1"><a href="#6-2-用户登录-1" class="headerlink" title="6-2 用户登录-1"></a>6-2 用户登录-1</h2><blockquote><p>配置url之前我们要书写好对应处理的view</p></blockquote><p>Django的view实际就是一个函数，接收request请求对象，处理后返回response对象。</p><p>users/views.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"><span class="comment"># 当我们配置url被这个view处理时，自动传入request对象.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 前端向后端发送的请求方式: get 或post</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 登录提交表单为post</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">"POST"</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="comment"># 获取登录页面为get</span></span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">"GET"</span>:</span><br><span class="line">        <span class="comment"># render就是渲染html返回用户</span></span><br><span class="line">        <span class="comment"># render三变量: request 模板名称 一个字典写明传给前端的值</span></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">"login.html"</span>, &#123;&#125;)</span><br></pre></td></tr></table></figure><p>django1.9.8/urls.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> users.views <span class="keyword">import</span> user_login</span><br><span class="line">    <span class="comment"># 登录页面跳转url login不要直接调用。而只是指向这个函数对象。</span></span><br><span class="line">    url(<span class="string">'^login/$'</span>,login, name=<span class="string">"login"</span>)</span><br></pre></td></tr></table></figure></p><p>django2.0.1/urls.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> users.views <span class="keyword">import</span> login</span><br><span class="line">    path(<span class="string">'login/'</span>, login, name=<span class="string">"login"</span>)</span><br></pre></td></tr></table></figure><p>在两行返回语句的位置打上断点:</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/lm6DF2CE02.png?imageslim" alt="mark"></p><p>点击debug，进入首页后点击登录。可以看到</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/5LiGiKh2ID.png?imageslim" alt="mark"></p><p>说明确实是通过get请求请求页面的。</p><p>通过值浏览器窗口可以看到这是一个<code>&lt;WSGIRequest: GET &#39;/login/&#39;&gt;</code>对象</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/I2C4i7FFj4.png?imageslim" alt="mark"></p><p><code>path:</code>是指向的地址。</p><p><code>f8</code>继续运行。跳转到登录页面。</p><h2 id="6-3-用户登录2"><a href="#6-3-用户登录2" class="headerlink" title="6-3 用户登录2"></a>6-3 用户登录2</h2><h3 id="html-form基础知识"><a href="#html-form基础知识" class="headerlink" title="html form基础知识"></a>html form基础知识</h3><p>templates/login.html:</p><blockquote><p>可以看到form表单中有input。点击提交会把值提交到后台。我们需要修改action让它指向我们的后台相应地址。</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180110/IkkaFHhGAl.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180110/ddDBg58ek1.png?imageslim" alt="mark"></p><blockquote><p>input中的name值会被传递到后台。回组成键值对形式。</p></blockquote><p>submit类型的input</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/KAFII10hf9.png?imageslim" alt="mark"></p><p>只保留post这里的断点。输入用户名密码。查看debug情况</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/mEjmk6c1j9.png?imageslim" alt="mark"></p><p><code>403禁止访问</code>错误: html页面内必须加上<code>crsf token</code> 才能传值到后台。</p><blockquote><p>我会随机的给前端发一串符号，你必须把这串符号带回来，我才允许你post。</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180110/CgEm92B9Ig.png?imageslim" alt="mark"></p><p>from表单之前写上<code>crsf token</code></p><p>此时我们查看前端页面：</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/4aBegCbaAk.png?imageslim" alt="mark"></p><p>可以看到html中登录下面有一个隐藏着的值：crsf token, 不会显示。</p><p>此时点击登录跳转到pass位置。</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/cc82F1f1kE.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180110/F7JgIA41me.png?imageslim" alt="mark"></p><p>可以看到request中的POST中是一个queryset的对象。我们可以把它当成一个字典来用。<br>来取到前端的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> request.method == <span class="string">"POST"</span>:</span><br><span class="line">    <span class="comment"># 取不到时为空，username，password为前端页面name值</span></span><br><span class="line">    user_name = request.POST.get(<span class="string">"username"</span>, <span class="string">""</span>)</span><br><span class="line">    pass_word = request.POST.get(<span class="string">"password"</span>, <span class="string">""</span>)</span><br></pre></td></tr></table></figure><p>取到用户名和密码我们就要开始进行验证登录。使用Django自带的<code>auth</code>方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> authenticate, login</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 登录提交表单为post</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">"POST"</span>:</span><br><span class="line">        <span class="comment"># 取不到时为空，username，password为前端页面name值</span></span><br><span class="line">        user_name = request.POST.get(<span class="string">"username"</span>, <span class="string">""</span>)</span><br><span class="line">        pass_word = request.POST.get(<span class="string">"password"</span>, <span class="string">""</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 成功返回user对象,失败返回null</span></span><br><span class="line">        user = authenticate(username= user_name, password= pass_word)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果不是null说明验证成功</span></span><br><span class="line">        <span class="keyword">if</span> user <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="comment"># login_in 两参数：request, user</span></span><br><span class="line">            <span class="comment"># 实际是对request写了一部分东西进去，然后在render的时候：</span></span><br><span class="line">            <span class="comment"># request是要render回去的。这些信息也就随着返回浏览器。完成登录</span></span><br><span class="line">            login(request, user)</span><br><span class="line">            <span class="comment"># 跳转到首页 user request会被带回到首页</span></span><br><span class="line">            <span class="keyword">return</span> render(request, <span class="string">"index.html"</span>)</span><br><span class="line">        <span class="comment"># 没有成功说明里面的值是None，并再次跳转回主页面</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> render(request, <span class="string">"login.html"</span>, &#123;&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>authenticate调用只需要传入用户名和密码。成功会返回user对象，失败返回null</p></blockquote><p>html中通过</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/Gcia8G8fgG.png?imageslim" alt="mark"></p><blockquote><p>设置成如果登录显示个人中心那段，未登录显示登录注册</p></blockquote><p>打上断点</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/AeBb1BJE9m.png?imageslim" alt="mark"></p><p>点击debug后可以看到</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/J4caJi44DG.png?imageslim" alt="mark"></p><blockquote><p>我们成功的取到了值。</p></blockquote><p>Django默认我们使用用户名和密码来登录</p><p>成功的登录user值如下</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/741Ia99FLf.png?imageslim" alt="mark"></p><p>但是继续执行报错:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">login() takes exactly 1 argument (2 given)</span><br></pre></td></tr></table></figure><p>这时因为我们处理登录的自定义函数也叫login。就直接调用了自身，而不是调用Django提供的login。<strong>所以我们一定不要把自定义view函数命名与Django提供的冲突</strong></p><blockquote><p>解决方案：将我们的login改为<code>def user_login(request):</code></p></blockquote><p>并且前往urls.py中将login也一并改了</p><p>此时运行可以看到我们的个人中心已经出来了。</p><h3 id="改造为使用邮箱用户名均可。Setting中重载变量"><a href="#改造为使用邮箱用户名均可。Setting中重载变量" class="headerlink" title="改造为使用邮箱用户名均可。Setting中重载变量"></a>改造为使用邮箱用户名均可。Setting中重载变量</h3><blockquote><p>自定义authenticate方法</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.backends <span class="keyword">import</span> ModelBackend</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> UserProfile</span><br><span class="line"><span class="comment"># 并集运算</span></span><br><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Q</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实现用户名邮箱均可登录</span></span><br><span class="line"><span class="comment"># 继承ModelBackend类，因为它有方法authenticate，可点进源码查看</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomBackend</span><span class="params">(ModelBackend)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">authenticate</span><span class="params">(self, username=None, password=None, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 不希望用户存在两个，get只能有一个。两个是get失败的一种原因 Q为使用并集查询</span></span><br><span class="line"></span><br><span class="line">            user = UserProfile.objects.get(Q(username=username)|Q(email=username))</span><br><span class="line"></span><br><span class="line">            <span class="comment"># django的后台中密码加密：所以不能password==password</span></span><br><span class="line">            <span class="comment"># UserProfile继承的AbstractUser中有def check_password(self, raw_password):</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> user.check_password(password):</span><br><span class="line">                <span class="keyword">return</span> user</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br></pre></td></tr></table></figure><p>Mxonline2/settings.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置邮箱和用户名均可登录</span></span><br><span class="line">AUTHENTICATION_BACKENDS = (</span><br><span class="line">    <span class="string">'users.views.CustomBackend'</span>,</span><br><span class="line"></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180110/g1Hb79JKGK.png?imageslim" alt="mark"></p><blockquote><p>使用xadmin的退出，注销当前用户的退出。</p></blockquote><p>此时我们可以通过邮箱和用户名都可以完成登录。</p><h3 id="用户提示：return页面时提供它的错误信息"><a href="#用户提示：return页面时提供它的错误信息" class="headerlink" title="用户提示：return页面时提供它的错误信息"></a>用户提示：return页面时提供它的错误信息</h3><p><img src="http://myphoto.mtianyan.cn/blog/180110/l55JiK9Cmh.png?imageslim" alt="mark"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> render(request, <span class="string">"login.html"</span>, &#123;<span class="string">"msg"</span>:<span class="string">"用户名或密码错误! "</span>&#125;)</span><br></pre></td></tr></table></figure><p>Html中如何取到这个值;</p><p>login html中这段是用来做错误提示的。</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/3i7BF5edj8.png?imageslim" alt="mark"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;error btns login-form-tips&quot; id=&quot;jsLoginTips&quot;&gt;&#123;&#123; msg &#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>验证：</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/7I9gdJ5DLj.png?imageslim" alt="mark"></p><p>本小节结束对应commit:</p><blockquote><p>6-2&amp;3 完成了用户登录，登录验证自定义：邮箱用户名均可。错误信息返回前端。设置登录显示个人中心判断，注意不要把自定义方法写成login。</p></blockquote><h2 id="6-4-用form实现登录-1"><a href="#6-4-用form实现登录-1" class="headerlink" title="6-4 用form实现登录-1"></a>6-4 用form实现登录-1</h2><p>上面我们的用户登录的方法是基于函数来做的。本节我们做一个基于类方法的版本。<br>要求对类的继承有了解。</p><p>基础教程中基本上都是基于函数来做的，其实更推荐基于类来做。基于类可以带来不少好处</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基于类实现需要继承的view</span></span><br><span class="line"><span class="keyword">from</span> django.views.generic.base <span class="keyword">import</span> View</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginView</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="comment"># 直接调用get方法免去判断</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="comment"># render就是渲染html返回用户</span></span><br><span class="line">        <span class="comment"># render三变量: request 模板名称 一个字典写明传给前端的值</span></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">"login.html"</span>, &#123;&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="comment"># 取不到时为空，username，password为前端页面name值</span></span><br><span class="line">        user_name = request.POST.get(<span class="string">"username"</span>, <span class="string">""</span>)</span><br><span class="line">        pass_word = request.POST.get(<span class="string">"password"</span>, <span class="string">""</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 成功返回user对象,失败返回null</span></span><br><span class="line">        user = authenticate(username=user_name, password=pass_word)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果不是null说明验证成功</span></span><br><span class="line">        <span class="keyword">if</span> user <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="comment"># login_in 两参数：request, user</span></span><br><span class="line">            <span class="comment"># 实际是对request写了一部分东西进去，然后在render的时候：</span></span><br><span class="line">            <span class="comment"># request是要render回去的。这些信息也就随着返回浏览器。完成登录</span></span><br><span class="line">            login(request, user)</span><br><span class="line">            <span class="comment"># 跳转到首页 user request会被带回到首页</span></span><br><span class="line">            <span class="keyword">return</span> render(request, <span class="string">"index.html"</span>)</span><br><span class="line">        <span class="comment"># 没有成功说明里面的值是None，并再次跳转回主页面</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> render(request, <span class="string">"login.html"</span>, &#123;<span class="string">"msg"</span>: <span class="string">"用户名或密码错误! "</span>&#125;)</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180110/9mKFBk0Fc8.png?imageslim" alt="mark"></p><blockquote><p>继承的view中的方法。</p></blockquote><p>django1.9.8 urls中的配置:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 换用类实现</span></span><br><span class="line"><span class="keyword">from</span> users.views <span class="keyword">import</span> LoginView</span><br><span class="line">    <span class="comment"># 基于类方法实现登录,这里是调用它的方法</span></span><br><span class="line">    url(<span class="string">'^login/$'</span>, LoginView.as_view(), name=<span class="string">"login"</span>)</span><br></pre></td></tr></table></figure><p>Django2.0.1 urls配置:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基于类方法实现登录,这里是调用它的方法</span></span><br><span class="line">path(<span class="string">'login/'</span>, LoginView.as_view(), name=<span class="string">"login"</span>)</span><br></pre></td></tr></table></figure><h2 id="6-5-form字段验证"><a href="#6-5-form字段验证" class="headerlink" title="6-5 form字段验证"></a>6-5 form字段验证</h2><p>验证最大长度，是否为空等一系列。</p><p>users下新建forms文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line">__author__ = <span class="string">'mtianyan'</span></span><br><span class="line">__date__ = <span class="string">'2018/1/10 0010 04:44'</span></span><br><span class="line"><span class="comment"># 引入Django表单</span></span><br><span class="line"><span class="keyword">from</span>  django <span class="keyword">import</span> forms</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录表单验证</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginForm</span><span class="params">(forms.Form)</span>:</span></span><br><span class="line">    <span class="comment"># 用户名密码不能为空</span></span><br><span class="line">    username = forms.CharField(required=<span class="keyword">True</span>)</span><br><span class="line">    password = forms.CharField(required=<span class="keyword">True</span>, min_length=<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>定义好forms之后我们来使用它做验证。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="comment"># 类实例化需要一个字典参数dict:request.POST就是一个QueryDict所以直接传入</span></span><br><span class="line">        <span class="comment"># POST中的usernamepassword，会对应到form中</span></span><br><span class="line">        login_form = LoginForm(request.POST)</span><br><span class="line"><span class="comment">#is_valid判断我们字段是否有错执行我们原有逻辑，验证失败跳回login页面</span></span><br><span class="line">        <span class="keyword">if</span> login_form.is_valid():</span><br><span class="line">            <span class="comment"># 取不到时为空，username，password为前端页面name值</span></span><br><span class="line">            user_name = request.POST.get(<span class="string">"username"</span>, <span class="string">""</span>)</span><br><span class="line">            pass_word = request.POST.get(<span class="string">"password"</span>, <span class="string">""</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 成功返回user对象,失败返回null</span></span><br><span class="line">            user = authenticate(username=user_name, password=pass_word)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 如果不是null说明验证成功</span></span><br><span class="line">            <span class="keyword">if</span> user <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">                <span class="comment"># login_in 两参数：request, user</span></span><br><span class="line">                <span class="comment"># 实际是对request写了一部分东西进去，然后在render的时候：</span></span><br><span class="line">                <span class="comment"># request是要render回去的。这些信息也就随着返回浏览器。完成登录</span></span><br><span class="line">                login(request, user)</span><br><span class="line">                <span class="comment"># 跳转到首页 user request会被带回到首页</span></span><br><span class="line">                <span class="keyword">return</span> render(request, <span class="string">"index.html"</span>)</span><br><span class="line">        <span class="comment"># 验证不成功跳回登录页面</span></span><br><span class="line">        <span class="comment"># 没有成功说明里面的值是None，并再次跳转回主页面</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> render(request, <span class="string">"login.html"</span>, &#123;<span class="string">"msg"</span>: <span class="string">"用户名或密码错误! "</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="完善错误提示"><a href="#完善错误提示" class="headerlink" title="完善错误提示"></a>完善错误提示</h3><p>比如：既然表单都验证失败了，就不用显示密码出错了</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/Ca0lhc68He.png?imageslim" alt="mark"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 仅当用户真的密码出错时</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> render(request, <span class="string">"login.html"</span>,&#123;<span class="string">"msg"</span>:<span class="string">"用户名或密码错误!"</span>&#125;)</span><br><span class="line">        <span class="comment"># 验证不成功跳回登录页面</span></span><br><span class="line">        <span class="comment"># 没有成功说明里面的值是None，并再次跳转回主页面</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> render(</span><br><span class="line">                request, <span class="string">"login.html"</span>, &#123;</span><br><span class="line">                    <span class="string">"login_form"</span>: login_form &#125;)</span><br></pre></td></tr></table></figure><p>forms中的名称username和password必须和html中的一致。毕竟他是使用的request.POST<br>而request是从前面传过来的。</p><p>实例化<code>LoginView</code>时已经对于我们的字段进行了验证。</p><p>打上断点:</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/aelBLBFBG3.png?imageslim" alt="mark"></p><p><code>debug</code>后<code>f6</code>运行到</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/F86386mI15.png?imageslim" alt="mark"></p><p>此时可以看到<code>errors(ErrorDict)</code>中的错误</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/EefmGb08e9.png?imageslim" alt="mark"></p><p>将form传回前端:</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/CKdB5L49dc.png?imageslim" alt="mark"></p><p>前端中取值：</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/C6AajKcm51.png?imageslim" alt="mark"></p><p>给这个class加上errorput会显示红色外框。</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/G89gGl2G75.png?imageslim" alt="mark"></p><blockquote><p>注意:写在class里面</p></blockquote><h3 id="将forms错误信息显示出来"><a href="#将forms错误信息显示出来" class="headerlink" title="将forms错误信息显示出来"></a>将forms错误信息显示出来</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class="error btns login-form-tips" id="jsLoginTips"&gt;</span><br><span class="line">&#123;% <span class="keyword">for</span> key, error <span class="keyword">in</span> login_form.errors.items %&#125;</span><br><span class="line">&#123;&#123; error &#125;&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&#123;&#123; msg &#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180110/a3CjlEhC9B.png?imageslim" alt="mark"></p><ul><li>写了一个类继承Django的view，然后写了get post方法(get/post的if是Django替我们完成的)</li><li>在url中调用Loginview的as_view方法需要加上括号，进行调用。</li><li>Django的form进行表单验证并把error值传到前台。</li><li>is_valid方法，验证表单</li></ul><p>本小节完毕对应commit:</p><blockquote><p>6-4 &amp; 5 登录换用类继承view实现,使用Django form进行表单验证并把错误信息提示到前台。</p></blockquote><h2 id="6-6-session和cookie自动登录机制"><a href="#6-6-session和cookie自动登录机制" class="headerlink" title="6-6 session和cookie自动登录机制"></a>6-6 session和cookie自动登录机制</h2><blockquote><p>我们本节来讲session和cookie</p></blockquote><p>User1如何实现登录的。</p><h3 id="cookie的存储"><a href="#cookie的存储" class="headerlink" title="cookie的存储"></a>cookie的存储</h3><p>cookie是浏览器支持的一种本地存储方式。以dict，键值对方式存储。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;sessionkey&quot;: &quot;123&quot;&#125;</span><br></pre></td></tr></table></figure><p>浏览器会自动对于它进行解析。</p><h3 id="http请求是一种无状态的请求"><a href="#http请求是一种无状态的请求" class="headerlink" title="http请求是一种无状态的请求"></a>http请求是一种无状态的请求</h3><p>用户向服务器发起的两次请求之间是没有状态的。也就是服务器并不知道这是同一个用户发的。</p><p>做到记住用户:</p><blockquote><p>浏览器a在向服务器发起请求，服务器会自动给浏览器a回复一个id，浏览器a把id放到cookie当中，在下一次请求时带上这个cookie里的id值向浏览器请求，服务器就知道你是哪个浏览器发过来的了。</p></blockquote><h3 id="有状态请求-cookie"><a href="#有状态请求-cookie" class="headerlink" title="有状态请求(cookie)"></a>有状态请求(cookie)</h3><p><img src="http://myphoto.mtianyan.cn/blog/180110/4F22diHeF6.png?imageslim" alt="mark"></p><p>服务器<code>a</code>发回来的<code>id</code>会放到服务器<code>a</code>的域之下。<strong>不能跨域访问cookie。</strong></p><p>使用浏览器随便打开一个网页，然后<code>f12</code>打开。</p><p>比如我使用的<code>Chrome</code>浏览器</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/Bb6elgf96A.png?imageslim" alt="mark"></p><p>会找到存储在浏览器本地的cookie值</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/b3CH160G9h.png?imageslim" alt="mark"></p><p>点击<code>clear all</code>清空所有的<code>cookie</code> <code>f5</code>刷新页面，会发现又把这些cookie值进来。</p><p>如果将用户名和密码直接保存在cookie，可以实现<strong>最垃圾最简略版本的</strong>自动登录。</p><h3 id="解决cookie放在本地不安全的问题-session"><a href="#解决cookie放在本地不安全的问题-session" class="headerlink" title="解决cookie放在本地不安全的问题(session)"></a>解决cookie放在本地不安全的问题(session)</h3><blockquote><p>用户在第一次请求后，浏览器回复的id既可以是用户的user id。<br>也可以一段任意的字符串，我们把它叫做session id</p></blockquote><p>根据用户名和密码，服务器会采用自己的规则生成<code>session id</code>。这个<code>session id</code>保存在本地cookie。浏览器请求服务器会携带。</p><ul><li>输入用户名 &amp; 密码</li><li>调用 login(), 后端程序会根据用户名密码生成session id。保存在数据库中。</li><li>用户登录之后，需要通过这个<code>session id</code>取出这些基本信息。</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180110/F6d3AkdJB0.png?imageslim" alt="mark"></p><p>Django的默认表中的<code>session</code>表就记录了用户登录时，后端我们Django为用户生成的<code>sessionid</code>。</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/9L54Emf6md.png?imageslim" alt="mark"></p><p>可以看到<code>session key value</code> 和过期时间。</p><p>我们可以清空这张表的数据。运行项目进行登录。</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/kLdLLALGB1.png?imageslim" alt="mark"></p><blockquote><p>可以看到我们刚刚生成的session id。</p></blockquote><p>此时通过<code>f12</code>查看浏览器在本地存储的<code>session id</code>。可以看到如下图和我们数据库中的一致。</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/2Hee7I5fIl.png?imageslim" alt="mark"></p><blockquote><p><strong>session_key 发到浏览器叫做session id</strong></p></blockquote><p>通过session id 用户访问任何一个页面都会携带，服务器就会认识。</p><p>Setting.py中，</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/Gi40A0FFhB.png?imageslim" alt="mark"></p><p>这个app会拦截我们每次的request请求，在<code>request</code>中找到session id，然后去数据表中进行查询。<br>然后通过<code>session key</code> 去找到<code>session data</code>。此时直接为我们取出了user。</p><p>在服务器返回浏览器的<code>response</code>中也会直接加上<code>session id</code></p><blockquote><p>cookie是浏览器本地存储机制，存在域名之下，存储不安全。<br>服务器在返回id时通过规则生成一串字符，并设置了过期时间。存储在服务器端(数据库)</p></blockquote><p>文章: <a href="http://projectsedu.com/2016/10/17/django%E4%BB%8E%E8%AF%B7%E6%B1%82%E5%88%B0%E8%BF%94%E5%9B%9E%E9%83%BD%E7%BB%8F%E5%8E%86%E4%BA%86%E4%BB%80%E4%B9%88/" target="_blank" rel="noopener">http://projectsedu.com/2016/10/17/django%E4%BB%8E%E8%AF%B7%E6%B1%82%E5%88%B0%E8%BF%94%E5%9B%9E%E9%83%BD%E7%BB%8F%E5%8E%86%E4%BA%86%E4%BB%80%E4%B9%88/</a></p><h2 id="6-7-用户注册"><a href="#6-7-用户注册" class="headerlink" title="6-7 用户注册"></a>6-7 用户注册</h2><h3 id="拷贝注册页面进入template目录"><a href="#拷贝注册页面进入template目录" class="headerlink" title="拷贝注册页面进入template目录"></a>拷贝注册页面进入template目录</h3><h3 id="书写我们对应要处理的view-RegisterView"><a href="#书写我们对应要处理的view-RegisterView" class="headerlink" title="书写我们对应要处理的view(RegisterView)"></a>书写我们对应要处理的view(RegisterView)</h3><p>users/views.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注册功能的view</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegisterView</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="comment"># get方法直接返回页面</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">"register.html"</span>, &#123;&#125;)</span><br></pre></td></tr></table></figure><h3 id="配置对应的url"><a href="#配置对应的url" class="headerlink" title="配置对应的url"></a>配置对应的url</h3><p>Django1.9.8 url配置如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> users.views <span class="keyword">import</span> RegisterView</span><br><span class="line">    <span class="comment"># 注册url</span></span><br><span class="line">    url(<span class="string">"^register/"</span>, RegisterView.as_view(), name=<span class="string">"register"</span>),</span><br></pre></td></tr></table></figure><p>Django2.0.1 url配置如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> users.views <span class="keyword">import</span> RegisterView</span><br><span class="line">    <span class="comment"># 注册url</span></span><br><span class="line">    path(<span class="string">"register/"</span>, RegisterView.as_view(), name = <span class="string">"register"</span> )</span><br></pre></td></tr></table></figure><h3 id="修改index页面中注册url"><a href="#修改index页面中注册url" class="headerlink" title="修改index页面中注册url"></a>修改index页面中注册url</h3><p><img src="http://myphoto.mtianyan.cn/blog/180110/BJl97lJ8bd.png?imageslim" alt="mark"></p><p>此时访问首页发现可以成功跳转到注册页面</p><h3 id="修改静态文件中static目录引用"><a href="#修改静态文件中static目录引用" class="headerlink" title="修改静态文件中static目录引用"></a>修改静态文件中static目录引用</h3><h4 id="关键步骤load-staticfile"><a href="#关键步骤load-staticfile" class="headerlink" title="关键步骤load staticfile"></a>关键步骤load staticfile</h4><p><img src="http://myphoto.mtianyan.cn/blog/180110/Hm54EJ7IH9.png?imageslim" alt="mark"></p><h4 id="然后修改路径为一个相对于static的相对路径"><a href="#然后修改路径为一个相对于static的相对路径" class="headerlink" title="然后修改路径为一个相对于static的相对路径"></a>然后修改路径为一个相对于static的相对路径</h4><p><img src="http://myphoto.mtianyan.cn/blog/180110/ackf2LaLJ8.png?imageslim" alt="mark"></p><blockquote><p>他会自动根据setting中配置，为我们加上前缀</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180110/3FDhdl2aiH.png?imageslim" alt="mark"></p><blockquote><p>如果我们把目录在setting中改到mystatic。url中会自动添加指定的前缀</p></blockquote><p>可以看到可以访问成功。</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/0KkhH7b8Bm.png?imageslim" alt="mark"></p><h4 id="将目前的三个html中的静态文件全部修改目录"><a href="#将目前的三个html中的静态文件全部修改目录" class="headerlink" title="将目前的三个html中的静态文件全部修改目录"></a>将目前的三个html中的静态文件全部修改目录</h4><blockquote><p>枯燥但是要有耐心。</p></blockquote><p>这时候访问三个页面，查看样式是否完好。</p><h3 id="验证码库实现验证码"><a href="#验证码库实现验证码" class="headerlink" title="验证码库实现验证码"></a>验证码库实现验证码</h3><p><a href="https://github.com/mbi/django-simple-captcha" target="_blank" rel="noopener">https://github.com/mbi/django-simple-captcha</a></p><h4 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">workon mxonline3</span><br><span class="line">pip install  django-simple-captcha</span><br><span class="line">workon mxonline2</span><br><span class="line">pip install  django-simple-captcha==0.4.6</span><br></pre></td></tr></table></figure><ul><li><p>Add <code>captcha</code> to the <code>INSTALLED_APPS</code> in your <code>settings.py</code></p></li><li><p>Add an entry to your <code>urls.py</code>:</p></li></ul><p>django1.9.8如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url, include</span><br><span class="line">urlpatterns += [</span><br><span class="line">    url(<span class="string">r'^captcha/'</span>, include(<span class="string">'captcha.urls'</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>django2.0.1如下；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 验证码url</span><br><span class="line">path(&quot;captcha/&quot;, include(&apos;captcha.urls&apos;))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">makemigrations</span><br><span class="line">migrate</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180110/0Igb4IgB0F.png?imageslim" alt="mark"></p><p>进入数据库查看生成的表</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/JiI713cAdd.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180111/ac8KFHkCBc.png?imageslim" alt="mark"></p><h3 id="将验证码展示到页面"><a href="#将验证码展示到页面" class="headerlink" title="将验证码展示到页面"></a>将验证码展示到页面</h3><p>users/forms.py:</p><h4 id="定义我们的register-form"><a href="#定义我们的register-form" class="headerlink" title="定义我们的register form:"></a>定义我们的register form:</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 引入验证码field</span></span><br><span class="line"><span class="keyword">from</span> captcha.fields <span class="keyword">import</span> CaptchaField</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证码form &amp; 注册表单form</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegisterForm</span><span class="params">(forms.Form)</span>:</span></span><br><span class="line">    <span class="comment"># 此处email与前端name需保持一致。</span></span><br><span class="line">    email = forms.EmailField(required=<span class="keyword">True</span>)</span><br><span class="line">    <span class="comment"># 密码不能小于5位</span></span><br><span class="line">    password = forms.CharField(required=<span class="keyword">True</span>, min_length=<span class="number">5</span>)</span><br><span class="line">    <span class="comment"># 应用验证码</span></span><br><span class="line">    captcha = CaptchaField()</span><br></pre></td></tr></table></figure><p>users/views.py</p><h4 id="在我们的registerform中实例化并传送到前端"><a href="#在我们的registerform中实例化并传送到前端" class="headerlink" title="在我们的registerform中实例化并传送到前端:"></a>在我们的registerform中实例化并传送到前端:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># form表单验证 &amp; 验证码</span><br><span class="line">from .forms import LoginForm, RegisterForm</span><br><span class="line"></span><br><span class="line"># 注册功能的view</span><br><span class="line">class RegisterView(View):</span><br><span class="line">    # get方法直接返回页面</span><br><span class="line">    def get(self, request):</span><br><span class="line">        # 添加验证码</span><br><span class="line">        register_form = RegisterForm()</span><br><span class="line">        return render(request, &quot;register.html&quot;, &#123;&apos;register_form&apos;:register_form&#125;)</span><br></pre></td></tr></table></figure><h4 id="前端获取验证码值"><a href="#前端获取验证码值" class="headerlink" title="前端获取验证码值"></a>前端获取验证码值</h4><p><img src="http://myphoto.mtianyan.cn/blog/180110/d55glDI9E1.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180110/DL7ejk8EcF.png?imageslim" alt="mark"></p><p>找到上图验证码部分。修改为下图</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/01gC20eabk.png?imageslim" alt="mark"></p><p>Forms中的field会生成不同的框。</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/ChgL88Ed76.png?imageslim" alt="mark"></p><p>我们只有label但是前端可以查看到input框等，也就是Registerform会为我们生成输入框+验证码。</p><blockquote><p>隐藏的字符串的框会被带到后台，由Django为我们进行验证。验证该验证码是否保存过。</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180110/547cdji7Gl.png?imageslim" alt="mark"></p><blockquote><p>可以看得我们数据库中将这个hashkey进行了保存。这个key与验证码内容对应。</p></blockquote><p>后台会把验证码值 和 hashkey进行联合查询。</p><h3 id="编写register-view的后台逻辑-RegisterView"><a href="#编写register-view的后台逻辑-RegisterView" class="headerlink" title="编写register view的后台逻辑(RegisterView)"></a>编写register view的后台逻辑(RegisterView)</h3><p>users/views.py的RegisterView中添加post方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def post(self, request):</span><br><span class="line">    # 实例化form</span><br><span class="line">    register_form = RegisterForm(request.POST)</span><br><span class="line">    if register_form.is_valid():</span><br><span class="line">        pass</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180110/BKIjc06AF3.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180110/bA0KEd7bhc.png?imageslim" alt="mark"></p><p>修改form表单提交方式与提交到哪个url</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/ahg7KfbCAi.png?imageslim" alt="mark"></p><p>前端的form提交加上对应的crsf token</p><p>刷新验证码是前端帮我们完成的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//刷新验证码</span><br><span class="line">function refresh_captcha(event)&#123;</span><br><span class="line">    $.get(&quot;/captcha/refresh/?&quot;+Math.random(), function(result)&#123;</span><br><span class="line">        $(&apos;#&apos;+event.data.form_id+&apos; .captcha&apos;).attr(&quot;src&quot;,result.image_url);</span><br><span class="line">        $(&apos;#id_captcha_0&apos;).attr(&quot;value&quot;,result.key);</span><br><span class="line">    &#125;);</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取前端页面值并封装成一个user-profile对象，保存到数据库。"><a href="#获取前端页面值并封装成一个user-profile对象，保存到数据库。" class="headerlink" title="获取前端页面值并封装成一个user_profile对象，保存到数据库。"></a>获取前端页面值并封装成一个user_profile对象，保存到数据库。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib.auth.hashers import make_password</span><br><span class="line"></span><br><span class="line">        if register_form.is_valid():</span><br><span class="line">            user_name = request.POST.get(&quot;email&quot;, &quot;&quot;)</span><br><span class="line">            pass_word = request.POST.get(&quot;password&quot;, &quot;&quot;)</span><br><span class="line"></span><br><span class="line">            # 实例化一个user_profile对象，将前台值存入</span><br><span class="line">            user_profile = UserProfile()</span><br><span class="line">            user_profile.username = user_name</span><br><span class="line">            user_profile.email = user_name</span><br><span class="line"></span><br><span class="line">            # 加密password进行保存</span><br><span class="line">            user_profile.password = make_password(pass_word)</span><br><span class="line">            user_profile.save()</span><br><span class="line">            pass</span><br></pre></td></tr></table></figure><h4 id="发送邮件实现"><a href="#发送邮件实现" class="headerlink" title="发送邮件实现"></a>发送邮件实现</h4><p>setting中配置；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 发送邮件的setting设置</span></span><br><span class="line"></span><br><span class="line">EMAIL_HOST = <span class="string">"smtp.qq.com"</span></span><br><span class="line">EMAIL_PORT = <span class="number">25</span></span><br><span class="line">EMAIL_HOST_USER = <span class="string">"mxonline.mtianyan.cn"</span></span><br><span class="line">EMAIL_HOST_PASSWORD = <span class="string">" "</span></span><br><span class="line">EMAIL_USE_TLS= <span class="keyword">True</span></span><br><span class="line">EMAIL_FROM = <span class="string">"mxonline.mtianyan.cn"</span></span><br></pre></td></tr></table></figure><p>新建package后新建文件。</p><p><code>apps：utils/email_send.py</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> Random</span><br><span class="line"></span><br><span class="line">__author__ = <span class="string">'mtianyan'</span></span><br><span class="line">__date__ = <span class="string">'2018/1/10 0010 20:47'</span></span><br><span class="line"><span class="keyword">from</span>  users.models <span class="keyword">import</span> EmailVerifyRecord</span><br><span class="line"><span class="comment"># 导入Django自带的邮件模块</span></span><br><span class="line"><span class="keyword">from</span> django.core.mail <span class="keyword">import</span> send_mail</span><br><span class="line"><span class="comment"># 导入setting中发送邮件的配置</span></span><br><span class="line"><span class="keyword">from</span> Mxonline2.settings <span class="keyword">import</span> EMAIL_FROM</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成随机字符串</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_str</span><span class="params">(random_length=<span class="number">8</span>)</span>:</span></span><br><span class="line">    str = <span class="string">''</span></span><br><span class="line">    <span class="comment"># 生成字符串的可选字符串</span></span><br><span class="line">    chars = <span class="string">'AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz0123456789'</span></span><br><span class="line">    length = len(chars) - <span class="number">1</span></span><br><span class="line">    random = Random()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(random_length):</span><br><span class="line">        str += chars[random.randint(<span class="number">0</span>, length)]</span><br><span class="line">    <span class="keyword">return</span> str</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送注册邮件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_register_eamil</span><span class="params">(email, send_type=<span class="string">"register"</span>)</span>:</span></span><br><span class="line">    <span class="comment"># 发送之前先保存到数据库，到时候查询链接是否存在</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 实例化一个EmailVerifyRecord对象</span></span><br><span class="line">    email_record = EmailVerifyRecord()</span><br><span class="line">    <span class="comment"># 生成随机的code放入链接</span></span><br><span class="line">    code = random_str(<span class="number">16</span>)</span><br><span class="line">    email_record.code = code</span><br><span class="line">    email_record.email = email</span><br><span class="line">    email_record.send_type = send_type</span><br><span class="line"></span><br><span class="line">    email_record.save()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义邮件内容:</span></span><br><span class="line">    email_title = <span class="string">""</span></span><br><span class="line">    email_body = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> send_type == <span class="string">"register"</span>:</span><br><span class="line">        email_title = <span class="string">"mtianyan慕课小站 注册激活链接"</span></span><br><span class="line">        email_body = <span class="string">"请点击下面的链接激活你的账号: http://127.0.0.1:8000/active/&#123;0&#125;"</span>.format(code)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 使用Django内置函数完成邮件发送。四个参数：主题，邮件内容，从哪里发，接受者list</span></span><br><span class="line">        send_status = send_mail(email_title, email_body, EMAIL_FROM, [email])</span><br><span class="line">        <span class="comment"># 如果发送成功</span></span><br><span class="line">        <span class="keyword">if</span> send_status:</span><br><span class="line">            <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180110/8leIJ2l6LD.png?imageslim" alt="mark"></p><p>上图为qq邮箱开启smtp服务</p><p>点击生成授权码</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/6fDDI979Dk.png?imageslim" alt="mark"></p><p>def post中加上发送邮件</p><p><code>users/views.py</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 发送邮件</span><br><span class="line">from utils.email_send import send_register_eamil</span><br><span class="line">            # 发送注册激活邮件</span><br><span class="line">            send_register_eamil(user_name, &quot;register&quot;)</span><br></pre></td></tr></table></figure><p>点击注册提交，因为我们没有return。一直在转圈圈。</p><p>但是数据库中已经添加了字段。</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/FL04F47985.png?imageslim" alt="mark"></p><p>可以看到我们的邮件已经被发送到邮箱中。</p><p>如果注册成功返回login页面:不成功，返回register页面并报错。</p><h4 id="完善错误提示。"><a href="#完善错误提示。" class="headerlink" title="完善错误提示。"></a>完善错误提示。</h4><blockquote><p>找猫画虎：将login中的错误提示搬运到register中来。</p></blockquote><ul><li>register_form的报错信息。</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180110/gmDlEB0L2G.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180110/e7a65cgj8D.png?imageslim" alt="mark"></p><ul><li>邮箱 &amp; 密码 form验证</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180110/ElHe2gdDAL.png?imageslim" alt="mark"></p><h4 id="完善用户值回填逻辑"><a href="#完善用户值回填逻辑" class="headerlink" title="完善用户值回填逻辑"></a>完善用户值回填逻辑</h4><p><img src="http://myphoto.mtianyan.cn/blog/180110/DGHbaLBkd3.png?imageslim" alt="mark"></p><p>如果传回的有值则，显示传回来值。</p><p>密码也做同样操作</p><h4 id="修改默认的激活状态为false"><a href="#修改默认的激活状态为false" class="headerlink" title="修改默认的激活状态为false"></a>修改默认的激活状态为false</h4><p>post方法中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 默认激活状态为false</span><br><span class="line">user_profile.is_active = False</span><br></pre></td></tr></table></figure><p>书写处理激活的view。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 激活用户的view</span><br><span class="line">class ActiveUserView(View):</span><br><span class="line">    def get(self, request, active_code):</span><br><span class="line">        # 查询邮箱验证记录是否存在</span><br><span class="line">        all_record = EmailVerifyRecord.objects.filter(code = active_code)</span><br><span class="line">        # 激活form负责给激活跳转进来的人加验证码</span><br><span class="line">        active_form = ActiveForm(request.GET)</span><br><span class="line">        # 如果不为空也就是有用户</span><br><span class="line">        if all_record:</span><br><span class="line">            for record in all_record:</span><br><span class="line">                # 获取到对应的邮箱</span><br><span class="line">                email = record.email</span><br><span class="line">                # 查找到邮箱对应的user</span><br><span class="line">                user = UserProfile.objects.get(email=email)</span><br><span class="line">                user.is_active = True</span><br><span class="line">                user.save()</span><br><span class="line">                # 激活成功跳转到登录页面</span><br><span class="line">                return render(request, &quot;login.html&quot;, )</span><br><span class="line">        # 自己瞎输的验证码</span><br><span class="line">        else:</span><br><span class="line">            return render(request, &quot;register.html&quot;, &#123;&quot;msg&quot;: &quot;您的激活链接无效&quot;,&quot;active_form&quot;: active_form&#125;)</span><br></pre></td></tr></table></figure><p>配置用户激活的url并通过url提取到变量:</p><p>django1.9.8:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 激活用户url</span><br><span class="line">url(r&apos;^active/(?P&lt;active_code&gt;.*)/$&apos;,ActiveUserView.as_view(), name= &quot;user_active&quot;)</span><br></pre></td></tr></table></figure><p>django2.0.1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 激活用户url</span><br><span class="line">re_path(&apos;active/(?P&lt;active_code&gt;.*)/&apos;, ActiveUserView.as_view(), name= &quot;user_active&quot;)</span><br></pre></td></tr></table></figure><p>这里通过<code>?p</code>将后面<code>.*</code>代表全部提取的正则，符合的内容传入参数active_code中<code>/$</code>代表以<code>/$</code>为结尾</p><p><img src="http://myphoto.mtianyan.cn/blog/180111/i7DdIaB5bd.png?imageslim" alt="mark"></p><blockquote><p>其他细节根据自己需要进行优化。</p></blockquote><p>注册功能制作完毕。对应commit:</p><blockquote><p>注册功能实现完毕，流程:注册，发邮件，激活，登录。对应6-6,7,8,9,10</p></blockquote><h2 id="6-8-找回密码"><a href="#6-8-找回密码" class="headerlink" title="6-8 找回密码"></a>6-8 找回密码</h2><blockquote><p>这个6-8对应对应6-11,6-12</p></blockquote><h3 id="拷入forgetpassword页面"><a href="#拷入forgetpassword页面" class="headerlink" title="拷入forgetpassword页面"></a>拷入forgetpassword页面</h3><h3 id="书写处理忘记密码的view"><a href="#书写处理忘记密码的view" class="headerlink" title="书写处理忘记密码的view"></a>书写处理忘记密码的view</h3><p>users/views.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用户忘记密码的处理view</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ForgetPwdView</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="comment"># get方法直接返回页面</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">"forgetpwd.html"</span>, &#123; &#125;)</span><br></pre></td></tr></table></figure><p>django2.0.1 urls中配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 忘记密码</span><br><span class="line">path(&apos;forget/&apos;, ForgetPwdView.as_view(), name= &quot;forget_pwd&quot;),</span><br></pre></td></tr></table></figure><p>Django1.9.8 urls中配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 忘记密码</span><br><span class="line">url(&apos;forget/$&apos;, ForgetPwdView.as_view(), name=&quot;forget_pwd&quot;),</span><br></pre></td></tr></table></figure><h4 id="login-html中忘记密码"><a href="#login-html中忘记密码" class="headerlink" title="login html中忘记密码"></a>login html中忘记密码</h4><p><img src="http://myphoto.mtianyan.cn/blog/180111/cgk66mgd35.png?imageslim" alt="mark"></p><h4 id="配置忘记密码页面中静态文件。"><a href="#配置忘记密码页面中静态文件。" class="headerlink" title="配置忘记密码页面中静态文件。"></a>配置忘记密码页面中静态文件。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">load static</span><br><span class="line">修改static的目录</span><br><span class="line">修改其中的url</span><br></pre></td></tr></table></figure><h4 id="定义一个给forget的form"><a href="#定义一个给forget的form" class="headerlink" title="定义一个给forget的form"></a>定义一个给forget的form</h4><p>users/forms.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注册验证码实现</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ForgetForm</span><span class="params">(forms.Form)</span>:</span></span><br><span class="line">    <span class="comment"># 此处email与前端name需保持一致。</span></span><br><span class="line">    email = forms.EmailField(required=<span class="keyword">True</span>)</span><br><span class="line">    <span class="comment"># 应用验证码 自定义错误输出key必须与异常一样</span></span><br><span class="line">    captcha = CaptchaField(error_messages=&#123;<span class="string">"invalid"</span>: <span class="string">u"验证码错误"</span>&#125;)</span><br></pre></td></tr></table></figure><h4 id="添加验证码"><a href="#添加验证码" class="headerlink" title="添加验证码"></a>添加验证码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 用户忘记密码的处理view</span><br><span class="line">class ForgetPwdView(View):</span><br><span class="line">    # get方法直接返回页面</span><br><span class="line">    def get(self, request):</span><br><span class="line">        forget_from = ForgetForm()</span><br><span class="line">        return render(request, &quot;forgetpwd.html&quot;, &#123;&quot;forget_from&quot;:forget_from &#125;)</span><br></pre></td></tr></table></figure><h4 id="html中加上验证码"><a href="#html中加上验证码" class="headerlink" title="html中加上验证码"></a>html中加上验证码</h4><p><img src="http://myphoto.mtianyan.cn/blog/180111/Cf24GA16g0.png?imageslim" alt="mark"></p><h4 id="post中逻辑"><a href="#post中逻辑" class="headerlink" title="post中逻辑"></a>post中逻辑</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># post方法实现</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span><br><span class="line">    forget_form = ForgetForm(request.POST)</span><br><span class="line">    <span class="comment"># form验证合法情况下取出email</span></span><br><span class="line">    <span class="keyword">if</span> forget_form.is_valid():</span><br><span class="line">        email = request.POST.get(<span class="string">"email"</span>,<span class="string">""</span>)</span><br><span class="line">        <span class="comment"># 发送找回密码邮件</span></span><br><span class="line">        send_register_eamil(email, <span class="string">"forget"</span>)</span><br><span class="line">        <span class="comment"># 发送完毕返回登录页面并显示发送邮件成功。</span></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">"login.html"</span>, &#123;<span class="string">"msg"</span>:<span class="string">"重置密码邮件已发送,请注意查收"</span>&#125;)</span><br><span class="line">    <span class="comment"># 如果表单验证失败也就是他验证码输错等。</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">"forgetpwd.html"</span>, &#123;<span class="string">"forget_from"</span>: forget_form &#125;)</span><br></pre></td></tr></table></figure><h4 id="邮箱重置密码邮件发送"><a href="#邮箱重置密码邮件发送" class="headerlink" title="邮箱重置密码邮件发送"></a>邮箱重置密码邮件发送</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">elif send_type == &quot;forget&quot;:</span><br><span class="line">       email_title = &quot;mtianyan慕课小站 找回密码链接&quot;</span><br><span class="line">       email_body = loader.render_to_string(</span><br><span class="line">           &quot;email_forget.html&quot;,  # 需要渲染的html模板</span><br><span class="line">           &#123;</span><br><span class="line">               &quot;active_code&quot;: code  # 参数</span><br><span class="line">           &#125;</span><br><span class="line">       )</span><br><span class="line">       msg = EmailMessage(email_title, email_body, EMAIL_FROM, [email])</span><br><span class="line">       msg.content_subtype = &quot;html&quot;</span><br><span class="line">       send_status = msg.send()</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180111/4e60888a7F.png?imageslim" alt="mark"></p><h4 id="前端页面添加错误信息"><a href="#前端页面添加错误信息" class="headerlink" title="前端页面添加错误信息"></a>前端页面添加错误信息</h4><p>已经重复很多遍这个操作了。</p><p><img src="http://myphoto.mtianyan.cn/blog/180111/fl8Dhg5B2H.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180111/KEmkdk9c3b.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180111/FI5fafG9a8.png?imageslim" alt="mark"></p><blockquote><p>上述三图进行改正，不一一列举</p></blockquote><h4 id="书写重置密码view"><a href="#书写重置密码view" class="headerlink" title="书写重置密码view"></a>书写重置密码view</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重置密码的view</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResetView</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, active_code)</span>:</span></span><br><span class="line">        <span class="comment"># 查询邮箱验证记录是否存在</span></span><br><span class="line">        all_record = EmailVerifyRecord.objects.filter(code=active_code)</span><br><span class="line">        <span class="comment"># 如果不为空也就是有用户</span></span><br><span class="line">        active_form = ActiveForm(request.GET)</span><br><span class="line">        <span class="keyword">if</span> all_record:</span><br><span class="line">            <span class="keyword">for</span> record <span class="keyword">in</span> all_record:</span><br><span class="line">                <span class="comment"># 获取到对应的邮箱</span></span><br><span class="line">                email = record.email</span><br><span class="line">                <span class="comment"># 将email传回来</span></span><br><span class="line">                <span class="keyword">return</span> render(request, <span class="string">"password_reset.html"</span>, &#123;<span class="string">"email"</span>:email&#125;)</span><br><span class="line">        <span class="comment"># 自己瞎输的验证码</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> render(</span><br><span class="line">                request, <span class="string">"forgetpwd.html"</span>, &#123;</span><br><span class="line">                    <span class="string">"msg"</span>: <span class="string">"您的重置密码链接无效,请重新请求"</span>, <span class="string">"active_form"</span>: active_form&#125;)</span><br></pre></td></tr></table></figure><h4 id="配置重置密码url"><a href="#配置重置密码url" class="headerlink" title="配置重置密码url"></a>配置重置密码url</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Django1.9.8:</span></span><br><span class="line">    <span class="comment"># 重置密码urlc ：用来接收来自邮箱的重置链接</span></span><br><span class="line">    url(<span class="string">'reset/(?P&lt;active_code&gt;.*)/$'</span>, ResetView.as_view(), name=<span class="string">"reset_pwd"</span>),</span><br><span class="line"><span class="comment"># django2.0.1:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重置密码urlc ：用来接收来自邮箱的重置链接</span></span><br><span class="line">    re_path(<span class="string">'reset/(?P&lt;active_code&gt;.*)/'</span>, ResetView.as_view(), name=<span class="string">"reset_pwd"</span>),</span><br></pre></td></tr></table></figure><h4 id="拷贝进来password-reset页面"><a href="#拷贝进来password-reset页面" class="headerlink" title="拷贝进来password reset页面"></a>拷贝进来password reset页面</h4><p><img src="http://myphoto.mtianyan.cn/blog/180111/LFKlj0CLAb.png?imageslim" alt="mark"></p><blockquote><p>添加一个隐藏的input框，以便于我们知道到底是哪个用户在重置密码</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180111/BfaLgiG5k3.png?imageslim" alt="mark"></p><p>配置html中三大变化加url配置。</p><p><img src="http://myphoto.mtianyan.cn/blog/180111/AiiGBEkJLj.png?imageslim" alt="mark"></p><p><code>reset</code>的<code>url</code>需要我们传参进来,但是<code>modify</code>的不需要。<br>所以url配置和view都得分开。</p><h4 id="创建改变密码的forms"><a href="#创建改变密码的forms" class="headerlink" title="创建改变密码的forms:"></a>创建改变密码的forms:</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重置密码form实现</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModifyPwdForm</span><span class="params">(forms.Form)</span>:</span></span><br><span class="line">    <span class="comment"># 密码不能小于5位</span></span><br><span class="line">    password1 = forms.CharField(required=<span class="keyword">True</span>, min_length=<span class="number">5</span>)</span><br><span class="line">    <span class="comment"># 密码不能小于5位</span></span><br><span class="line">    password2 = forms.CharField(required=<span class="keyword">True</span>, min_length=<span class="number">5</span>)</span><br></pre></td></tr></table></figure><h4 id="书写改变密码的view；"><a href="#书写改变密码的view；" class="headerlink" title="书写改变密码的view；"></a>书写改变密码的view；</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># 改变密码的view</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModifyPwdView</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        modiypwd_form = ModifyPwdForm(request.POST)</span><br><span class="line">        <span class="keyword">if</span> modiypwd_form.is_valid():</span><br><span class="line">            pwd1 = request.POST.get(<span class="string">"password1"</span>, <span class="string">""</span>)</span><br><span class="line">            pwd2 = request.POST.get(<span class="string">"password2"</span>, <span class="string">""</span>)</span><br><span class="line">            email = request.POST.get(<span class="string">"email"</span>, <span class="string">""</span>)</span><br><span class="line">            <span class="comment"># 如果两次密码不相等，返回错误信息</span></span><br><span class="line">            <span class="keyword">if</span> pwd1 != pwd2:</span><br><span class="line">                <span class="keyword">return</span> render(request, <span class="string">"password_reset.html"</span>, &#123;<span class="string">"email"</span>: email, <span class="string">"msg"</span>: <span class="string">"密码不一致"</span>&#125;)</span><br><span class="line">            <span class="comment"># 如果密码一致</span></span><br><span class="line">            user = UserProfile.objects.get(email=email)</span><br><span class="line">            <span class="comment"># 加密成密文</span></span><br><span class="line">            user.password = make_password(pwd2)</span><br><span class="line">            <span class="comment"># save保存到数据库</span></span><br><span class="line">            user.save()</span><br><span class="line">            <span class="keyword">return</span> render(request, <span class="string">"login.html"</span>, &#123;<span class="string">"msg"</span>: <span class="string">"密码修改成功，请登录"</span>&#125;)</span><br><span class="line">        <span class="comment"># 验证失败说明密码位数不够。</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            email = request.POST.get(<span class="string">"email"</span>, <span class="string">""</span>)</span><br><span class="line">            <span class="keyword">return</span> render(request, <span class="string">"password_reset.html"</span>, &#123;<span class="string">"email"</span>: email, <span class="string">"modiypwd_form"</span>:modiypwd_form&#125;)</span><br></pre></td></tr></table></figure><h4 id="配置modify的url。"><a href="#配置modify的url。" class="headerlink" title="配置modify的url。"></a>配置modify的url。</h4><p>django2.0.1:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改密码url; 用于passwordreset页面提交表单</span></span><br><span class="line">path(<span class="string">'modify_pwd/'</span>, ModifyPwdView.as_view(), name=<span class="string">"modify_pwd"</span>),</span><br></pre></td></tr></table></figure><p>django1.9.8:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改密码url; 用于passwordreset页面提交表单</span></span><br><span class="line">url(<span class="string">r'^modify_pwd/$'</span>, ModifyPwdView.as_view(), name=<span class="string">"modify_pwd"</span>),</span><br></pre></td></tr></table></figure><p>建议自行走一遍注册，登录，忘记密码。重置密码。<br>错误的激活链接，错误的重置链接。值回填，form报错</p><p>更多: 重置密码链接是否被点击过，过期时间。</p><blockquote><p>对应commit忘记密码重置功能实现完毕，并进行了必要的测试。对应6-11,6-12</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;矛盾的普遍性是指矛盾存在于一切事物的发展过程之中，矛盾存在于一切事物发展过程的始终。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;note &quot;&gt;&lt;p&gt; 我想只要是个系统，就少不了登录注册。这是我们需要首先处理的主要矛盾。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;完成登录 注册 找回密码 激活 验证码集成&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Django+Xadmin打造在线教育平台" scheme="http://blog.mtianyan.cn/categories/Django-Xadmin%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E5%B9%B3%E5%8F%B0/"/>
    
    
      <category term="Python" scheme="http://blog.mtianyan.cn/tags/Python/"/>
    
      <category term="Django" scheme="http://blog.mtianyan.cn/tags/Django/"/>
    
      <category term="在线教育平台" scheme="http://blog.mtianyan.cn/tags/%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E5%B9%B3%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>强力Django+杀手级Xadmin打造在线教育平台(五)</title>
    <link href="http://blog.mtianyan.cn/post/507fe3bf.html"/>
    <id>http://blog.mtianyan.cn/post/507fe3bf.html</id>
    <published>2018-01-10T14:09:17.000Z</published>
    <updated>2018-02-02T12:40:13.960Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>总之，我们要拿来。我们要或使用，或存放，或毁灭。 - 鲁迅 </p></blockquote><div class="note "><p> 既然有django提供的强大admin,我们便要拿来用喽。</p><ul><li>使用xadmin，通过adminx,将已有model注册进后台。快速搭建可用的后台系统。</li></ul></div><a id="more"></a><h2 id="django-admin介绍"><a href="#django-admin介绍" class="headerlink" title="django admin介绍"></a>django admin介绍</h2><p>上一章我们进行了需求分析和数据库设计。本章我们来快速搭建一个可用的后台管理系统。</p><p>后台管理系统特点：</p><ul><li>权限管理</li><li>少前端样式。(样式一般不是很看重)，</li><li>快速开发</li></ul><p>django的后台管理系统是一套智能的管理系统。<br>django的杀手锏之一就是admin管理系统。</p><p>admin在项目新建时就已经为我们生成好了。</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/97kgi66hBJ.png?imageslim" alt="mark"></p><p>Django的admin也是一个app，在我们新建项目时就创建好了。<br>而且会自动在url中配置好了链接。</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/BdL32DBc99.png?imageslim" alt="mark"></p><p>访问:<a href="http://127.0.0.1:8000/admin/" target="_blank" rel="noopener">http://127.0.0.1:8000/admin/</a></p><p>可以看到admin的登录窗口。</p><p>Django是不会自动生成admin的用户的，需要我们自己去命令生成。</p><h3 id="createsuperuser"><a href="#createsuperuser" class="headerlink" title="createsuperuser"></a>createsuperuser</h3><p>点击<code>Tools 菜单下 Run manage.py Task</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">createsuperuser</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180109/ggemFK9lAJ.png?imageslim" alt="mark"></p><p>输入自己的用户名密码。</p><p>报错:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django.db.utils.DataError: (1406, &quot;Data too long for column &apos;gender&apos; at row 1&quot;)</span><br></pre></td></tr></table></figure><blockquote><p>gender中female是6位。而我们最大长度只有5.</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180109/ie29f0bI0a.png?imageslim" alt="mark"></p><p>修改后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">makemigrations users</span><br><span class="line">migrate users</span><br></pre></td></tr></table></figure><p>然后重新<code>createsuperuser</code></p><p>使用自己定义的用户名密码可以登进系统。</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/C0h63A68F5.png?imageslim" alt="mark"></p><blockquote><p>默认是用户名 + 密码。后面会讲到如何实现用户名 或 邮箱和密码登录。</p></blockquote><h3 id="修改setting中对应语言，时区，以及数据库写入时间。"><a href="#修改setting中对应语言，时区，以及数据库写入时间。" class="headerlink" title="修改setting中对应语言，时区，以及数据库写入时间。"></a>修改setting中对应语言，时区，以及数据库写入时间。</h3><p>修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 语言改为中文</span><br><span class="line">LANGUAGE_CODE = &apos;zh-hans&apos;</span><br><span class="line"></span><br><span class="line"># 时区改为上海</span><br><span class="line">TIME_ZONE = &apos;Asia/Shanghai&apos;</span><br><span class="line"># 数据库存储使用时间，True时间会被存为UTC的时间</span><br><span class="line">USE_TZ = False</span><br></pre></td></tr></table></figure><p>点击运行可以看到如下图被换成汉语的效果:</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/L3fGhdb7C6.png?imageslim" alt="mark"></p><p>注意: django 2.0.1 并不会看到汉化后的默认页面。只有admin被汉化了。</p><p>组对应数据表: auth_group</p><p>在Django的admin中可以把上章的表都注册进来。对于表进行任意的增删改查。</p><p>默认其实会把user也注册进来的，但是因为我们通过userProfile覆盖了user。所以没有显示。</p><h3 id="注册UserProfile进来"><a href="#注册UserProfile进来" class="headerlink" title="注册UserProfile进来"></a>注册UserProfile进来</h3><p>users/admin.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 因为同一个目录，所以可以直接.models</span></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> UserProfile</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写一个管理器:命名, model+Admin</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserProfileAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将UserProfile注册进我们的admin中, 并为它选择管理器</span></span><br><span class="line">admin.site.register(UserProfile,UserProfileAdmin)</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180109/c58F6dg549.png?imageslim" alt="mark"></p><blockquote><p>可以看到我们的用户信息就注册进来了。</p></blockquote><p><code>USERS</code> 是用户所在表名称。</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/Fk7G3EkDC4.png?imageslim" alt="mark"></p><p>进入页面可以看到Django为我们把每个不同类型的字段生成了不同的前端样式。</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/761bBAhbJl.png?imageslim" alt="mark"></p><blockquote><p>Django会自动帮我们把密码加密，而且不能反解。单向性。</p></blockquote><p>如果出现错误, 可能是<code>initial</code>文件在我们拖入apps时路径被改变。之后我们添加了环境变量, 前面再加上apps就会报错。</p><p>这时把<code>initial.py</code> 中路径进行修改。</p><p>错误2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">新增用户信息提示：</span><br><span class="line">Cannot add or update a child row: a foreign key constraint fails</span><br><span class="line">(1452, &apos;Cannot add or update a child row: a foreign key constraint fails </span><br><span class="line">`mxonline`.`django_admin_log`, CONSTRAINT `django_admin_log_user_id_c564eba6_fk_auth_user_id` </span><br><span class="line">FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`))&apos;)</span><br></pre></td></tr></table></figure><blockquote><p>解决方案1: 不用解决，之后换Xadmin就好了。</p></blockquote><p>解决方案2: 在setting的databases中添加以下代码取消外键检查</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    &apos;default&apos;: &#123;</span><br><span class="line">        &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;,</span><br><span class="line">        &apos;NAME&apos;: &apos;mxonline2&apos;,</span><br><span class="line">        &apos;USER&apos;: &apos;root&apos;,</span><br><span class="line">        &apos;PASSWORD&apos;: &apos;你的密码&apos;,</span><br><span class="line">        &apos;HOST&apos;:&apos;127.0.0.1&apos;,</span><br><span class="line">        &apos;OPTIONS&apos;: &#123;</span><br><span class="line">          &quot;init_command&quot;: &quot;SET foreign_key_checks=0;&quot;,</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180109/l4mGKFaGm4.png?imageslim" alt="mark"></p><p>实验成功为了不影响后面，把options删除</p><p>本小节结束对应commit:</p><blockquote><p>admin中添加管理器&amp;注册。时区,语言,utc(False).数据库中选项参数。female的长度修改, createsuperuser.对应5-1</p></blockquote><h2 id="xadmin的安装"><a href="#xadmin的安装" class="headerlink" title="xadmin的安装"></a>xadmin的安装</h2><p>一套基于admin, 比admin更强大的系统。</p><ol><li>通过pip安装</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install xadmin</span><br></pre></td></tr></table></figure><h3 id="Python3-amp-Django2-0-1安装官方适配Django2-0的包"><a href="#Python3-amp-Django2-0-1安装官方适配Django2-0的包" class="headerlink" title="Python3 &amp; Django2.0.1安装官方适配Django2.0的包"></a>Python3 &amp; Django2.0.1安装官方适配Django2.0的包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install git+git://github.com/sshwsfc/xadmin.git@django2</span><br></pre></td></tr></table></figure><p>xadmin可以把我们的后台做的很强大，可扩展。</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/2c3el2afjg.png?imageslim" alt="mark"></p><p>可以看到它同时下载了很多其他依赖包。</p><h3 id="注册Xadmin-与-crispy-forms"><a href="#注册Xadmin-与-crispy-forms" class="headerlink" title="注册Xadmin 与 crispy-forms"></a>注册Xadmin 与 crispy-forms</h3><p>Mxonline2/settings.py的INSTALLED_APPS中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&apos;xadmin&apos;,</span><br><span class="line">&apos;crispy_forms&apos;</span><br></pre></td></tr></table></figure><p>然后把urls中默认admin指向Xadmin</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入x admin，替换admin</span></span><br><span class="line"><span class="keyword">import</span> xadmin</span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^xadmin/'</span>, xadmin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>Python3 Django2.0.1 的url的配置中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(&apos;xadmin/&apos;, xadmin.site.urls),</span><br></pre></td></tr></table></figure><p><strong>注意：Django 2.0.1中不需要加<code>r</code>也不需要加<code>^</code></strong></p><p>将我们原来写的user/admin.py中代码注释掉。</p><p>此时直接运行项目会报错，因为我们Xadmin的默认数据表并没有migarte</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ProgrammingError: (1146, &quot;Table &apos;mxonline2.xadmin_usersettings&apos; doesn&apos;t exist&quot;)</span><br><span class="line">[09/Jan/2018 06:40:27] &quot;GET /xadmin/ HTTP/1.1&quot; 500 150414</span><br></pre></td></tr></table></figure><p>点击<code>Tools 菜单下 Run manage.py Task</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">makemigrations</span><br><span class="line">migrate</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180109/bgleKlg6kJ.png?imageslim" alt="mark"></p><blockquote><p>可以看到已经被应用成功。</p></blockquote><p>前往Navicat进行验证。</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/Al734ikfA4.png?imageslim" alt="mark"></p><blockquote><p>可以看到新增的表。</p></blockquote><p>Xadmin的后台采用的是bootstrap。</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/7ccm6L5BG7.png?imageslim" alt="mark"></p><blockquote><p>后面我们会介绍如何制作插件</p></blockquote><h3 id="源码安装："><a href="#源码安装：" class="headerlink" title="源码安装："></a>源码安装：</h3><p>github: <a href="https://github.com/sshwsfc/xadmin" target="_blank" rel="noopener">https://github.com/sshwsfc/xadmin</a></p><p>下载或<code>git clone</code>将源码下载到本地。</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/KFaKi4gC3C.png?imageslim" alt="mark"></p><blockquote><p>解压后将Xadmin文件夹复制到我们的项目中。</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180109/FbJeCbijh4.png?imageslim" alt="mark"></p><h4 id="Python3版本源码安装-与url配置不同"><a href="#Python3版本源码安装-与url配置不同" class="headerlink" title="Python3版本源码安装:与url配置不同"></a>Python3版本源码安装:与url配置不同</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b django2 https://github.com/sshwsfc/xadmin.git</span><br></pre></td></tr></table></figure><p>其余操作一样。</p><h3 id="新建extra-apps，并在setting中注册地址"><a href="#新建extra-apps，并在setting中注册地址" class="headerlink" title="新建extra_apps，并在setting中注册地址"></a>新建extra_apps，并在setting中注册地址</h3><p>新建new package:  extra_apps</p><blockquote><p>使用该目录存放我们的第三方插件，将Xadmin移入。<br>右键mark为SourceRoot, 但是这时候cmd下回报错。</p></blockquote><p>所以在setting.py中加入。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sys.path.insert(<span class="number">0</span>,os.path.join(BASE_DIR, <span class="string">'extra_apps'</span>))</span><br></pre></td></tr></table></figure><blockquote><p>因为我们的source目录已经有Xadmin了，就不会再去系统环境中找了。这时候卸载我们的Xadmin。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">workon mxonline2</span><br><span class="line">pip uninstall xadmin</span><br></pre></td></tr></table></figure><p>但是他的依赖包我们还需要，所以只需要卸载Xadmin。此时我们运行会报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">    from future.utils import iteritems</span><br><span class="line">ImportError: No module named future.utils</span><br></pre></td></tr></table></figure><p>安装必要的包:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pip install future</span><br><span class="line">pip install six</span><br><span class="line">pip install httplib2</span><br><span class="line">pip install django-import-export</span><br></pre></td></tr></table></figure><p>此时又可以成功运行了</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/kmCI61m81H.png?imageslim" alt="mark"></p><p>日志记录：后台管理人员做的操作都会生成一条记录。</p><p>源码安装优点:</p><ul><li>xadmin新特性</li><li>对于源码进行自己的修改。</li></ul><p>本小节结束对应commit:</p><blockquote><p>Xadmin的安装与源码安装，配置setting中extra_apps. 对应5-2</p></blockquote><h2 id="users-app-的model注册"><a href="#users-app-的model注册" class="headerlink" title="users app 的model注册"></a>users app 的model注册</h2><h3 id="遗留问题-django2-0-1使用xadmin时。如验证码等带dateTimefield区域出错。"><a href="#遗留问题-django2-0-1使用xadmin时。如验证码等带dateTimefield区域出错。" class="headerlink" title="遗留问题: django2.0.1使用xadmin时。如验证码等带dateTimefield区域出错。"></a>遗留问题: django2.0.1使用xadmin时。如验证码等带dateTimefield区域出错。</h3><p>xadmin/widgets.py</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/I3F7K6KhLf.png?imageslim" alt="mark"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">input_html = [ht <span class="keyword">for</span> ht <span class="keyword">in</span> super(AdminSplitDateTime, self).render(</span><br><span class="line">    name, value, attrs).split(<span class="string">'/&gt;&lt;'</span>) <span class="keyword">if</span> ht != <span class="string">''</span>]</span><br><span class="line">        <span class="keyword">if</span> (len(input_html) &gt; <span class="number">1</span>):</span><br><span class="line">            input_html[<span class="number">0</span>] = input_html[<span class="number">0</span>] + <span class="string">"/&gt;"</span></span><br><span class="line">            input_html[<span class="number">1</span>] = <span class="string">"&lt;"</span> + input_html[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180109/KiBgGKCgLI.png?imageslim" alt="mark"></p><blockquote><p>此时可以看到已经运行正常</p></blockquote><h3 id="真正开始"><a href="#真正开始" class="headerlink" title="真正开始"></a>真正开始</h3><p>Xadmin是基于Django的admin来开发的，所以Xadmin也继承了许多admin的用法。</p><ul><li>比如: models的注册。</li></ul><p>UserProfile已经被自动注册进去了，我们从验证码开始注册。</p><p>我们需要新建一个<code>adminx.py</code>文件，Xadmin会自动搜寻这种命名的文件。</p><h3 id="新建py文件的初始化模板"><a href="#新建py文件的初始化模板" class="headerlink" title="新建py文件的初始化模板"></a>新建py文件的初始化模板</h3><p><img src="http://myphoto.mtianyan.cn/blog/180109/22J8la5G8c.png?imageslim" alt="mark"></p><p>新建users/adminx.py：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># encoding: utf-8</span><br><span class="line">__author__ = &apos;mtianyan&apos;</span><br><span class="line">__date__ = &apos;2018/1/9 0009 08:02&apos;</span><br><span class="line"></span><br><span class="line">import xadmin</span><br><span class="line"></span><br><span class="line">from .models import EmailVerifyRecord</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 创建admin的管理类,这里不再是继承admin，而是继承object</span><br><span class="line">class EmailVerifyRecordAdmin(object):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xadmin.site.register(EmailVerifyRecord, EmailVerifyRecordAdmin)</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180109/3LEG0j7e2h.png?imageslim" alt="mark"></p><blockquote><p>可以看到这时候访问已经有邮箱验证码了。</p></blockquote><p>邮箱验证码这几个字就是我们代码中Meta中verbose_name定义的:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">    verbose_name = <span class="string">"邮箱验证码"</span></span><br><span class="line">    verbose_name_plural = verbose_name</span><br></pre></td></tr></table></figure><p><code>verbose_name_plural</code>是<code>verbose_name</code>的复数形式。</p><p>字段的verbose_name会直接显示在后台。<code>sendtype</code>和<code>sendtime</code>没有设置所以直接显示了英文。</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/BL45eAhd66.png?imageslim" alt="mark"></p><blockquote><p>可以看到我们添加验证码成功。注意:上节版本中我们进行了: makemigaration &amp; migrate。<br>但是它是pip安装的Xadmin的数据表生成。我们卸载之后，源码安装需要重新运行进行数据迁移。(django需要通过app文件夹下的init文件来记录表的更改记录，pip的都卸了，所以就没法找到了)</p></blockquote><p>会报错:</p><blockquote><p>Xadmin_log不存在错误。只需要运行这两条命令即可。</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180109/8A5cED00eC.png?imageslim" alt="mark"></p><h4 id="解决后台部分英文显示"><a href="#解决后台部分英文显示" class="headerlink" title="解决后台部分英文显示"></a>解决后台部分英文显示</h4><blockquote><p>全部models中字段自行添加verbose_name</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180109/GG009ClkEE.png?imageslim" alt="mark"></p><p>这里就不贴出来了，自行检查都加上(没写出的请自行修改全部加上verbose_name)。</p><h4 id="解决EmailVerifyRecord-object显示"><a href="#解决EmailVerifyRecord-object显示" class="headerlink" title="解决EmailVerifyRecord object显示"></a>解决EmailVerifyRecord object显示</h4><blockquote><p><strong>全部</strong>(没写出的请自行修改)model，py2:重载<code>__unicode</code> py3:重载<code>__str__</code></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重载Unicode方法使后台不再直接显示object</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__unicode__</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&#123;0&#125;(&#123;1&#125;)'</span>.format(self.code,self.email)</span><br></pre></td></tr></table></figure><blockquote><p>上面代码是python的自身基础语法。</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180109/F45LiKCF16.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180109/gb0kBFIJKH.png?imageslim" alt="mark"></p><h4 id="配置显示列"><a href="#配置显示列" class="headerlink" title="配置显示列"></a>配置显示列</h4><p><img src="http://myphoto.mtianyan.cn/blog/180109/0mbjJe5ImK.png?imageslim" alt="mark"></p><p>users/adminx.py的管理器中设置list_display:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 创建admin的管理类,这里不再是继承admin，而是继承object</span><br><span class="line">class EmailVerifyRecordAdmin(object):</span><br><span class="line">    # 配置后台我们需要显示的列</span><br><span class="line">    list_display = [&apos;code&apos;, &apos;email&apos;,&apos;send_type&apos;, &apos;send_time&apos;]</span><br></pre></td></tr></table></figure><blockquote><p>list_display可以使用列表或元祖，建议使用列表。否则元组只有一个元素，忘记加逗号就会报错。</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180109/aj9gJbeJJJ.png?imageslim" alt="mark"></p><p>选择框的生成是因为我们加上了<code>choices</code></p><h4 id="配置搜索searchfield"><a href="#配置搜索searchfield" class="headerlink" title="配置搜索searchfield"></a>配置搜索searchfield</h4><p>users/adminx.py的管理器中EmailVerifyRecordAdmin添加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置搜索字段,不做时间搜索</span></span><br><span class="line">search_fields =  [<span class="string">'code'</span>, <span class="string">'email'</span>,<span class="string">'send_type'</span>]</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180109/fDclFJl6el.png?imageslim" alt="mark"></p><p>再添加一条数据验证搜索功能</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/8lLa4IIadB.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180109/FcAJjJcAAm.png?imageslim" alt="mark"></p><h4 id="xadmin导出csv中文乱码解决"><a href="#xadmin导出csv中文乱码解决" class="headerlink" title="xadmin导出csv中文乱码解决"></a>xadmin导出csv中文乱码解决</h4><p><img src="http://myphoto.mtianyan.cn/blog/180109/am4cLCB69D.png?imageslim" alt="mark"></p><blockquote><p>将<code>charset=utf-8</code> 改为<code>charset=gbk</code></p></blockquote><h4 id="xadmin导出xml报错"><a href="#xadmin导出xml报错" class="headerlink" title="xadmin导出xml报错"></a>xadmin导出xml报错</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TypeError at /xadmin/users/emailverifyrecord/</span><br><span class="line">unicode argument expected, got &apos;str&apos;</span><br></pre></td></tr></table></figure><blockquote><p>io.StringIO这个库新版本的python3直接往这个库中加入了一些新的内容，使得该库在Python2.7中较为混乱。</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180109/HcG0a8g2Ef.png?imageslim" alt="mark"></p><blockquote><p>将StringIo变为BytesIO</p></blockquote><h4 id="通过时间筛选字段。"><a href="#通过时间筛选字段。" class="headerlink" title="通过时间筛选字段。"></a>通过时间筛选字段。</h4><p>users/adminx.py的管理器中EmailVerifyRecordAdmin添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 配置筛选字段</span><br><span class="line">list_filter =  [&apos;code&apos;, &apos;email&apos;,&apos;send_type&apos;, &apos;send_time&apos;]</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180109/FhLLheAi2f.png?imageslim" alt="mark"></p><h3 id="Django的admin-Xadmin和其他系统区别"><a href="#Django的admin-Xadmin和其他系统区别" class="headerlink" title="Django的admin, Xadmin和其他系统区别"></a>Django的admin, Xadmin和其他系统区别</h3><blockquote><p>不像php等其他语言是一个功能模块一个功能设计的。<br>Django是对于每张表增删改查的管理器，我们可以在增删改成的基础上加上我们自己的后台逻辑。<br>因此某种程度可以说他是不依赖于具体业务的。不管啥系统后台都是由表组成。</p></blockquote><p>不依赖于后台逻辑，又可以加上逻辑。</p><h3 id="user-models的注册"><a href="#user-models的注册" class="headerlink" title="user/models的注册"></a>user/models的注册</h3><p>users/adminx.py中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 创建banner的管理类</span><br><span class="line">class BannerAdmin(object):</span><br><span class="line">    list_display = [&apos;title&apos;, &apos;image&apos;, &apos;url&apos;,&apos;index&apos;, &apos;add_time&apos;]</span><br><span class="line">    search_fields = [&apos;title&apos;, &apos;image&apos;, &apos;url&apos;,&apos;index&apos;]</span><br><span class="line">    list_filter = [&apos;title&apos;, &apos;image&apos;, &apos;url&apos;,&apos;index&apos;, &apos;add_time&apos;]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 将model与admin管理器进行关联注册</span><br><span class="line">xadmin.site.register(Banner, BannerAdmin)</span><br></pre></td></tr></table></figure><p>此时后台页面。</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/0L58d277Ba.png?imageslim" alt="mark"></p><blockquote><p>可以自行测试轮播图是否可以新建成功。</p></blockquote><p>本小节结束对应commit:</p><blockquote><p>usersmodels三张表注册进xadmin, 配置搜索过滤展示字段，修复xadmin导出xml错误,导出csv乱码，Unicode重载。对应5-3</p></blockquote><p>py3(django2.0.1):</p><blockquote><p>usersmodels三张表注册进xadmin, 配置搜索过滤展示字段，修复xadmin导出csv乱码，修复django2.0.1的indexError, str重载。对应5-3</p></blockquote><h2 id="剩余app-model注册"><a href="#剩余app-model注册" class="headerlink" title="剩余app model注册"></a>剩余app model注册</h2><h3 id="courses注册"><a href="#courses注册" class="headerlink" title="courses注册"></a>courses注册</h3><p>新建courses/adminx.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line">__author__ = <span class="string">'mtianyan'</span></span><br><span class="line">__date__ = <span class="string">'2018/1/9 0009 20:10'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Course, Lesson, Video, CourseResource</span><br><span class="line"><span class="keyword">import</span> xadmin</span><br><span class="line"></span><br><span class="line"><span class="comment"># Course的admin管理器</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CourseAdmin</span><span class="params">(object)</span>:</span></span><br><span class="line">    list_display = [</span><br><span class="line">        <span class="string">'name'</span>,</span><br><span class="line">        <span class="string">'desc'</span>,</span><br><span class="line">        <span class="string">'detail'</span>,</span><br><span class="line">        <span class="string">'degree'</span>,</span><br><span class="line">        <span class="string">'learn_times'</span>,</span><br><span class="line">        <span class="string">'students'</span>]</span><br><span class="line">    search_fields = [<span class="string">'name'</span>, <span class="string">'desc'</span>, <span class="string">'detail'</span>, <span class="string">'degree'</span>, <span class="string">'students'</span>]</span><br><span class="line">    list_filter = [</span><br><span class="line">        <span class="string">'name'</span>,</span><br><span class="line">        <span class="string">'desc'</span>,</span><br><span class="line">        <span class="string">'detail'</span>,</span><br><span class="line">        <span class="string">'degree'</span>,</span><br><span class="line">        <span class="string">'learn_times'</span>,</span><br><span class="line">        <span class="string">'students'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LessonAdmin</span><span class="params">(object)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'course'</span>, <span class="string">'name'</span>, <span class="string">'add_time'</span>]</span><br><span class="line">    search_fields = [<span class="string">'course'</span>, <span class="string">'name'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># __name代表使用外键中name字段</span></span><br><span class="line">    list_filter = [<span class="string">'course__name'</span>, <span class="string">'name'</span>, <span class="string">'add_time'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VideoAdmin</span><span class="params">(object)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'lesson'</span>, <span class="string">'name'</span>, <span class="string">'add_time'</span>]</span><br><span class="line">    search_fields = [<span class="string">'lesson'</span>, <span class="string">'name'</span>]</span><br><span class="line">    list_filter = [<span class="string">'lesson'</span>, <span class="string">'name'</span>, <span class="string">'add_time'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CourseResourceAdmin</span><span class="params">(object)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'course'</span>, <span class="string">'name'</span>, <span class="string">'download'</span>, <span class="string">'add_time'</span>]</span><br><span class="line">    search_fields = [<span class="string">'course'</span>, <span class="string">'name'</span>, <span class="string">'download'</span>]</span><br><span class="line">    <span class="comment"># __name代表使用外键中name字段</span></span><br><span class="line">    list_filter = [<span class="string">'course__name'</span>, <span class="string">'name'</span>, <span class="string">'download'</span>, <span class="string">'add_time'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将管理器与model进行注册关联</span></span><br><span class="line">xadmin.site.register(Course, CourseAdmin)</span><br><span class="line">xadmin.site.register(Lesson, LessonAdmin)</span><br><span class="line">xadmin.site.register(Video, VideoAdmin)</span><br><span class="line">xadmin.site.register(CourseResource, CourseResourceAdmin)</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180109/H8eLIc73d9.png?imageslim" alt="mark"></p><blockquote><p>注意：对应后台显示英文的字段自行检查<code>verbosename</code>，自行加上。<br>注意: py2下重载<code>__unicode__</code>方法，py3下重载<code>__str__</code>方法</p></blockquote><p>如(注意缩进):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'《&#123;0&#125;》课程的章节 &gt;&gt; &#123;1&#125;'</span>.format(self.course,self.name)</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180109/ICGm5c3acB.png?imageslim" alt="mark"></p><p><code>int</code>类型后台会生成如下图区间取值:</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/9mcfFD7kml.png?imageslim" alt="mark"></p><p>可以看到有外键关系的会有一个小符号。</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/dH8Kblkmaj.png?imageslim" alt="mark"></p><h3 id="注册机构app的adminx"><a href="#注册机构app的adminx" class="headerlink" title="注册机构app的adminx"></a>注册机构app的adminx</h3><p>新建<code>organization/adminx.py</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line">__author__ = <span class="string">'mtianyan'</span></span><br><span class="line">__date__ = <span class="string">'2018/1/9 0009 21:01'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> xadmin</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> CityDict, CourseOrg, Teacher</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 机构所属城市名后台管理器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CityDictAdmin</span><span class="params">(object)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'name'</span>, <span class="string">'desc'</span>, <span class="string">'add_time'</span>]</span><br><span class="line">    search_fields = [<span class="string">'name'</span>, <span class="string">'desc'</span>]</span><br><span class="line">    list_filter = [<span class="string">'name'</span>, <span class="string">'desc'</span>, <span class="string">'add_time'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 机构课程信息管理器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CourseOrgAdmin</span><span class="params">(object)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'name'</span>, <span class="string">'desc'</span>, <span class="string">'click_nums'</span>, <span class="string">'fav_nums'</span>,<span class="string">'add_time'</span> ]</span><br><span class="line">    search_fields = [<span class="string">'name'</span>, <span class="string">'desc'</span>, <span class="string">'click_nums'</span>, <span class="string">'fav_nums'</span>]</span><br><span class="line">    list_filter = [<span class="string">'name'</span>, <span class="string">'desc'</span>, <span class="string">'click_nums'</span>, <span class="string">'fav_nums'</span>,<span class="string">'city__name'</span>,<span class="string">'address'</span>,<span class="string">'add_time'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TeacherAdmin</span><span class="params">(object)</span>:</span></span><br><span class="line">    list_display = [ <span class="string">'name'</span>,<span class="string">'org'</span>, <span class="string">'work_years'</span>, <span class="string">'work_company'</span>,<span class="string">'add_time'</span>]</span><br><span class="line">    search_fields = [<span class="string">'org'</span>, <span class="string">'name'</span>, <span class="string">'work_years'</span>, <span class="string">'work_company'</span>]</span><br><span class="line">    list_filter = [<span class="string">'org__name'</span>, <span class="string">'name'</span>, <span class="string">'work_years'</span>, <span class="string">'work_company'</span>,<span class="string">'click_nums'</span>, <span class="string">'fav_nums'</span>, <span class="string">'add_time'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xadmin.site.register(CityDict, CityDictAdmin)</span><br><span class="line">xadmin.site.register(CourseOrg, CourseOrgAdmin)</span><br><span class="line">xadmin.site.register(Teacher, TeacherAdmin)</span><br></pre></td></tr></table></figure><blockquote><p>注意：对应后台显示英文的字段自行检查verbosename，自行加上。<br>注意: py2下重载<code>__unicode__</code>方法，py3下重载<code>__str__</code>方法</p></blockquote><p>如(注意缩进):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">"[&#123;0&#125;]的教师: &#123;1&#125;"</span>.format(self.org, self.name)</span><br></pre></td></tr></table></figure><p>如果注册后没有显示： 重新登录，或重启项目</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/cIe1LjK7gC.png?imageslim" alt="mark"></p><h3 id="operation-app注册xadmin"><a href="#operation-app注册xadmin" class="headerlink" title="operation app注册xadmin"></a>operation app注册xadmin</h3><p>新建<code>operation/adminx.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line">__author__ = <span class="string">'mtianyan'</span></span><br><span class="line">__date__ = <span class="string">'2018/1/9 0009 22:12'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> xadmin</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> UserAsk, UserCourse, UserMessage, CourseComments, UserFavorite</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户表单我要学习后台管理器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserAskAdmin</span><span class="params">(object)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'name'</span>, <span class="string">'mobile'</span>, <span class="string">'course_name'</span>, <span class="string">'add_time'</span>]</span><br><span class="line">    search_fields = [<span class="string">'name'</span>, <span class="string">'mobile'</span>, <span class="string">'course_name'</span>]</span><br><span class="line">    list_filter = [<span class="string">'name'</span>, <span class="string">'mobile'</span>, <span class="string">'course_name'</span>, <span class="string">'add_time'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户课程学习后台管理器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserCourseAdmin</span><span class="params">(object)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'user'</span>, <span class="string">'course'</span>, <span class="string">'add_time'</span>]</span><br><span class="line">    search_fields = [<span class="string">'user'</span>, <span class="string">'course'</span>]</span><br><span class="line">    list_filter = [<span class="string">'user'</span>, <span class="string">'course'</span>, <span class="string">'add_time'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户消息后台管理器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserMessageAdmin</span><span class="params">(object)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'user'</span>, <span class="string">'message'</span>, <span class="string">'has_read'</span>, <span class="string">'add_time'</span>]</span><br><span class="line">    search_fields = [<span class="string">'user'</span>, <span class="string">'message'</span>, <span class="string">'has_read'</span>]</span><br><span class="line">    list_filter = [<span class="string">'user'</span>, <span class="string">'message'</span>, <span class="string">'has_read'</span>, <span class="string">'add_time'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户评论后台管理器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CourseCommentsAdmin</span><span class="params">(object)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'user'</span>, <span class="string">'course'</span>, <span class="string">'comments'</span>, <span class="string">'add_time'</span>]</span><br><span class="line">    search_fields = [<span class="string">'user'</span>, <span class="string">'course'</span>, <span class="string">'comments'</span>]</span><br><span class="line">    list_filter = [<span class="string">'user'</span>, <span class="string">'course'</span>, <span class="string">'comments'</span>, <span class="string">'add_time'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户收藏后台管理器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserFavoriteAdmin</span><span class="params">(object)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'user'</span>, <span class="string">'fav_id'</span>, <span class="string">'fav_type'</span>, <span class="string">'add_time'</span>]</span><br><span class="line">    search_fields = [<span class="string">'user'</span>, <span class="string">'fav_id'</span>, <span class="string">'fav_type'</span>]</span><br><span class="line">    list_filter = [<span class="string">'user'</span>, <span class="string">'fav_id'</span>, <span class="string">'fav_type'</span>, <span class="string">'add_time'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将后台管理器与models进行关联注册。</span></span><br><span class="line">xadmin.site.register(UserAsk, UserAskAdmin)</span><br><span class="line">xadmin.site.register(UserCourse, UserCourseAdmin)</span><br><span class="line">xadmin.site.register(UserMessage, UserMessageAdmin)</span><br><span class="line">xadmin.site.register(CourseComments, CourseCommentsAdmin)</span><br><span class="line">xadmin.site.register(UserFavorite, UserFavoriteAdmin)</span><br></pre></td></tr></table></figure><blockquote><p>注意：对应后台显示英文的字段自行检查<code>verbosename</code>，自行加上。<br>注意: py2下重载<code>__unicode__</code>方法，py3下重载<code>__str__</code>方法</p></blockquote><p>如(注意缩进):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">"[&#123;0&#125;]的教师: &#123;1&#125;"</span>.format(self.org, self.name)</span><br></pre></td></tr></table></figure><p>成功性验证:</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/E6il5E9j86.png?imageslim" alt="mark"></p><p>本小节结束对于commit:</p><blockquote><p>5:4 注册完成operation,机构，课程app。注意:自行重载str/unicode。补全verbosename。</p></blockquote><h2 id="xadmin全局配置"><a href="#xadmin全局配置" class="headerlink" title="xadmin全局配置"></a>xadmin全局配置</h2><p>将全局配置修改:</p><ul><li>如左上角：django Xadmin。下面的我的公司</li><li>主题修改，app名称汉化，菜单收叠。</li></ul><h3 id="使用Xadmin的主题功能。"><a href="#使用Xadmin的主题功能。" class="headerlink" title="使用Xadmin的主题功能。"></a>使用Xadmin的主题功能。</h3><p>把全站的配置放在users\adminx.py中:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> xadmin <span class="keyword">import</span> views</span><br><span class="line"><span class="comment"># 创建X admin的全局管理器并与view绑定。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseSetting</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 开启主题功能</span></span><br><span class="line">    enable_themes = <span class="keyword">True</span></span><br><span class="line">    use_bootswatch = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将全局配置管理与view绑定注册</span></span><br><span class="line">xadmin.site.register(views.BaseAdminView, BaseSetting)</span><br></pre></td></tr></table></figure><h3 id="解决django1-9-python2-下Xadmin主题不生效问题。"><a href="#解决django1-9-python2-下Xadmin主题不生效问题。" class="headerlink" title="解决django1.9(python2)下Xadmin主题不生效问题。"></a>解决django1.9(python2)下Xadmin主题不生效问题。</h3><p><a href="https://my.oschina.net/u/2396236/blog/1083251" target="_blank" rel="noopener">https://my.oschina.net/u/2396236/blog/1083251</a></p><ul><li>安装requests</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></table></figure><ul><li>/xadmin/plugins/themes.py 引入requests</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br></pre></td></tr></table></figure><ul><li>修改block_top_navmenu方法：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">def block_top_navmenu(self, context, nodes):</span><br><span class="line"></span><br><span class="line">       themes = [</span><br><span class="line">           &#123;&apos;name&apos;: _(u&quot;Default&quot;), &apos;description&apos;: _(u&quot;Default bootstrap theme&quot;), &apos;css&apos;: self.default_theme&#125;,</span><br><span class="line">           &#123;&apos;name&apos;: _(u&quot;Bootstrap2&quot;), &apos;description&apos;: _(u&quot;Bootstrap 2.x theme&quot;), &apos;css&apos;: self.bootstrap2_theme&#125;,</span><br><span class="line">           ]</span><br><span class="line">       select_css = context.get(&apos;site_theme&apos;, self.default_theme)</span><br><span class="line"></span><br><span class="line">       if self.user_themes:</span><br><span class="line">           themes.extend(self.user_themes)</span><br><span class="line"></span><br><span class="line">       if self.use_bootswatch:</span><br><span class="line">           ex_themes = cache.get(THEME_CACHE_KEY)</span><br><span class="line">           if ex_themes:</span><br><span class="line">               themes.extend(json.loads(ex_themes))</span><br><span class="line">           else:</span><br><span class="line">               ex_themes = []</span><br><span class="line">               try:</span><br><span class="line">                   flag = False#假如为True使用原来的代码，假如为Flase，使用requests库来访问</span><br><span class="line">                   if flag:</span><br><span class="line">                       h = httplib2.Http()</span><br><span class="line">                       resp, content = h.request(&quot;http://bootswatch.com/api/3.json&quot;, &apos;GET&apos;, &apos;&apos;,</span><br><span class="line">                           headers=&#123;&quot;Accept&quot;: &quot;application/json&quot;, &quot;User-Agent&quot;: self.request.META[&apos;HTTP_USER_AGENT&apos;]&#125;)</span><br><span class="line">                       if six.PY3:</span><br><span class="line">                           content = content.decode()</span><br><span class="line">                       watch_themes = json.loads(content)[&apos;themes&apos;]</span><br><span class="line">                   else:</span><br><span class="line">                       content = requests.get(&quot;https://bootswatch.com/api/3.json&quot;)</span><br><span class="line">                       if six.PY3:</span><br><span class="line">                           content = content.text.decode()</span><br><span class="line">                       watch_themes = json.loads(content.text)[&apos;themes&apos;]</span><br><span class="line"></span><br><span class="line">                   ex_themes.extend([</span><br><span class="line">                       &#123;&apos;name&apos;: t[&apos;name&apos;], &apos;description&apos;: t[&apos;description&apos;],</span><br><span class="line">                           &apos;css&apos;: t[&apos;cssMin&apos;], &apos;thumbnail&apos;: t[&apos;thumbnail&apos;]&#125;</span><br><span class="line">                       for t in watch_themes])</span><br><span class="line">               except Exception as e:</span><br><span class="line">                   print(e)</span><br><span class="line"></span><br><span class="line">               cache.set(THEME_CACHE_KEY, json.dumps(ex_themes), 24 * 3600)</span><br><span class="line">               themes.extend(ex_themes)</span><br><span class="line"></span><br><span class="line">       nodes.append(loader.render_to_string(&apos;xadmin/blocks/comm.top.theme.html&apos;, &#123;&apos;themes&apos;: themes, &apos;select_css&apos;: select_css&#125;))</span><br></pre></td></tr></table></figure><h3 id="修改django-admin-和下面的我的公司收起菜单"><a href="#修改django-admin-和下面的我的公司收起菜单" class="headerlink" title="修改django admin 和下面的我的公司收起菜单"></a>修改django admin 和下面的我的公司收起菜单</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># x admin 全局配置参数信息设置</span><br><span class="line">class GlobalSettings(object):</span><br><span class="line">    site_title = &quot;天涯明月笙: 慕课后台管理站&quot;</span><br><span class="line">    site_footer = &quot;mtianyan&apos;s mooc&quot;</span><br><span class="line">    # 收起菜单</span><br><span class="line">    menu_style = &quot;accordion&quot;</span><br><span class="line"># 将头部与脚部信息进行注册:</span><br><span class="line">xadmin.site.register(views.CommAdminView, GlobalSettings)</span><br></pre></td></tr></table></figure><h3 id="apps-py配置app的显示名称"><a href="#apps-py配置app的显示名称" class="headerlink" title="apps.py配置app的显示名称"></a>apps.py配置app的显示名称</h3><p>每个app下执行同样操作:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> django.apps <span class="keyword">import</span> AppConfig</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CoursesConfig</span><span class="params">(AppConfig)</span>:</span></span><br><span class="line">    name = <span class="string">'courses'</span></span><br><span class="line">    verbose_name = <span class="string">u"课程"</span></span><br></pre></td></tr></table></figure><p><strong>注意自行找猫画虎为每个app添加中文名</strong></p><blockquote><p>新建app时并没有引用apps的配置</p></blockquote><p>在app下的init.py中添加:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">default_app_config = <span class="string">"operation.apps.OperationConfig"</span></span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180109/14kIeC7dbA.png?imageslim" alt="mark"></p><p>注意对应关系。</p><p><strong>注意为每个都添加对应的default_app_config</strong></p><p>最终大功告成：</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/KGcFbA85d9.png?imageslim" alt="mark"></p><h3 id="自定义导航菜单顺序"><a href="#自定义导航菜单顺序" class="headerlink" title="自定义导航菜单顺序"></a>自定义导航菜单顺序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">class GlobalSetting(object):</span><br><span class="line">     def get_site_menu(self):</span><br><span class="line">        return (</span><br><span class="line">            &#123;&apos;title&apos;: &apos;课程管理&apos;, &apos;menus&apos;: (</span><br><span class="line">                &#123;&apos;title&apos;: &apos;课程信息&apos;, &apos;url&apos;: self.get_model_url(Course, &apos;changelist&apos;)&#125;,</span><br><span class="line">                &#123;&apos;title&apos;: &apos;章节信息&apos;, &apos;url&apos;: self.get_model_url(Lesson, &apos;changelist&apos;)&#125;,</span><br><span class="line">                &#123;&apos;title&apos;: &apos;视频信息&apos;, &apos;url&apos;: self.get_model_url(Video, &apos;changelist&apos;)&#125;,</span><br><span class="line">                &#123;&apos;title&apos;: &apos;课程资源&apos;, &apos;url&apos;: self.get_model_url(CourseResource, &apos;changelist&apos;)&#125;,</span><br><span class="line">                &#123;&apos;title&apos;: &apos;课程评论&apos;, &apos;url&apos;: self.get_model_url(CourseComments, &apos;changelist&apos;)&#125;,</span><br><span class="line">            )&#125;,</span><br><span class="line">            &#123;&apos;title&apos;: &apos;机构管理&apos;, &apos;menus&apos;: (</span><br><span class="line">                &#123;&apos;title&apos;: &apos;所在城市&apos;, &apos;url&apos;: self.get_model_url(CityDict, &apos;changelist&apos;)&#125;,</span><br><span class="line">                &#123;&apos;title&apos;: &apos;机构讲师&apos;, &apos;url&apos;: self.get_model_url(Teacher, &apos;changelist&apos;)&#125;,</span><br><span class="line">                &#123;&apos;title&apos;: &apos;机构信息&apos;, &apos;url&apos;: self.get_model_url(CourseOrg, &apos;changelist&apos;)&#125;,</span><br><span class="line">            )&#125;,</span><br><span class="line">            &#123;&apos;title&apos;: &apos;用户管理&apos;, &apos;menus&apos;: (</span><br><span class="line">                &#123;&apos;title&apos;: &apos;用户信息&apos;, &apos;url&apos;: self.get_model_url(UserProfile, &apos;changelist&apos;)&#125;,</span><br><span class="line">                &#123;&apos;title&apos;: &apos;用户验证&apos;, &apos;url&apos;: self.get_model_url(EmailVerifyRecord, &apos;changelist&apos;)&#125;,</span><br><span class="line">                &#123;&apos;title&apos;: &apos;用户课程&apos;, &apos;url&apos;: self.get_model_url(UserCourse, &apos;changelist&apos;)&#125;,</span><br><span class="line">                &#123;&apos;title&apos;: &apos;用户收藏&apos;, &apos;url&apos;: self.get_model_url(UserFavorite, &apos;changelist&apos;)&#125;,</span><br><span class="line">                &#123;&apos;title&apos;: &apos;用户消息&apos;, &apos;url&apos;: self.get_model_url(UserMessage, &apos;changelist&apos;)&#125;,</span><br><span class="line">            )&#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#123;&apos;title&apos;: &apos;系统管理&apos;, &apos;menus&apos;: (</span><br><span class="line">                &#123;&apos;title&apos;: &apos;用户咨询&apos;, &apos;url&apos;: self.get_model_url(UserAsk, &apos;changelist&apos;)&#125;,</span><br><span class="line">                &#123;&apos;title&apos;: &apos;首页轮播&apos;, &apos;url&apos;: self.get_model_url(Banner, &apos;changelist&apos;)&#125;,</span><br><span class="line">                &#123;&apos;title&apos;: &apos;用户分组&apos;, &apos;url&apos;: self.get_model_url(Group, &apos;changelist&apos;)&#125;,</span><br><span class="line">                &#123;&apos;title&apos;: &apos;用户权限&apos;, &apos;url&apos;: self.get_model_url(Permission, &apos;changelist&apos;)&#125;,</span><br><span class="line">                &#123;&apos;title&apos;: &apos;日志记录&apos;, &apos;url&apos;: self.get_model_url(Log, &apos;changelist&apos;)&#125;,</span><br><span class="line">            )&#125;,</span><br><span class="line"></span><br><span class="line">xadmin.site.register(views.CommAdminView, GlobalSetting)</span><br></pre></td></tr></table></figure><p>最终成型菜单:</p><p><img src="http://myphoto.mtianyan.cn/blog/180110/314L2DdfGB.png?imageslim" alt="mark"></p><h3 id="日志记录的使用"><a href="#日志记录的使用" class="headerlink" title="日志记录的使用"></a>日志记录的使用</h3><blockquote><p>日志记录会记录下我们进行过什么操作。</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180110/34EdEDHgac.png?imageslim" alt="mark"></p><p>通过点击动作，进入当时修改的某条信息</p><p>第五章完结对应commit:</p><blockquote><p>5-5 (第五章完结),配置了页头页脚信息，修改了菜单的顺序，配置apps中文名，修复Python2下，xadmin主题不生效问题。 完结撒花。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;总之，我们要拿来。我们要或使用，或存放，或毁灭。 - 鲁迅 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;note &quot;&gt;&lt;p&gt; 既然有django提供的强大admin,我们便要拿来用喽。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用xadmin，通过adminx,将已有model注册进后台。快速搭建可用的后台系统。&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Django+Xadmin打造在线教育平台" scheme="http://blog.mtianyan.cn/categories/Django-Xadmin%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E5%B9%B3%E5%8F%B0/"/>
    
    
      <category term="Python" scheme="http://blog.mtianyan.cn/tags/Python/"/>
    
      <category term="Django" scheme="http://blog.mtianyan.cn/tags/Django/"/>
    
      <category term="在线教育平台" scheme="http://blog.mtianyan.cn/tags/%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E5%B9%B3%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>强力Django+杀手级Xadmin打造在线教育平台(四)</title>
    <link href="http://blog.mtianyan.cn/post/56d4b4c2.html"/>
    <id>http://blog.mtianyan.cn/post/56d4b4c2.html</id>
    <published>2018-01-09T14:09:17.000Z</published>
    <updated>2018-02-02T12:40:13.960Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>数据基础决定上层建筑 </p></blockquote><div class="note warning"><p> 设计数据库是整个项目的第一项工作:</p><ul><li>完成django的app设计 &amp; 完成app中的models设计</li></ul><p>Django1.9.8对应github: <a href="https://github.com/mtianyan/Mxonline2" target="_blank" rel="noopener">https://github.com/mtianyan/Mxonline2</a><br>Django2.0.1对应github: <a href="https://github.com/mtianyan/Mxonline3" target="_blank" rel="noopener">https://github.com/mtianyan/Mxonline3</a></p></div><a id="more"></a><h2 id="4-1-使用py3-6和django1-11开发系统前注意事项"><a href="#4-1-使用py3-6和django1-11开发系统前注意事项" class="headerlink" title="4-1 使用py3.6和django1.11开发系统前注意事项"></a>4-1 使用py3.6和django1.11开发系统前注意事项</h2><p>直接通过Python3.6和django最新版本来开发我们的系统的一些注意事项。</p><blockquote><p>原版本: Python 2.7 &amp; django 1.9.8<br>现在版本：Python 3.6 &amp; django 1.11</p></blockquote><p>我个人使用: 3.5 + django2.0.1 &amp; 2.7 + django 1.9.8</p><p>直接从3.6上手，开始工作，而不用做完2.7再转换。</p><blockquote><p>代码几乎100%兼容2.7 &amp; 3.6</p></blockquote><h3 id="虚拟环境问题"><a href="#虚拟环境问题" class="headerlink" title="虚拟环境问题"></a>虚拟环境问题</h3><blockquote><p>Python2.7 与 Python3.x共存并创建虚拟环境。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv -p C:\...\python.exe mxonline</span><br></pre></td></tr></table></figure><h3 id="设计model的时候的-unicode-方法"><a href="#设计model的时候的-unicode-方法" class="headerlink" title="设计model的时候的__unicode__方法"></a>设计model的时候的<code>__unicode__</code>方法</h3><p>Python2.7 中:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__unicode__</span>:</span></span><br><span class="line"><span class="keyword">return</span> self.name</span><br></pre></td></tr></table></figure><p>Python 3.x中:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="keyword">return</span> self.name</span><br></pre></td></tr></table></figure></p><blockquote><p>3.x下重载Unicode不会报错，但是会在后台显示有问题。</p></blockquote><h3 id="安装Python的mysql驱动时不能用之前的-MYSQL-python"><a href="#安装Python的mysql驱动时不能用之前的-MYSQL-python" class="headerlink" title="安装Python的mysql驱动时不能用之前的 MYSQL python"></a>安装Python的mysql驱动时不能用之前的 MYSQL python</h3><blockquote><p>这个网址是windows下python包安装的居家必备良品，建议收藏。</p></blockquote><p><a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#mysql-python" target="_blank" rel="noopener">https://www.lfd.uci.edu/~gohlke/pythonlibs/#mysql-python</a></p><p>应该改用<code>Mysqlclient</code>来替换我们的<code>MySQl-python</code></p><blockquote><p>接口是一样的。所以以后建议直接用Mysqlclient，因为它2, 3版本都有。</p></blockquote><h3 id="通过源码方式安装xadmin时。"><a href="#通过源码方式安装xadmin时。" class="headerlink" title="通过源码方式安装xadmin时。"></a>通过源码方式安装xadmin时。</h3><blockquote><p>Github 搜索 <code>mxonline_resources</code>，将里面的Xadmin放进extras_apps中。<br>就不用官方的了。</p></blockquote><p>django 2.0.1 的修复bug版可以使用我的:</p><p><a href="https://github.com/mtianyan/xadmin_django2.0.1" target="_blank" rel="noopener">https://github.com/mtianyan/xadmin_django2.0.1</a></p><blockquote><p>也可以直接使用官方的新版，已经支持了Python3.6</p></blockquote><p>Xadmin安装一定要安装依赖包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">django-crispy-forms=1.6.0</span><br><span class="line">django-import-export&gt;=0.5.1</span><br><span class="line">django-reversion~=2.0.0</span><br><span class="line">django-formtools</span><br><span class="line">future==0.15.2</span><br><span class="line">httplib2==0.9.2</span><br><span class="line">six==1.10.0</span><br></pre></td></tr></table></figure><h3 id="使用DjangoUeditor"><a href="#使用DjangoUeditor" class="headerlink" title="使用DjangoUeditor"></a>使用DjangoUeditor</h3><p>官方的不支持Python3, 去<code>mxonline_resource</code>目录下载兼容Python3的版本。<br>放入<code>extras_apps</code></p><h2 id="4-2-django-app-设计"><a href="#4-2-django-app-设计" class="headerlink" title="4-2 django-app 设计"></a>4-2 django-app 设计</h2><blockquote><p>数据库设计</p></blockquote><h3 id="根据app设计-models"><a href="#根据app设计-models" class="headerlink" title="根据app设计 models"></a>根据app设计 models</h3><h3 id="数据表生成与修改"><a href="#数据表生成与修改" class="headerlink" title="数据表生成与修改"></a>数据表生成与修改</h3><p>授课机构提供讲师录制课程，学员完成在线学习。</p><ul><li>全局头部：用户消息 &amp; 个人中心: 没有登录时，就是登录注册</li><li>对于公开课，授课讲师，授课机构进行搜索。</li><li>轮播图，课程，机构，页脚</li><li>公开课：分页公开课，右边热门推荐。</li><li>点进课程：课程详情页。详情: 后台富文本。右边是课程机构的介绍。收藏 或学习</li><li>章节信息 &amp; 课程资源下载 &amp; 评论</li><li>授课讲师: 授课讲师列表页,  讲师排行榜。分页。</li><li>点进讲师: 看到课程。</li><li>授课机构: 类别筛选，机构性质，所在地区 &amp; 排序。用户提交表单，我要学习, 机构排名.</li><li>个人中心: 修改密码, 修改头像, 个人信息, 我的课程, 我的收藏, 我的消息。</li></ul><p>app大致会有<code>用户模块</code>,<code>课程模块</code>,<code>授课教师</code>与<code>授课机构</code>。</p><p><img src="http://myphoto.mtianyan.cn/blog/180108/DB9D66LmaJ.png?imageslim" alt="mark"></p><p>多一个operation app 是因为数据库的需要。后面会讲。</p><h2 id="4-3-新建项目"><a href="#4-3-新建项目" class="headerlink" title="4-3 新建项目"></a>4-3 新建项目</h2><h3 id="Python2-7-创建虚拟环境。"><a href="#Python2-7-创建虚拟环境。" class="headerlink" title="Python2.7 创建虚拟环境。"></a>Python2.7 创建虚拟环境。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv mxonline2</span><br></pre></td></tr></table></figure><p>安装django</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django==1.9.8</span><br></pre></td></tr></table></figure><blockquote><p>注意Python2下此处必须用1.9.8</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180108/JJamFecfhC.png?imageslim" alt="mark"></p><h3 id="Python3-x-创建虚拟环境"><a href="#Python3-x-创建虚拟环境" class="headerlink" title="Python3.x 创建虚拟环境"></a>Python3.x 创建虚拟环境</h3><p>如果你已经通过我的博文《Python开发环境搭建指南(Anaconda2,3共存)》<br>搭建了完美的共存环境使用下面命令创建虚拟环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv -p D:\softEnvDown\Anaconda2\envs\py3\python.exe mxonline3</span><br></pre></td></tr></table></figure><blockquote><p>-p后面路径为自己的Python3的exe文件路径。</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180108/i6lKIGdE93.png?imageslim" alt="mark"></p><blockquote><p>官方说明的最新稳定版为2.0.1(2018-01-08 19:37:06)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">workon mxonline3</span><br><span class="line">pip install django==2.0.1</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180108/I1fF3aL00H.png?imageslim" alt="mark"></p><p>至此我们的两个虚拟环境都已经准备好了。</p><h3 id="新建Python2-下Project"><a href="#新建Python2-下Project" class="headerlink" title="新建Python2 下Project"></a>新建Python2 下Project</h3><p>为Mxonline2 配置环境 <code>mxonline2</code></p><p><img src="http://myphoto.mtianyan.cn/blog/180108/3Ic2ehmkGK.png?imageslim" alt="mark"></p><p>注意一直定位到Python.exe。</p><h4 id="安装mysql驱动。"><a href="#安装mysql驱动。" class="headerlink" title="安装mysql驱动。"></a>安装mysql驱动。</h4><p>下载<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#mysql-python中" target="_blank" rel="noopener">https://www.lfd.uci.edu/~gohlke/pythonlibs/#mysql-python中</a><br>mysqlclient‑1.3.12‑cp34‑cp34m‑win_amd64.whl进行本地安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">workon mxonline2</span><br><span class="line">pip install mysqlclient-1.3.12-cp27-cp27m-win_amd64.whl</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180108/8dK5e5clJB.png?imageslim" alt="mark"></p><h3 id="新建Python3-下Project"><a href="#新建Python3-下Project" class="headerlink" title="新建Python3 下Project"></a>新建Python3 下Project</h3><p>为Mxonline3 配置环境 <code>mxonline3</code></p><p><img src="http://myphoto.mtianyan.cn/blog/180108/383ceKe92C.png?imageslim" alt="mark"></p><blockquote><p>注意一直定位到Python.exe。</p></blockquote><h4 id="安装mysql驱动。-1"><a href="#安装mysql驱动。-1" class="headerlink" title="安装mysql驱动。"></a>安装mysql驱动。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">workon mxonline3</span><br><span class="line">pip install mysqlclient</span><br></pre></td></tr></table></figure><h3 id="setting中配置"><a href="#setting中配置" class="headerlink" title="setting中配置"></a>setting中配置</h3><p>Mxonline2/settings.py:<br>Mxonline3/settings.py:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    &apos;default&apos;: &#123;</span><br><span class="line">        &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;,</span><br><span class="line">        &apos;NAME&apos;: &apos;mxonline2&apos;,</span><br><span class="line">        &apos;USER&apos;: &apos;root&apos;,</span><br><span class="line">        &apos;PASSWORD&apos;: &apos;你的密码&apos;,</span><br><span class="line">        &apos;HOST&apos;:&apos;127.0.0.1&apos;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    &apos;default&apos;: &#123;</span><br><span class="line">        &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;,</span><br><span class="line">        &apos;NAME&apos;: &apos;mxonline3&apos;,</span><br><span class="line">        &apos;USER&apos;: &apos;root&apos;,</span><br><span class="line">        &apos;PASSWORD&apos;: &apos;你的密码&apos;,</span><br><span class="line">        &apos;HOST&apos;:&apos;127.0.0.1&apos;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="前往Navicat新建数据库"><a href="#前往Navicat新建数据库" class="headerlink" title="前往Navicat新建数据库"></a>前往Navicat新建数据库</h3><p>mxonline2 &amp; mxonline3</p><h4 id="进行数据库初始化makemigrations"><a href="#进行数据库初始化makemigrations" class="headerlink" title="进行数据库初始化makemigrations"></a>进行数据库初始化makemigrations</h4><p>点击<code>Tools 菜单下 Run manage.py Task</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">makemigrations</span><br><span class="line">migrate</span><br></pre></td></tr></table></figure><blockquote><p>2,3操作一致</p></blockquote><p>点击 RUn edit</p><p><img src="http://myphoto.mtianyan.cn/blog/180108/al0KDCbiK6.png?imageslim" alt="mark"></p><p>可以为2,3配置不同的port。比如2: 8002 &amp; 3: 8003</p><p>2: 点击run运行: django1.9.8成功画面如下。</p><p><img src="http://myphoto.mtianyan.cn/blog/180108/628mmAGLID.png?imageslim" alt="mark"></p><p>3: 点击run运行: django2.0.1成功画面如下。</p><p><img src="http://myphoto.mtianyan.cn/blog/180108/GeEcJgAbEA.png?imageslim" alt="mark"></p><p>这时我们的项目就新建成功。</p><p>此处对应commit:</p><blockquote><p>项目初始化成功: 完成数据库Migration初始化。 对应4-3</p></blockquote><h2 id="4-4-自定义userprofile"><a href="#4-4-自定义userprofile" class="headerlink" title="4-4 自定义userprofile"></a>4-4 自定义userprofile</h2><p>点击<code>Tools 菜单下 Run manage.py Task</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startapp users</span><br></pre></td></tr></table></figure><h3 id="编写我们的model设计user表。"><a href="#编写我们的model设计user表。" class="headerlink" title="编写我们的model设计user表。"></a>编写我们的model设计user表。</h3><p>系统自动生成的user表如下:</p><p><img src="http://myphoto.mtianyan.cn/blog/180108/H6jBl0IKjb.png?imageslim" alt="mark"></p><ul><li>id: 主键, password 密码, last_login Django自动记录用户最后登录时间,。</li><li>is_superuser 表明用户是否是超级用户(后台管理会用到)。</li><li>username 用户名字段不要随便改动, email 邮箱, </li><li>is_staff 表示是否是员工(后台管理会用到)。</li><li>is_active 用户是否是激活状态, date_joined 注册时间。</li></ul><blockquote><p>我们需要扩展我们自己的需求字段。</p></blockquote><p>个人中心页面中:</p><p><img src="http://myphoto.mtianyan.cn/blog/180108/mghmfD45hJ.png?imageslim" alt="mark"></p><p>可以看到我们还需要的有：</p><ul><li>昵称: nickname</li><li>生日: birthday</li><li>性别: gender</li></ul><p>User表的自定义方法可以查看django官方文档。<br>我们既想保留原有字段，又想有新字段。</p><p>users/models.py(3把Unicode改为str)添加代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> AbstractUser</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserProfile</span><span class="params">(AbstractUser)</span>:</span></span><br><span class="line">    <span class="comment"># 自定义的性别选择规则</span></span><br><span class="line">    GENDER_CHOICES = (</span><br><span class="line">        (<span class="string">"male"</span>, <span class="string">u"男"</span>),</span><br><span class="line">        (<span class="string">"female"</span>, <span class="string">u"女"</span>)</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 昵称</span></span><br><span class="line">    nick_name = models.CharField(max_length=<span class="number">50</span>, verbose_name=<span class="string">u"昵称"</span>, default=<span class="string">""</span>)</span><br><span class="line">    <span class="comment"># 生日，可以为空</span></span><br><span class="line">    birthday = models.DateField(verbose_name=<span class="string">u"生日"</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>)</span><br><span class="line">    <span class="comment"># 性别 只能男或女，默认女</span></span><br><span class="line">    gender = models.CharField(</span><br><span class="line">        max_length=<span class="number">5</span>,</span><br><span class="line">        verbose_name=<span class="string">u"性别"</span>,</span><br><span class="line">        choices=GENDER_CHOICES,</span><br><span class="line">        default=<span class="string">"female"</span>)</span><br><span class="line">    <span class="comment"># 地址</span></span><br><span class="line">    address = models.CharField(max_length=<span class="number">100</span>, verbose_name=<span class="string">"地址"</span>, default=<span class="string">""</span>)</span><br><span class="line">    <span class="comment"># 电话</span></span><br><span class="line">    mobile = models.CharField(max_length=<span class="number">11</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>)</span><br><span class="line">    <span class="comment"># 头像 默认使用default.png</span></span><br><span class="line">    image = models.ImageField(</span><br><span class="line">        upload_to=<span class="string">"image/%Y/%m"</span>,</span><br><span class="line">        default=<span class="string">u"image/default.png"</span>,</span><br><span class="line">        max_length=<span class="number">100</span></span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># meta信息，即后台栏目名</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">"用户信息"</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重载Unicode方法，打印实例会打印username，username为继承自abstractuser</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__unicode__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.username</span><br></pre></td></tr></table></figure><p>点进<code>AbstractUser</code>可以看到这个models里面就有我们默认表的那些字段。</p><p>因为Image字段需要用到<code>pillow</code>所以需要安装该库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pillow</span><br></pre></td></tr></table></figure><p><strong>注意：CharField必须有max_length, Imagefield实际也是charfield所以也要有max_length</strong></p><h4 id="setting设置INSTALLED-APPS-amp-AUTH-USER-MODEL。"><a href="#setting设置INSTALLED-APPS-amp-AUTH-USER-MODEL。" class="headerlink" title="setting设置INSTALLED_APPS &amp; AUTH_USER_MODEL。"></a>setting设置INSTALLED_APPS &amp; AUTH_USER_MODEL。</h4><ul><li>INSTALLED_APPS注册app</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;users&apos;</span><br></pre></td></tr></table></figure><ul><li>重载AUTH_USER_MODEL</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 此处重载是为了使我们的UserProfile生效</span><br><span class="line">AUTH_USER_MODEL = &quot;users.UserProfile&quot;</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180108/JDik7FIb8k.png?imageslim" alt="mark"></p><p>点击<code>Tools 菜单下 Run manage.py Task</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">makemigrations users</span><br><span class="line">migrate users</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180108/ijGBh98JL6.png?imageslim" alt="mark"></p><blockquote><p>上图中可以看到数据库做出的改动。输入: yes</p></blockquote><h3 id="进入Navicat进行验证"><a href="#进入Navicat进行验证" class="headerlink" title="进入Navicat进行验证"></a>进入Navicat进行验证</h3><p><img src="http://myphoto.mtianyan.cn/blog/180108/79bbD88gJD.png?imageslim" alt="mark"></p><p>如上图可以看到我们的表已经生成成功。</p><h3 id="附加Python3下不同与报错："><a href="#附加Python3下不同与报错：" class="headerlink" title="附加Python3下不同与报错："></a>附加Python3下不同与报错：</h3><p>将Unicode方法改为str方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 重载__str__方法，打印实例会打印username，username为继承自AbstractUser</span><br><span class="line">def __str__(self):</span><br><span class="line">    return self.username</span><br></pre></td></tr></table></figure></p><p>报错: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">django.db.migrations.exceptions.InconsistentMigrationHistory: Migration</span><br><span class="line">admin.0001_initial is applied before its dependency users.0001_initial on</span><br><span class="line">database &apos;default&apos;</span><br></pre></td></tr></table></figure><p>解决方案:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">删除数据库中 除了auth_user的其他表</span><br></pre></td></tr></table></figure><p>然后执行命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">makemigrations</span><br><span class="line">migrate</span><br><span class="line">makemigrations users</span><br><span class="line">migrate users</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180108/gBLe65jc53.png?imageslim" alt="mark"></p><blockquote><p>共11张表，同期django1.9.8会产生13张表</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180108/C3h6f7d4J5.png?imageslim" alt="mark"></p><blockquote><p>我推测是因为在django2.0版本中。我们如果自定义了userProfile并且在setting中进行了设置。那么auth_user将不再拥有多的表。</p></blockquote><p>下次不要再初始化时执行makemigrations &amp; migrate。当我们设计userProfile完成之后再执行。</p><p>本小节完成对应commit:</p><blockquote><p>完成USerProfile models书写。makemigrations &amp; migrate 建表成功。对应4-4</p></blockquote><h2 id="4-5-user-modesl-py设计"><a href="#4-5-user-modesl-py设计" class="headerlink" title="4-5 user modesl.py设计"></a>4-5 user modesl.py设计</h2><p>循环引用:</p><blockquote><p>设计app时每个app都有model</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180109/LedJLC8e34.png?imageslim" alt="mark"></p><p>如图：我们在user中定义usercourse记录用户学习的课程。会有两个外键：user和course。<br>我们就会<code>import Courses.models</code></p><p>如果用户对课程的评论：会放在 <code>Courses.models</code>当中。评论我们需要保存相应的用户。<br>我们就会<code>import User.models</code></p><p>循环import会出错。a与b相互调用，造成等待。</p><h3 id="解决循环引用-分层设计"><a href="#解决循环引用-分层设计" class="headerlink" title="解决循环引用: 分层设计"></a>解决循环引用: 分层设计</h3><p>目前已有app：users courses organization</p><p>另外一个app高于这些app的层级。<code>operation</code>.上一层app可以import下层的app。</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/kmDB89IcFF.png?imageslim" alt="mark"></p><p>上节中: 自定义<code>userprofile</code> 覆盖默认<code>user</code>表</p><p>user中还需要添加的(前提是这些功能比较独立):</p><ul><li>EmailVerifyRecord - 邮箱验证码</li><li>PageBanner - 轮播图</li></ul><p>观察轮播图:</p><blockquote><ol><li>图片 2. 点击图片地址 3. 轮播图序号(控制前后)</li></ol></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180109/fg4J5a2Kb5.png?imageslim" alt="mark"></p><p>users/models.py中添加代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 邮箱验证码model</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmailVerifyRecord</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    SEND_CHOICES = (</span><br><span class="line">        (<span class="string">"register"</span>, <span class="string">u"注册"</span>),</span><br><span class="line">        (<span class="string">"forget"</span>, <span class="string">u"找回密码"</span>)</span><br><span class="line">    )</span><br><span class="line">    code = models.CharField(max_length=<span class="number">20</span>, verbose_name=<span class="string">u"验证码"</span>)</span><br><span class="line">    <span class="comment"># 未设置null = true blank = true 默认不可为空</span></span><br><span class="line">    email = models.EmailField(max_length=<span class="number">50</span>, verbose_name=<span class="string">u"邮箱"</span>)</span><br><span class="line">    send_type = models.CharField(choices=SEND_CHOICES, max_length=<span class="number">10</span>)</span><br><span class="line">    <span class="comment"># 这里的now得去掉(),不去掉会根据编译时间。而不是根据实例化时间。</span></span><br><span class="line">    send_time = models.DateTimeField(default=datetime.now)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">"邮箱验证码"</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 轮播图model</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Banner</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">100</span>, verbose_name=<span class="string">u"标题"</span>)</span><br><span class="line">    image = models.ImageField(</span><br><span class="line">        upload_to=<span class="string">"banner/%Y/%m"</span>,</span><br><span class="line">        verbose_name=<span class="string">u"轮播图"</span>,</span><br><span class="line">        max_length=<span class="number">100</span>)</span><br><span class="line">    url = models.URLField(max_length=<span class="number">200</span>, verbose_name=<span class="string">u"访问地址"</span>)</span><br><span class="line">    <span class="comment"># 默认index很大靠后。想要靠前修改index值。</span></span><br><span class="line">    index = models.IntegerField(default=<span class="number">100</span>, verbose_name=<span class="string">u"顺序"</span>)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">u"添加时间"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">u"轮播图"</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br></pre></td></tr></table></figure><p>从上往下: 第一块区域import官方包，第二块import第三方。(PEP8)</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/8cmDm7ADf8.png?imageslim" alt="mark"></p><p>如下图: 我们一共创建了三个数据表: Structure可以查看到</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/7ABfdDCf7C.png?imageslim" alt="mark"></p><blockquote><p>与用户相关的评论啊，点赞啊。学习的课程啊并没有放进来，因为那些独立性不高。<br>容易产生循环引用。我们把那些放到operation中。</p></blockquote><p>本小节完成，对应commit:</p><blockquote><p>Usermodel添加邮箱验证码，首页轮播图。对应4-5</p></blockquote><h2 id="4-6-course-models-py编写"><a href="#4-6-course-models-py编写" class="headerlink" title="4-6 course models.py编写"></a>4-6 course models.py编写</h2><p>点击 <code>Tools 菜单下 Run manage.py Task</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startapp courses</span><br></pre></td></tr></table></figure><p>course中需要那些表:</p><ul><li>课程本身需要一张表</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180109/c9eBEHb0mL.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180109/75hlgK7481.png?imageslim" alt="mark"></p><ul><li><p>点进去之后点击开始学习。</p></li><li><p>课程基本信息需要一张表, 章节表与课程表存在(一个课程对应多个章节)</p></li><li>章节表中：章节的名称。 章节与视频(一个章节对应多个视频)</li></ul><p>结构: 课程本身–(一对多)&gt;章节-(一对多)-&gt;视频信息</p><p>资源下载放在课程里面的。一个课程对应多个资源</p><p>共四张表：课程本身–(一对多)&gt;章节-(一对多)-&gt;视频信息 &amp; 资源表</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/Kec5994359.png?imageslim" alt="mark"></p><p>courses/models.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 课程信息表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Course</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    DEGREE_CHOICES = (</span><br><span class="line">        (<span class="string">"cj"</span>, <span class="string">u"初级"</span>),</span><br><span class="line">        (<span class="string">"zj"</span>, <span class="string">u"中级"</span>),</span><br><span class="line">        (<span class="string">"gj"</span>, <span class="string">u"高级"</span>)</span><br><span class="line">    )</span><br><span class="line">    name = models.CharField(max_length=<span class="number">50</span>, verbose_name=<span class="string">u"课程名"</span>)</span><br><span class="line">    desc = models.CharField(max_length=<span class="number">300</span>, verbose_name=<span class="string">u"课程描述"</span>)</span><br><span class="line">    <span class="comment"># TextField允许我们不输入长度。可以输入到无限大。暂时定义为TextFiled，之后更新为富文本</span></span><br><span class="line">    detail = models.TextField(verbose_name=<span class="string">u"课程详情"</span>)</span><br><span class="line">    degree = models.CharField(choices=DEGREE_CHOICES, max_length=<span class="number">2</span>)</span><br><span class="line">    <span class="comment"># 使用分钟做后台记录(存储最小单位)前台转换</span></span><br><span class="line">    learn_times = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">u"学习时长(分钟数)"</span>)</span><br><span class="line">    <span class="comment"># 保存学习人数:点击开始学习才算</span></span><br><span class="line">    students = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">u"学习人数"</span>)</span><br><span class="line">    fav_nums = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">u"收藏人数"</span>)</span><br><span class="line">    image = models.ImageField(</span><br><span class="line">        upload_to=<span class="string">"courses/%Y/%m"</span>,</span><br><span class="line">        verbose_name=<span class="string">u"封面图"</span>,</span><br><span class="line">        max_length=<span class="number">100</span>)</span><br><span class="line">    <span class="comment"># 保存点击量，点进页面就算</span></span><br><span class="line">    click_nums = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">u"点击数"</span>)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">u"添加时间"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">u"课程"</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br></pre></td></tr></table></figure><p>下面来编写章节 &amp; 视频 &amp; 课程资源:<code>courses/models.py</code></p><p>一对多, 多对一都可以使用django的外键来完成。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 章节</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lesson</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># 因为一个课程对应很多章节。所以在章节表中将课程设置为外键。</span></span><br><span class="line">    <span class="comment"># 作为一个字段来让我们可以知道这个章节对应那个课程</span></span><br><span class="line">    course = models.ForeignKey(Course, verbose_name=<span class="string">u"课程"</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">100</span>, verbose_name=<span class="string">u"章节名"</span>)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">u"添加时间"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">u"章节"</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 每章视频</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Video</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># 因为一个章节对应很多视频。所以在视频表中将章节设置为外键。</span></span><br><span class="line">    <span class="comment"># 作为一个字段来存储让我们可以知道这个视频对应哪个章节.</span></span><br><span class="line">    lesson = models.ForeignKey(Lesson, verbose_name=<span class="string">u"章节"</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">100</span>, verbose_name=<span class="string">u"视频名"</span>)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">u"添加时间"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">u"视频"</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 课程资源</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CourseResource</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># 因为一个课程对应很多资源。所以在课程资源表中将课程设置为外键。</span></span><br><span class="line">    <span class="comment"># 作为一个字段来让我们可以知道这个资源对应那个课程</span></span><br><span class="line">    course = models.ForeignKey(Course, verbose_name=<span class="string">u"课程"</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">100</span>, verbose_name=<span class="string">u"名称"</span>)</span><br><span class="line">    <span class="comment"># 这里定义成文件类型的field，后台管理系统中会直接有上传的按钮。</span></span><br><span class="line">    <span class="comment"># FileField也是一个字符串类型，要指定最大长度。</span></span><br><span class="line">    download = models.FileField(</span><br><span class="line">        upload_to=<span class="string">"course/resource/%Y/%m"</span>,</span><br><span class="line">        verbose_name=<span class="string">u"资源文件"</span>,</span><br><span class="line">        max_length=<span class="number">100</span>)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">u"添加时间"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">u"课程资源"</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br></pre></td></tr></table></figure><p>通过Structure可以看到我们刚才设计的四张表</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/e3081f8bJh.png?imageslim" alt="mark"></p><p>本小节完毕, 对应commit:</p><blockquote><p>设计完成课程app中四张数据表: 课程，章节，视频，资源。对应4-6</p></blockquote><h2 id="4-7-organization-modesl-py设计"><a href="#4-7-organization-modesl-py设计" class="headerlink" title="4-7 organization modesl.py设计"></a>4-7 organization modesl.py设计</h2><p>新建课程机构app:</p><p>点击<code>Tools 菜单下 Run manage.py Task</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startapp organization</span><br></pre></td></tr></table></figure><p>课程是属于机构的, 机构有机构类别，城市等字段。讲师实体。<br>我要学习的提交表单会与用户关联，存放在机构。</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/K1faIbEA3A.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180109/1L2lebKCl0.png?imageslim" alt="mark"></p><p>其中课程数，学习人数可以动态统计。机构地址，机构经典课程。</p><blockquote><p>机构讲师，机构课程可以通过外键获取到, 不保存到机构中。</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180109/DlgdiG6K16.png?imageslim" alt="mark"></p><blockquote><p>讲师大概所需要的字段如图所示。</p></blockquote><p>organization/models.py 代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding : utf-8</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 城市字典</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CityDict</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">20</span>, verbose_name=<span class="string">u"城市"</span>)</span><br><span class="line">    <span class="comment"># 城市描述：备用不一定展示出来</span></span><br><span class="line">    desc = models.CharField(max_length=<span class="number">200</span>, verbose_name=<span class="string">u"描述"</span>)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">u"添加时间"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">u"城市"</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 课程机构</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CourseOrg</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">50</span>, verbose_name=<span class="string">u"机构名称"</span>)</span><br><span class="line">    <span class="comment"># 机构描述，后面会替换为富文本展示</span></span><br><span class="line">    desc = models.TextField(verbose_name=<span class="string">u"机构描述"</span>)</span><br><span class="line">    click_nums = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">u"点击数"</span>)</span><br><span class="line">    fav_nums = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">u"收藏数"</span>)</span><br><span class="line">    image = models.ImageField(</span><br><span class="line">        upload_to=<span class="string">"org/%Y/%m"</span>,</span><br><span class="line">        verbose_name=<span class="string">u"封面图"</span>,</span><br><span class="line">        max_length=<span class="number">100</span>)</span><br><span class="line">    address = models.CharField(max_length=<span class="number">150</span>, verbose_name=<span class="string">u"机构地址"</span>)</span><br><span class="line">    <span class="comment"># 一个城市可以有很多课程机构，通过将city设置外键，变成课程机构的一个字段</span></span><br><span class="line">    <span class="comment"># 可以让我们通过机构找到城市</span></span><br><span class="line">    city = models.ForeignKey(CityDict, verbose_name=<span class="string">u"所在城市"</span>)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">u"添加时间"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">u"课程机构"</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 讲师</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># 一个机构会有很多老师，所以我们在讲师表添加外键并把课程机构名称保存下来</span></span><br><span class="line">    <span class="comment"># 可以使我们通过讲师找到对应的机构</span></span><br><span class="line">    org = models.ForeignKey(CourseOrg, verbose_name=<span class="string">u"所属机构"</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">50</span>, verbose_name=<span class="string">u"教师名称"</span>)</span><br><span class="line">    work_years = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">u"工作年限"</span>)</span><br><span class="line">    work_company = models.CharField(max_length=<span class="number">50</span>, verbose_name=<span class="string">u"就职公司"</span>)</span><br><span class="line">    work_position = models.CharField(max_length=<span class="number">50</span>, verbose_name=<span class="string">u"公司职位"</span>)</span><br><span class="line">    points = models.CharField(max_length=<span class="number">50</span>, verbose_name=<span class="string">u"教学特点"</span>)</span><br><span class="line">    click_nums = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">u"点击数"</span>)</span><br><span class="line">    fav_nums = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">u"收藏数"</span>)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">u"添加时间"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">u"教师"</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180109/fi284KlfDk.png?imageslim" alt="mark"></p><blockquote><p>可以看到我们一共创建了三张表：分别是城市，课程机构，讲师。</p></blockquote><p>本小节对应commit:</p><blockquote><p>课程机构app：城市，机构，讲师表书写完毕。对应4-7</p></blockquote><h2 id="4-8-operation-models-py设计"><a href="#4-8-operation-models-py设计" class="headerlink" title="4-8 operation models.py设计"></a>4-8 operation models.py设计</h2><p>分析需要那些表:</p><ul><li>用户可以提交我要学习的个人需求。</li><li>学员的课程评论信息</li><li>收藏：可以收藏公开课, 授课讲师, 授课机构, 用户消息提醒。</li><li>个人中心：我的课程说明用户和课程之间的学习关系也需要保存。</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180109/5k6HkC49im.png?imageslim" alt="mark"></p><p>新建操作app:</p><p>点击<code>Tools 菜单下 Run manage.py Task</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startapp operation</span><br></pre></td></tr></table></figure><p>operation/models.py添加代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 引入我们CourseComments所需要的外键models</span></span><br><span class="line"><span class="keyword">from</span> users.models <span class="keyword">import</span> UserProfile</span><br><span class="line"><span class="keyword">from</span> courses.models <span class="keyword">import</span> Course</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户我要学习表单</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserAsk</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">20</span>, verbose_name=<span class="string">u"姓名"</span>)</span><br><span class="line">    mobile = models.CharField(max_length=<span class="number">11</span>, verbose_name=<span class="string">u"手机"</span>)</span><br><span class="line">    course_name = models.CharField(max_length=<span class="number">50</span>, verbose_name=<span class="string">u"课程名"</span>)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">u"添加时间"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">u"用户咨询"</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户对于课程评论</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CourseComments</span><span class="params">(models.Model)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 会涉及两个外键: 1. 用户， 2. 课程。import进来</span></span><br><span class="line">    course = models.ForeignKey(Course, verbose_name=<span class="string">u"课程"</span>)</span><br><span class="line">    user = models.ForeignKey(UserProfile, verbose_name=<span class="string">u"用户"</span>)</span><br><span class="line">    comments = models.CharField(max_length=<span class="number">250</span>, verbose_name=<span class="string">u"评论"</span>)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">u"评论时间"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">u"课程评论"</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户对于课程,机构，讲师的收藏</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserFavorite</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># 会涉及四个外键。用户，课程，机构，讲师import</span></span><br><span class="line">    TYPE_CHOICES = (</span><br><span class="line">        (<span class="number">1</span>, <span class="string">u"课程"</span>),</span><br><span class="line">        (<span class="number">2</span>, <span class="string">u"课程机构"</span>),</span><br><span class="line">        (<span class="number">3</span>, <span class="string">u"讲师"</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    user = models.ForeignKey(UserProfile, verbose_name=<span class="string">u"用户"</span>)</span><br><span class="line">    <span class="comment"># course = models.ForeignKey(Course, verbose_name=u"课程")</span></span><br><span class="line">    <span class="comment"># teacher = models.ForeignKey()</span></span><br><span class="line">    <span class="comment"># org = models.ForeignKey()</span></span><br><span class="line">    <span class="comment"># fav_type =</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 机智版</span></span><br><span class="line">    <span class="comment"># 直接保存用户的id.</span></span><br><span class="line">    fav_id = models.IntegerField(default=<span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 表明收藏的是哪种类型。</span></span><br><span class="line">    fav_type = models.IntegerField(</span><br><span class="line">        choices=TYPE_CHOICES,</span><br><span class="line">        default=<span class="number">1</span>,</span><br><span class="line">        verbose_name=<span class="string">u"收藏类型"</span>)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">u"评论时间"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">u"用户收藏"</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户消息表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserMessage</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">        <span class="comment"># 因为我们的消息有两种:发给全员和发给某一个用户。</span></span><br><span class="line">        <span class="comment"># 所以如果使用外键，每个消息会对应要有用户。很难实现全员消息。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 机智版 为0发给所有用户，不为0就是发给用户的id</span></span><br><span class="line">    user = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">u"接收用户"</span>)</span><br><span class="line">    message = models.CharField(max_length=<span class="number">500</span>, verbose_name=<span class="string">u"消息内容"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 是否已读: 布尔类型 BooleanField False未读,True表示已读</span></span><br><span class="line">    has_read = models.BooleanField(default=<span class="keyword">False</span>, verbose_name=<span class="string">u"是否已读"</span>)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">u"添加时间"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">u"用户消息"</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户课程表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserCourse</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># 会涉及两个外键: 1. 用户， 2. 课程。import进来</span></span><br><span class="line">    course = models.ForeignKey(Course, verbose_name=<span class="string">u"课程"</span>)</span><br><span class="line">    user = models.ForeignKey(UserProfile, verbose_name=<span class="string">u"用户"</span>)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">u"添加时间"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">u"用户课程"</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br></pre></td></tr></table></figure><p>至此：我们的五张operation下的数据表models设计完成</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/BHHfi6Gj2J.png?imageslim" alt="mark"></p><h3 id="setting中配置添加app"><a href="#setting中配置添加app" class="headerlink" title="setting中配置添加app"></a>setting中配置添加app</h3><p><img src="http://myphoto.mtianyan.cn/blog/180109/9IJa5kgFAG.png?imageslim" alt="mark"></p><p>本小节对应commit:</p><blockquote><p>operation下的models设计,用户: 课程&amp;消息&amp;收藏&amp;评论&amp;我要学习.并在setting中进行了注册。对应4-8</p></blockquote><h2 id="4-9-数据表生成以及apps目录建立"><a href="#4-9-数据表生成以及apps目录建立" class="headerlink" title="4-9 数据表生成以及apps目录建立"></a>4-9 数据表生成以及apps目录建立</h2><blockquote><p>学习如何通过刚才设计的models生成数据库对应的表</p></blockquote><p>点击<code>Tools 菜单下 Run manage.py Task</code>:</p><h3 id="Python2与Python3不同"><a href="#Python2与Python3不同" class="headerlink" title="Python2与Python3不同:"></a>Python2与Python3不同:</h3><p>Python2下可能会报一些<code>noASCII</code>错误:</p><p>只需要在对应你写了中文的第一行加上:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># encoding: utf-8</span><br></pre></td></tr></table></figure><h3 id="Python3-django2-0-1-会报错"><a href="#Python3-django2-0-1-会报错" class="headerlink" title="Python3(django2.0.1)会报错:"></a>Python3(django2.0.1)会报错:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">org = models.ForeignKey(CourseOrg, verbose_name=u&quot;所属机构&quot;)</span><br><span class="line">TypeError: __init__() missing 1 required positional argument: &apos;on_delete&apos;</span><br></pre></td></tr></table></figure><blockquote><p>这是因为在2.0.1中，外键关系必须指明删除时的操作。</p></blockquote><p>比如：出租车都归属于出租车公司。如果出租车公司倒闭了，那这些汽车该怎么处理。<br>必须自己指明: 我觉得可以直接进行级联删除。</p><p>django提供了:</p><ul><li><code>CASCADE</code></li><li><code>PROTECT</code></li><li><code>SET_NULL</code></li><li><code>SET_DEFAULT</code></li></ul><p>等选项。我选择了<code>CASCADE</code>删除。</p><p>将(dajngo 2.0.1)项目中所有的外键修改为如下面代码所示：</p><blockquote><p>也就是添加了<code>on_delete=models.CASCADE</code>使其级联删除。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org = models.ForeignKey(CourseOrg, on_delete=models.CASCADE, verbose_name=<span class="string">u"所属机构"</span>)</span><br></pre></td></tr></table></figure><h3 id="makemirgration-amp-migrate生成表"><a href="#makemirgration-amp-migrate生成表" class="headerlink" title="makemirgration &amp; migrate生成表"></a>makemirgration &amp; migrate生成表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">makemirgration</span><br><span class="line">migrate</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180109/mdib8gdGHc.png?imageslim" alt="mark"></p><p>上图为makemirgration过程中输出的信息。可以看到我们做出的改动</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/B01J3JChmd.png?imageslim" alt="mark"></p><p>此时我们查看app目录中migrations文件夹可以看到产生的新文件。</p><p><code>operation/migrations/0001_initial.py:</code></p><blockquote><p>可以看到里面也是Python的语法。他会帮我们生成数据表。<br>以后每次<code>migrations</code>时都会生成新的initial文件。这是很重要的变动文件，不能随意删除。</p></blockquote><p>打开Navicat可以看到django的数据库中有它默认的django_migrations表</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/i7Cc4HHBgh.png?imageslim" alt="mark"></p><p>双击django_migrations表可以看到我们migration的记录。</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/kE5Fc9kjc7.png?imageslim" alt="mark"></p><blockquote><p>会记录哪个app下的哪个initial.py已经运行了。</p></blockquote><p>进入Navicat进行成功性验证:</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/Bd16J68e9k.png?imageslim" alt="mark"></p><blockquote><p>可以看到我们的表已经生成成功,命名规则为: app名称 + 我们的类名变成小写</p></blockquote><h3 id="把我们的四个app放到一个文件夹下。"><a href="#把我们的四个app放到一个文件夹下。" class="headerlink" title="把我们的四个app放到一个文件夹下。"></a>把我们的四个app放到一个文件夹下。</h3><ul><li>新建Python的package: apps </li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180109/7l4AG2maAD.png?imageslim" alt="mark"></p><ul><li>把四个app都拖进apps中去。</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180109/mGLjCiL8aj.png?imageslim" alt="mark"></p><p>去掉<code>searchfor</code>的勾选。拖进去之后会报错，说找不到那些import的模块了。</p><p>解决方案：右键<code>Mark</code>为<code>sourceRoot</code>。根目录下找不到的，会去apps下搜索。</p><p>但是这时候cmd下还是会报错。</p><p>解决方案(图来源于我的<code>DjangoGetStarted</code>教程):</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/IhD2bJDI6K.png?imageslim" alt="mark"></p><p>同理,插入第0是希望它先搜索我们app下东西：</p><p><img src="http://myphoto.mtianyan.cn/blog/180109/biF9eAhLHi.png?imageslim" alt="mark"></p><h4 id="成功性验证"><a href="#成功性验证" class="headerlink" title="成功性验证"></a>成功性验证</h4><p><img src="http://myphoto.mtianyan.cn/blog/180109/hJc05K1b28.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180109/BH84IH9beb.png?imageslim" alt="mark"></p><blockquote><p>可以看到Django已经可以正常run成功了。</p></blockquote><h3 id="第四章总结"><a href="#第四章总结" class="headerlink" title="第四章总结"></a>第四章总结</h3><ul><li>我们设计了app</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180109/bbbKglA0LI.png?imageslim" alt="mark"></p><ul><li>设计了user models.py</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180109/5ehi0hDB3C.png?imageslim" alt="mark"></p><ul><li>循环引用</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180109/8f32C0imcE.png?imageslim" alt="mark"></p><blockquote><p>得出我们需要创建一个更高层次的app。分层设计，operation在更高层。</p></blockquote><ul><li>Courses models.py </li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180109/e60fJjHeEa.png?imageslim" alt="mark"></p><ul><li>organization models.py</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180109/jg51D6Baj7.png?imageslim" alt="mark"></p><ul><li>operation models.py</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180109/3CLeJ5LCeD.png?imageslim" alt="mark"></p><p>通过makemigrations 生成表的变动 &amp; migrate<br>每个app下的migration目录的用途，和数据库中django_migration<br>将所有app放到同一个目录之下。</p><p>本章结束对应commit:</p><blockquote><p>数据表全部生成，migration目录&amp;表django_migration。将app放到apps目录。对应4-9.<br>第四章结束！撒花。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;数据基础决定上层建筑 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;note warning&quot;&gt;&lt;p&gt; 设计数据库是整个项目的第一项工作:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;完成django的app设计 &amp;amp; 完成app中的models设计&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Django1.9.8对应github: &lt;a href=&quot;https://github.com/mtianyan/Mxonline2&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/mtianyan/Mxonline2&lt;/a&gt;&lt;br&gt;Django2.0.1对应github: &lt;a href=&quot;https://github.com/mtianyan/Mxonline3&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/mtianyan/Mxonline3&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Django+Xadmin打造在线教育平台" scheme="http://blog.mtianyan.cn/categories/Django-Xadmin%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E5%B9%B3%E5%8F%B0/"/>
    
    
      <category term="Python" scheme="http://blog.mtianyan.cn/tags/Python/"/>
    
      <category term="Django" scheme="http://blog.mtianyan.cn/tags/Django/"/>
    
      <category term="在线教育平台" scheme="http://blog.mtianyan.cn/tags/%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E5%B9%B3%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>强力Django+杀手级Xadmin打造在线教育平台(三)</title>
    <link href="http://blog.mtianyan.cn/post/ac975bcd.html"/>
    <id>http://blog.mtianyan.cn/post/ac975bcd.html</id>
    <published>2018-01-08T14:09:17.000Z</published>
    <updated>2018-02-02T12:40:13.960Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>小项目不扫何以扫天下 </p></blockquote><div class="note success"><p>使用Django+Xadmin打造在线教育平台</p><ul><li>第三章：通过留言板功能回顾django基础知识<br>通过做一个小留言板，学习django基础知识<br>教程仓库地址1: <a href="https://github.com/mtianyan/DjangoGetStarted" target="_blank" rel="noopener">https://github.com/mtianyan/DjangoGetStarted</a></li></ul></div><a id="more"></a><p>教程中本章对应上传的仓库为: <a href="https://github.com/mtianyan/DjangoGetStarted" target="_blank" rel="noopener">https://github.com/mtianyan/DjangoGetStarted</a></p><blockquote><p>对应第一次commit:留言板仓库初始化。内容截止3-1一章结束。</p></blockquote><ul><li>将对于django目录结构，使用Django快速搭建可以提交的表单页面，models.py , urls.py, views.py。</li><li>从数据库中取出数据展示到html中：Django Template的配置。</li><li>即django的基础知识通过这个留言板项目进行一个全面细致的学习。</li></ul><h2 id="3-1-django目录结构"><a href="#3-1-django目录结构" class="headerlink" title="3-1 django目录结构"></a>3-1 django目录结构</h2><p>django目录：</p><pre><code>projectname : 保存Django项目的urls,setting，uwsgi文件</code></pre><p>如下图新建一个Django项目<code>DjangoGetStarted</code>，使用我们上章节中已存在的虚拟环境<code>DjangoTest</code> (里面已经装好了django)</p><p><img src="http://myphoto.mtianyan.cn/blog/180106/BKLg4JDJCe.png?imageslim" alt="mark"></p><h3 id="django自动生成的目录"><a href="#django自动生成的目录" class="headerlink" title="django自动生成的目录"></a>django自动生成的目录</h3><p>初始化完成后的目录如下：(如果不是，那么你们可能创建的不是django项目)</p><p><img src="http://myphoto.mtianyan.cn/blog/180106/3aIIDddEmc.png?imageslim" alt="mark"></p><p>可以看到主目录<code>DjangoGetStarted</code>与项目目录<code>DjangoGetStarted</code></p><ul><li>DjangoGetStarted(文件夹)：    <ul><li>setting.py： 项目全局配置文件</li><li>urls.py： 主要的urls配置入口</li><li>wsgi.py： 是Django启动需要的文件。</li></ul></li><li>templates(文件夹)： 放置html文件</li><li>manage.py： 启动Django需要的主要文件。(主要的Django命令都通过manage.py运行)</li></ul><h3 id="还需要我们自己创建的目录"><a href="#还需要我们自己创建的目录" class="headerlink" title="还需要我们自己创建的目录"></a>还需要我们自己创建的目录</h3><p>app是Django里一个一个应用的文件夹单位。</p><p>通过 <code>Tools -&gt; Run manage.py Task</code>创建app：</p><p><img src="http://myphoto.mtianyan.cn/blog/180106/lFgLChlhdc.png?imageslim" alt="mark"></p><h4 id="startapp-message"><a href="#startapp-message" class="headerlink" title="startapp message"></a>startapp message</h4><p>可以看到当输入<code>startapp message</code>之后，创建了<code>message</code>应用。并存放在了：与项目目录同级目录。</p><p><img src="http://myphoto.mtianyan.cn/blog/180106/Ef2F5Bf7FA.png?imageslim" alt="mark"></p><h4 id="新建static目录"><a href="#新建static目录" class="headerlink" title="新建static目录"></a>新建static目录</h4><p>使用<code>static</code>目录来存放网站的静态文件：js，css，图片等。</p><h4 id="新建log目录"><a href="#新建log目录" class="headerlink" title="新建log目录"></a>新建log目录</h4><p>使用<code>log</code>目录来存放网站的日志文件</p><h4 id="新建media目录"><a href="#新建media目录" class="headerlink" title="新建media目录"></a>新建media目录</h4><p>使用<code>media</code>目录存放用户上传的图片等资源。</p><h4 id="解决项目大了之后app过多问题"><a href="#解决项目大了之后app过多问题" class="headerlink" title="解决项目大了之后app过多问题"></a>解决项目大了之后app过多问题</h4><ol><li>新建文件夹 <code>apps</code></li><li>将<code>message</code>文件夹拖入<code>apps</code>文件夹内：会自动生成<code>__init__.py</code>文件表明这是一个包。使得apps文件夹可导入。</li></ol><p><img src="http://myphoto.mtianyan.cn/blog/180106/3625a0imed.png?imageslim" alt="mark"></p><blockquote><p>这时我们就会发现在导入我们的message的内容就得配置较长的路径。</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180107/k10eEBg357.png?imageslim" alt="mark"></p><blockquote><p>每次前面都得加上<code>apps.</code>，这可烦死人啦。</p></blockquote><p><strong>解决方案奉上</strong></p><blockquote><p>将<code>apps</code>目录右键<code>mark</code>成<code>Source Root</code>(Mark 方法查看第一章pycharm简单使用：目录颜色不同的原因)</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180107/I9255edkaF.png?imageslim" alt="mark"></p><p>mark成功之后<strong>变蓝</strong>(变绿的话，只能摸摸头了，当然选择原谅)，然后可以直接使用短路径进行import</p><h4 id="Mark后Pycharm-不报错，Cmd下运行报错。"><a href="#Mark后Pycharm-不报错，Cmd下运行报错。" class="headerlink" title="Mark后Pycharm 不报错，Cmd下运行报错。"></a>Mark后Pycharm 不报错，Cmd下运行报错。</h4><p>Mark后pycharm知道这是一个项目的<code>Souce Root</code>路径了，但是cmd并不知道。</p><blockquote><p>在项目目录下通过cmd命令行使用<code>python manage.py runserver</code></p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180107/2043A3KagE.png?imageslim" alt="mark"></p><blockquote><p>pycharm中mark只是pycharm自身可以进行识别短路径。</p></blockquote><p><strong>解决方案：</strong></p><blockquote><p>我们在setting文件中配置我们的<code>apps</code>路径:</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180107/IhD2bJDI6K.png?imageslim" alt="mark"></p><blockquote><p>图解读：我们需要在setting中向上图一样设置,程序就会接着报错。(换了一个错误了，滑稽脸)</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.insert(<span class="number">0</span>,os.path.join(BASE_DIR,<span class="string">'apps'</span>))</span><br></pre></td></tr></table></figure><p>上述代码为将apps拼接项目绝对路径后的路径插入当前系统的环境变量path中，这样就可以成功解决(个屁屁啊)。</p><p>成功性测试(测试已失败)：</p><blockquote><p>这个import放到manage.py文件是不行的 你把manage.py中这行删除 因为django整个的配置还没有启动好 import django的model是不行的，</p></blockquote><p>插播：忘了失败吧，我偷学下面方法养你。</p><p><strong>终极解决：将这个<code>import</code>方法比如urls.py.等可以成功启动。</strong>或者自行删除该import。</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/b230j2d65e.png?imageslim" alt="mark"></p><p>红色警告：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">You have unapplied migrations; your app may not work properly </span><br><span class="line">until they are applied. Run &apos;python manage.py migrate&apos; to apply them.</span><br></pre></td></tr></table></figure></p><p>是因为我们没有进行数据库<code>models</code>进行初始化<code>migrate</code>.</p><p><code>python manage.py migrate</code>我们之后会用到，现在不要做。</p><h3 id="github仓库项目初始化第一次commit。"><a href="#github仓库项目初始化第一次commit。" class="headerlink" title="github仓库项目初始化第一次commit。"></a>github仓库项目初始化第一次commit。</h3><p><img src="http://myphoto.mtianyan.cn/blog/180107/aFheliD18B.png?imageslim" alt="mark"></p><blockquote><p>输入用户名密码，点击login。</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180107/ci4AKb7Lb0.png?imageslim" alt="mark"></p><blockquote><p>选择左侧导航中<code>Git</code> 设置你的git.exe的路径</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180107/6Af7m9cI0i.png?imageslim" alt="mark"></p><p>点击<code>Share project on GitHub</code>会弹出下图窗口</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/JjH1FjmB0i.png?imageslim" alt="mark"></p><p>填写你的项目<code>名称</code>，<code>描述</code>。点击<code>share</code>。</p><p>会弹窗让你选择需要上传的项目文件与commit信息。然后将项目上传至github。</p><p><strong>我教程中上传的仓库为:  <a href="https://github.com/mtianyan/DjangoGetStarted" target="_blank" rel="noopener">https://github.com/mtianyan/DjangoGetStarted</a></strong></p><blockquote><p>对应第一次commit:留言板仓库初始化。内容截止3-1一章结束。</p></blockquote><h2 id="3-2-配置表单页面"><a href="#3-2-配置表单页面" class="headerlink" title="3-2 配置表单页面"></a>3-2 配置表单页面</h2><blockquote><p>上节教程(来学习本节前置条件):</p></blockquote><ul><li>对应第一次commit: 留言板仓库初始化。内容截止3-1一章结束。</li></ul><p><strong>github仓库地址：<a href="https://github.com/mtianyan/DjangoGetStarted" target="_blank" rel="noopener">https://github.com/mtianyan/DjangoGetStarted</a></strong></p><blockquote><p>本节我们学习将表单页面配置进django项目中</p></blockquote><h3 id="必要的该说的，该了解的"><a href="#必要的该说的，该了解的" class="headerlink" title="必要的该说的，该了解的"></a>必要的该说的，该了解的</h3><p><strong>前置条件：</strong></p><blockquote><p>你已经学习了前面教程。将项目的文件夹目录结构，setting配置等修改完毕与我保持一致。</p></blockquote><p>本节通过Django快速的配置一个<strong>留言板页面</strong>来学习</p><p>Django从请求到响应的整个完整流程。为我们开发在线教育平台打下基础。</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/ghebBaKDDa.png?imageslim" alt="mark"></p><p>上图便是本节教程所要用到的静态页面: 前往Github下载：<code>form.html</code></p><blockquote><p>具体的业务：填写信息 -&gt; 然后点击提交 -&gt;数据被存储到数据库。</p></blockquote><p>这个<code>html</code>是一个单文件，里面已经包含了<code>css</code> <code>js</code>内容。</p><h3 id="将html文件整合进项目操作步骤"><a href="#将html文件整合进项目操作步骤" class="headerlink" title="将html文件整合进项目操作步骤"></a>将html文件整合进项目操作步骤</h3><h4 id="将html文件直接复制进templates目录"><a href="#将html文件直接复制进templates目录" class="headerlink" title="将html文件直接复制进templates目录."></a>将<code>html</code>文件直接复制进<code>templates</code>目录.</h4><p><img src="http://myphoto.mtianyan.cn/blog/180107/bd7L9HEbB1.png?imageslim" alt="mark"></p><h4 id="创建static目录下的css文件夹-和-static-js"><a href="#创建static目录下的css文件夹-和-static-js" class="headerlink" title="创建static目录下的css文件夹 和 static/js"></a>创建<code>static目录下的css文件夹</code> 和 <code>static/js</code></h4><ul><li>在css中再新建一个<code>style.css</code></li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180107/7L3m4291JK.png?imageslim" alt="mark"></p><ul><li><code>form.html</code>中点击<code>&lt;style&gt;</code>标签左侧减号。将style内容收成一行。然后把这一行内容<strong>剪切粘贴到</strong><code>style.css</code></li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180107/EJHc2DdkK2.png?imageslim" alt="mark"></p><ul><li><p>粘贴进去之后，<strong>将首尾两个<code>&lt;style&gt;</code>删除</strong>,<code>shift + tab</code>可以将css格式化更整齐。</p></li><li><p>在<code>form.html</code>新建<code>&lt;link&gt;</code>来引入css。(文件里其实已经先加上了，学一种操作而已)</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/static/css/style.css"</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置Django连接Mysql数据库"><a href="#配置Django连接Mysql数据库" class="headerlink" title="配置Django连接Mysql数据库"></a>配置Django连接Mysql数据库</h3><p>在<code>setting.py</code> 大概80行找到:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    &apos;default&apos;: &#123;</span><br><span class="line">        &apos;ENGINE&apos;: &apos;django.db.backends.sqlite3&apos;,</span><br><span class="line">        &apos;NAME&apos;: os.path.join(BASE_DIR, &apos;db.sqlite3&apos;),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是Django默认与自己项目根目录下的<code>db.sqlite3</code>连接的设置。</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/00e3abbbFJ.png?imageslim" alt="mark"></p><p>我们的项目是与<code>mysql</code>连接，所以我们要改成如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    &apos;default&apos;: &#123;</span><br><span class="line">        &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;,</span><br><span class="line">        &apos;NAME&apos;: &apos;testdjango&apos;,</span><br><span class="line">        &apos;USER&apos;: &apos;root&apos;,</span><br><span class="line">        &apos;PASSWORD&apos;: &apos;密码&apos;,</span><br><span class="line">        &apos;HOST&apos;: &quot;127.0.0.1&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的<code>name</code>应设置为我们中在Navicat中新建的数据库名字。<strong>名字一定要保持一致</strong></p><p>这时要将我们之前建的表提前<strong>全部删除</strong>掉。</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/g8l89KCfam.png?imageslim" alt="mark"></p><h4 id="配置mysql驱动和seeting文件。"><a href="#配置mysql驱动和seeting文件。" class="headerlink" title="配置mysql驱动和seeting文件。"></a>配置mysql驱动和seeting文件。</h4><p>点击<code>Tools 菜单下 Run manage.py Task</code>我们会发现报错了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">    raise ImproperlyConfigured(&quot;Error loading MySQLdb module: %s&quot; % e)</span><br><span class="line">django.core.exceptions.ImproperlyConfigured: Error loading MySQLdb module: No module named MySQLdb</span><br></pre></td></tr></table></figure><blockquote><p>由错误信息我们可以看出是因为没有安装数据库驱动模块<code>MySQLdb</code></p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180107/lJKDjik9Cb.png?imageslim" alt="mark"></p><p><code>cmd</code>下<code>workon</code>进我们的虚拟环境目录。<code>pip install mysql-python</code><br>然后会发现报错：</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/65Gad4D4l9.png?imageslim" alt="mark"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">_mysql.c(42) : fatal error C1083: Cannot open include file: &apos;config-win.h&apos;: </span><br><span class="line">No such file or directory error: command </span><br><span class="line">&apos;&quot;C:\Users\mtian\AppData\Local\Programs\Common\Microsoft\Visual C ++ </span><br><span class="line">for Python\9.0\VC\Bin\amd64\cl.exe&quot;&apos; failed with exit status 2</span><br></pre></td></tr></table></figure><p>前往地址 <a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#mysql-python" target="_blank" rel="noopener">https://www.lfd.uci.edu/~gohlke/pythonlibs/#mysql-python</a></p><p>下载<code>MySQL_python_1.2.5_cp27_none_win_amd64.whl</code>到本地,放到桌面。<br>然后使用下面命令进行安装：注意是在虚拟环境下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd Desktop</span><br><span class="line">pip install MySQL_python-1.2.5-cp27-none-win_amd64.whl</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180107/G60aadGLkJ.png?imageslim" alt="mark"></p><p>这个时候我们再次点击<code>Tools 菜单下 Run manage.py Task</code>会看到已经没有刚才的错误。<br><img src="http://myphoto.mtianyan.cn/blog/180107/4mF5KmaCKj.png?imageslim" alt="mark"><br>但是会有红框里的警告，<strong>面向强迫症解决方案是</strong>在<code>setting.py</code> 新增<code>STATIC_ROOT = &#39;/static/&#39;</code></p><p>但其实现在还没有用到这个参数。后面用到我们再配置。(推荐自行克服强迫症)</p><p>输入下面命令来生成表:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">makemigrations</span><br><span class="line">migrate</span><br></pre></td></tr></table></figure></p><p><img src="http://myphoto.mtianyan.cn/blog/180107/gaaL4hlAGj.png?imageslim" alt="mark"></p><p>这时我们去Navicat查看会发现为我们生成了很多表。</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/bK273a3j4D.png?imageslim" alt="mark"></p><p>这些都是Django系统默认的<strong>内置</strong>数据表。</p><p>做完这些操作我们可以点击<code>Run</code>来运行项目，<br>然后到<code>http://127.0.0.1:8000/</code>来访问看是否运行成功。成功页面(It worked)</p><h3 id="配置form页面展示出来："><a href="#配置form页面展示出来：" class="headerlink" title="配置form页面展示出来："></a>配置form页面展示出来：</h3><p><code>DjangoGetStarted/urls.py</code>修改如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^admin/'</span>, admin.site.urls),</span><br><span class="line">    url(<span class="string">r'^form/$'</span>, getform) <span class="comment">#这行是新增加的.</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>新增加<code>url(r&#39;^form/$&#39;, getform)</code>,<code>^</code>是代表以<code>form</code>为开头，<code>$</code>代表以<code>/</code>结尾的地址。<br>这里<code>getform</code> 是对于这个<code>url</code>的相应处理的<code>view</code>。我们先去创建一个.</p><p><code>message/views.py</code>添加如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getform</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'message_form.html'</span>)</span><br></pre></td></tr></table></figure><p><code>request</code> 参数是一个django的<code>http request</code>对象。(基础)<br>这里我们可以按住<code>ctrl</code> + <code>左键</code> 跟踪到我们的<code>render</code>函数里面。<br><code>Alt + 左箭头</code> 回来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">render</span><span class="params">(request, template_name,...)</span>:</span></span><br></pre></td></tr></table></figure><p>源代码解读：可以看到我们的<code>render</code>需要一个<code>request对象</code>和<code>template_name</code>参数</p><p><strong>注意：记性好的还记得我们提供的源文件是form.html</strong></p><blockquote><p>知识点：django内置了很多html页面，form会先从内置中寻找。所以我们得改。</p></blockquote><p>因此我们需要右键如下图<code>Refactor</code>修改<code>from.html</code> 为<code>message_form</code></p><p><img src="http://myphoto.mtianyan.cn/blog/180107/l0I7CGB2Be.png?imageslim" alt="mark"></p><p>如果我们的项目在运行，<code>ctrl + s</code>会自动重启我们的项目。</p><p>这时我们有了view，我们可以去配置完整的url了(前面已经配完整的检查一遍)：</p><p><code>DjangoGetStarted/urls.py</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from message.views import getform</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(r&apos;^admin/&apos;, admin.site.urls),</span><br><span class="line">    url(r&apos;^form/$&apos;, getform)</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p><strong>这里我们不能加括号</strong>否则会变成方法的调用。</p><p>按住<code>ctrl</code> + <code>render</code> 跟踪到我们的<code>url</code>函数里面查看源码如下:可以看到它除过一组正则表达式，还需要接收一个view对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">def url(regex, view,...):</span><br></pre></td></tr></table></figure><p>如果<code>getform</code>加上括号会报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TypeError: getform() takes exactly 1 argument (0 given)</span><br></pre></td></tr></table></figure><p>访问<code>http://127.0.0.1:8000/</code> 正常结果：Page not found</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Using the URLconf defined in DjangoGetStarted.urls, Django tried these URL patterns, in this order:</span><br><span class="line"></span><br><span class="line">^admin/</span><br><span class="line">^form/$</span><br></pre></td></tr></table></figure><p>是因为我们在url中加入了个人的配置<code>^form/$</code>,它就不会采用默认配置了。</p><p>原因：(源码探究标记点)</p><p>这时访问：<a href="http://127.0.0.1:8000/form/" target="_blank" rel="noopener">http://127.0.0.1:8000/form/</a></p><p>旧版本pycharm会报：<code>TemplateDoesNotExist</code>错误。我的新版本pycharm并没有出现。</p><p>重要代码在<code>DjangoGetStarted/settings.py</code> 60行左右</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 指明我们的templates目录路径</span><br><span class="line">&apos;DIRS&apos;: [os.path.join(BASE_DIR, &apos;templates&apos;)]</span><br><span class="line"># 老版本pycharm创建django项目该值为空。</span><br></pre></td></tr></table></figure><p>现在再次访问 <a href="http://127.0.0.1:8000/form/" target="_blank" rel="noopener">http://127.0.0.1:8000/form/</a></p><p><strong>页面出来了但是样式没有。static目录下的css文件提示没有找到。</strong></p><p><img src="http://myphoto.mtianyan.cn/blog/180107/73EjmflBe9.png?imageslim" alt="mark"></p><p>Setting中静态文件的配置，这是因为我们setting中的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">STATIC_URL = &apos;/static/&apos;</span><br></pre></td></tr></table></figure><p>只说明了目录的名称。并没有指明查找的根路径。添加下面代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">STATIC_URL = &apos;/static/&apos;</span><br><span class="line">STATICFILES_DIRS = [</span><br><span class="line">    os.path.join(BASE_DIR, &apos;static&apos;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>过程中看似不停的出错</strong>，其实是为了让大家更好记住该记住的。</p><h3 id="项目配置流程图"><a href="#项目配置流程图" class="headerlink" title="项目配置流程图"></a>项目配置流程图</h3><p>我们刚才是以倒序：</p><ol><li>把html文件放进来</li><li>通过简单的url配置来访问html。</li><li>发现找不到页面，所以我们设置setting中<code>DIRS</code></li><li>文件找到了又说找不到静态文件，我们设置了<code>STATICFILES_DIRS</code></li></ol><p><img src="http://myphoto.mtianyan.cn/blog/180107/ihf44icl9d.png?imageslim" alt="mark"></p><p>这是我们的整体流程图，推荐新建一个项目再按照正向流程图来一遍。</p><p>后面我们的工作会围绕从<code>migration生成数据表往下的内容</code>展开。</p><p>GitHub地址：<a href="https://github.com/mtianyan/DjangoGetStarted" target="_blank" rel="noopener">https://github.com/mtianyan/DjangoGetStarted</a></p><blockquote><p>本节结束对应于commit：</p></blockquote><h2 id="3-3-django-orm介绍与model设计"><a href="#3-3-django-orm介绍与model设计" class="headerlink" title="3-3 django orm介绍与model设计"></a>3-3 django orm介绍与model设计</h2><p>上节教程完成后代码(来学习本节前置条件):</p><p><strong>github仓库地址：<a href="https://github.com/mtianyan/DjangoGetStarted" target="_blank" rel="noopener">https://github.com/mtianyan/DjangoGetStarted</a></strong></p><ul><li>对应commit: 留言板前端页面展示。本次内容截止教程3-2结束。</li></ul><blockquote><p>可能现在你还在通过手写sql语句来操作数据库，当我们有了orm，数据库操作变得很简单。这一小节我们来学习Django中的orm。</p></blockquote><h3 id="原生sql-与-orm"><a href="#原生sql-与-orm" class="headerlink" title="原生sql 与 orm"></a>原生sql 与 orm</h3><p>没有orm 的情况下message/views.py代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import MySQLdb</span><br><span class="line"></span><br><span class="line"># 使用原生sql获取书的列表</span><br><span class="line">def book_list(request):</span><br><span class="line">    # 创建到数据库的连接: 指明用户名，数据库，密码</span><br><span class="line">    db = MySQLdb.connect(user = &apos;me&apos;, db=&apos;mydb&apos;, passwd=&apos;secret&apos;, host=&apos;localhost&apos;)</span><br><span class="line">    # 创建一个游标对象执行器</span><br><span class="line">    cursor = db.cursor()</span><br><span class="line">    # 书写我们需要的sql语句</span><br><span class="line">    cursor.execute(&apos;SELECT name FROM books ORDER BY name&apos;)</span><br><span class="line">    # 对于fetchall()的结果做遍历，将遍历回来的结果当做数组，取第0个值name。</span><br><span class="line">    names = [row[0] for row in cursor.fetchall()]</span><br><span class="line">    db.close()</span><br></pre></td></tr></table></figure><p>可不可以让数据库字段的查询和使用类的一个属性一样简单？没错登登登：orm上场了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">book:name</span><br><span class="line"></span><br><span class="line">book.name</span><br><span class="line">book.save()</span><br></pre></td></tr></table></figure><p>Django的orm就是为了让我们不再写上面那样的语句，而是像使操作数据库像使用类和类属性一样。</p><h3 id="创建我们的models"><a href="#创建我们的models" class="headerlink" title="创建我们的models"></a>创建我们的models</h3><blockquote><p>verbose_name:对象的人类可读的名称，单数:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">verbose_name = <span class="string">"pizza"</span></span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class Meta，内嵌于 UserMessage 这个类的定义中</span><br><span class="line">如果 class Publisher 是顶格的，那么 class Meta 在它之下要缩进4个空格－－按 Python 的传统</span><br><span class="line">你可以在任意一个 模型 类中使用 Meta 类，来设置一些与特定模型相关的选项。</span><br><span class="line">如：设置ordering = [&apos;name&apos;]，默认地都会按 name 字段排序</span><br></pre></td></tr></table></figure><p>message/models.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 继承于django.db.models.Model</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserMessage</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># 设置最大长度，verbose_name在后台显示字段会用到</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">20</span>, verbose_name=<span class="string">u"用户名"</span>)</span><br><span class="line">    <span class="comment"># Django提供内置的邮箱字段会帮忙验证` default_validators = [validators.validate_email]`</span></span><br><span class="line">    email = models.EmailField(verbose_name=<span class="string">u"邮箱"</span>)</span><br><span class="line">    address = models.CharField(max_length=<span class="number">100</span>, verbose_name=<span class="string">u"联系地址"</span>)</span><br><span class="line">    message = models.CharField(max_length=<span class="number">500</span>, verbose_name=<span class="string">u"留言信息"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">u"用户留言信息"</span></span><br><span class="line">        <span class="comment"># db_table ，这里我们让它自动生成所以不用指定</span></span><br></pre></td></tr></table></figure><p>这时我们执行<code>makemigrations messages</code>会发现并没有改动。</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/bCK3e2eF9C.png?imageslim" alt="mark"></p><blockquote><p>因为setting中我们没有注册我们的app: message</p></blockquote><p><strong>注意：新建的app都要在setting中注册</strong></p><h3 id="在setting中注册我们的app"><a href="#在setting中注册我们的app" class="headerlink" title="在setting中注册我们的app"></a>在setting中注册我们的app</h3><p>DjangoGetStarted/settings.py 大概36行<code>INSTALLED_APPS</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">`INSTALLED_APPS`</span><br><span class="line">[</span><br><span class="line">    前面的不用变，后面新增下一行</span><br><span class="line">    &apos;message&apos;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这时候我们重新运行<code>Tools 菜单下 Run manage.py Task</code>会提示：</p><p>如果提示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SyntaxError: Non-ASCII character &apos;\xe7&apos; in file D:\CodeSpace\PythonProject\DjangoGetStarted\apps\message\models.py on line</span><br></pre></td></tr></table></figure></p><p>请注意可能你忘记在写过中文的地方加上:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#coding: utf-8</span><br></pre></td></tr></table></figure><p><strong>注意必须加在第一或二行。</strong></p><p>然后执行下面命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">makemigrations message</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180107/7j9GC32b44.png?imageslim" alt="mark"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">migrate message 生成数据表</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180107/dbKECKEBFg.png?imageslim" alt="mark"></p><p>前往Navicat验证：</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/26GK5BjhCd.png?imageslim" alt="mark"></p><blockquote><p>可以看到我们的数据表已经创建成功。默认数据表名称为<code>app名称_类名转换为小写</code><br>自动生成的id作为主键。</p></blockquote><h3 id="Models讲解"><a href="#Models讲解" class="headerlink" title="Models讲解"></a>Models讲解</h3><p>除过普通的对应数据库的字段类型如<code>CharField</code>，还有很多高级类型。如<code>EmailField</code>提供email验证。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">models.ForeignKey     # 外键</span><br><span class="line">models.DateTimeField  # 时间字段</span><br><span class="line">models.IntegerField   # 整型</span><br><span class="line">models.IPAddressField # IP地址</span><br><span class="line">models.FileField      # 上传文件</span><br><span class="line">models.ImageField     # 图片</span><br></pre></td></tr></table></figure><blockquote><p>ctrl按住+左键点击<code>models</code> 进入之后点击<code>fields</code>拖到文件开始可以看到所有字段：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">__all__ = [str(x) for x in (</span><br><span class="line">    &apos;AutoField&apos;, &apos;BLANK_CHOICE_DASH&apos;, &apos;BigIntegerField&apos;, &apos;BinaryField&apos;,</span><br><span class="line">    &apos;BooleanField&apos;, &apos;CharField&apos;, &apos;CommaSeparatedIntegerField&apos;, &apos;DateField&apos;,</span><br><span class="line">    &apos;DateTimeField&apos;, &apos;DecimalField&apos;, &apos;DurationField&apos;, &apos;EmailField&apos;, &apos;Empty&apos;,</span><br><span class="line">    &apos;Field&apos;, &apos;FieldDoesNotExist&apos;, &apos;FilePathField&apos;, &apos;FloatField&apos;,</span><br><span class="line">    &apos;GenericIPAddressField&apos;, &apos;IPAddressField&apos;, &apos;IntegerField&apos;, &apos;NOT_PROVIDED&apos;,</span><br><span class="line">    &apos;NullBooleanField&apos;, &apos;PositiveIntegerField&apos;, &apos;PositiveSmallIntegerField&apos;,</span><br><span class="line">    &apos;SlugField&apos;, &apos;SmallIntegerField&apos;, &apos;TextField&apos;, &apos;TimeField&apos;, &apos;URLField&apos;,</span><br><span class="line">    &apos;UUIDField&apos;,</span><br><span class="line">)]</span><br></pre></td></tr></table></figure><h4 id="介绍字段参数"><a href="#介绍字段参数" class="headerlink" title="介绍字段参数"></a>介绍字段参数</h4><p><code>CharField</code>必须指明默认最大长度。<code>null=True,blank=True</code>指明字段可以为空<br><code>defalut = &quot; &quot;</code>指定默认值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name = models.CharField(max_length=20,null=True,blank=True, verbose_name=u&quot;用户名&quot;)</span><br></pre></td></tr></table></figure></p><p>id是自动生成的，如果需要自定义主键,message/models.py中添加字段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">object_id = models.CharField(primary_key=True, verbose_name=&quot;主键&quot;)</span><br></pre></td></tr></table></figure><p>此时点击<code>Tools 菜单下 Run manage.py Task</code>输入<code>makemigrations message</code></p><p><img src="http://myphoto.mtianyan.cn/blog/180107/IA82jEgmAG.png?imageslim" alt="mark"></p><p><strong>知识点：CharField必须指明最大长度</strong></p><p>object_id改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">object_id = models.CharField(primary_key=True, max_length=50 ,verbose_name=&quot;主键&quot;)</span><br></pre></td></tr></table></figure><p>这时点击<code>Tools 菜单下 Run manage.py Task</code>输入<code>makemigrations message</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">You are trying to add a non-nullable field <span class="string">'object_id'</span> to usermessage without a default; we can<span class="string">'t do that (the database needs something to populate existing rows).</span></span><br><span class="line"><span class="string">Please select a fix:</span></span><br><span class="line"><span class="string"> 1) Provide a one-off default now (will be set on all existing rows)</span></span><br><span class="line"><span class="string"> 2) Quit, and let me add a default in models.py</span></span><br></pre></td></tr></table></figure><p>根据提示信息，我们需要给<code>object_id</code>添加默认值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">object_id = models.CharField(primary_key=True, max_length=50,default=&quot;&quot;, verbose_name=&quot;主键&quot;)</span><br></pre></td></tr></table></figure><p><strong>get新知识点：object_id必须有默认值</strong></p><p>输入<code>2</code> 退出：然后输入<code>makemigrations message</code></p><p><img src="http://myphoto.mtianyan.cn/blog/180107/0HhH9l2B9G.png?imageslim" alt="mark"></p><p>再输入下面命令生成数据表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">migrate message</span><br></pre></td></tr></table></figure></p><blockquote><p>可以看到上图过程中会告诉我们做了哪些变化，如删除了默认系统生成的主键<code>id</code><br>,变更了<code>name</code>。新增了我们的<code>object_id</code></p></blockquote><p>前往Navicat验证右键设计表：</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/0hADe4ggDG.png?imageslim" alt="mark"></p><p>可以看到<code>object_id</code>已经成为我们的新主键。</p><h4 id="介绍Meta信息："><a href="#介绍Meta信息：" class="headerlink" title="介绍Meta信息："></a>介绍Meta信息：</h4><p>Meta信息中我们可以指定常见的类型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db_table = &quot;user_meassage&quot;</span><br></pre></td></tr></table></figure><p>自定义后生成表，表名会与我们的保持一致。而不会前缀<code>appname</code>如：<code>message_</code></p><blockquote><p>这里因为我们已经生成过了，就不要做验证改变表名了。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ordering = &apos;-object_id&apos;</span><br></pre></td></tr></table></figure><p>ordering指定默认排序字段,如：就会以object_id倒序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">verbose_name_plural = u&quot;用户留言信息&quot;</span><br></pre></td></tr></table></figure><p>verbose_name_plural：复数信息，便于人阅读。否则会在后台显示<code>用户留言信息s</code></p><p>已经学习完毕了<code>orm</code>将数据表映射表。<br>github地址：<a href="https://github.com/mtianyan/DjangoGetStarted" target="_blank" rel="noopener">https://github.com/mtianyan/DjangoGetStarted</a><br>此节结束对应github commit:</p><blockquote><p>留言板数据库orm映射成表完成。内容截止教程3-3结束。</p></blockquote><h2 id="3-4-django-model的增删改"><a href="#3-4-django-model的增删改" class="headerlink" title="3-4 django model的增删改"></a>3-4 django model的增删改</h2><p><strong>github仓库地址：<a href="https://github.com/mtianyan/DjangoGetStarted" target="_blank" rel="noopener">https://github.com/mtianyan/DjangoGetStarted</a></strong></p><ul><li>上小节完成代码对应commit: 留言板数据库orm映射成表完成。内容截止教程3-3结束。</li></ul><p>在<code>message/views.py</code>中:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> UserMessage</span><br></pre></td></tr></table></figure><p>将我们刚才创建的model，import进来。<code>.</code>代表是与当前同级的目录。</p><p>按照下图所示添加一条测试数据。</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/IBga4E2FGh.png?imageslim" alt="mark"></p><p>然后再我们的<code>getform</code>方法内部添加下面代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def getform(request):</span><br><span class="line">    # UserMessage默认的数据管理器objects。</span><br><span class="line">    # 方法all()是将所有数据返回成一个queryset类型(django的内置类型)</span><br><span class="line">    all_message = UserMessage.objects.all()</span><br><span class="line"></span><br><span class="line">    #我们可以对于all_message进行遍历操作</span><br><span class="line">    for message in all_message:</span><br><span class="line">        # 每个message实际就是一个UserMessage对象（这时我们就可以使用对象的相关方法）。</span><br><span class="line">        print message.name</span><br><span class="line"></span><br><span class="line">    return render(request, &apos;message_form.html&apos;)</span><br></pre></td></tr></table></figure></p><p>调试过程：</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/FGChlB50k7.png?imageslim" alt="mark"></p><ul><li><p>点击上图小红框位置，打上断点。</p></li><li><p>点击Run -&gt; debug后：在浏览器里打开：<code>http://127.0.0.1:8000/form/</code></p></li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180107/mAebKF06m9.png?imageslim" alt="mark"></p><ul><li>弹出上图代表已进入断点。</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180107/0cb6GGiGDa.png?imageslim" alt="mark"></p><ul><li><p>此时鼠标左键点击：all_message.可以看到这是一个<code>{QuerySet}类型的对象，里面存放着[&lt;UserMessage: UserMessage object&gt;]</code></p></li><li><p>按<code>f6</code>使运行到下一步。此时下方的值窗口内可以看到message的值。说明我们成功取到了数据库的值。</p></li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180107/hJgD3AC3c2.png?imageslim" alt="mark"></p><h3 id="filter取出指定要求值"><a href="#filter取出指定要求值" class="headerlink" title="filter取出指定要求值"></a>filter取出指定要求值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">all_message = UserMessage.objects.filter(name=&apos; mtianyan&apos;, address=&apos;西安&apos;)</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180107/Eal2Ldj6e8.png?imageslim" alt="mark"></p><p>按照上面调试过程重新调试可以看到我们同样取出了值。</p><p>小练习：将名字改为与自己数据库存放值不同的。查看结果。</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/IChf8L7ecd.png?imageslim" alt="mark"></p><blockquote><p>变成了空列表，说明一切正确。</p></blockquote><h3 id="将数据存入数据库"><a href="#将数据存入数据库" class="headerlink" title="将数据存入数据库"></a>将数据存入数据库</h3><p>了解：django/db/models/base.py 源码中提供save方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(self, force_insert=False, force_update=False, using=None,</span></span></span><br><span class="line"><span class="function"><span class="params">             update_fields=None)</span>:</span></span><br></pre></td></tr></table></figure></p><p>getform方法中添加代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 存储部分</span></span><br><span class="line"></span><br><span class="line">   <span class="comment"># 首先实例化一个对象</span></span><br><span class="line">   user_message = UserMessage()</span><br><span class="line"></span><br><span class="line">   <span class="comment"># 为对象增加属性</span></span><br><span class="line">   user_message.name = <span class="string">"mtianyan2"</span></span><br><span class="line">   user_message.message = <span class="string">"blog.mtianyan.cn"</span></span><br><span class="line">   user_message.address = <span class="string">"西安"</span></span><br><span class="line">   user_message.email = <span class="string">"1147727180@qq.com"</span></span><br><span class="line">   user_message.object_id = <span class="string">"efgh"</span></span><br><span class="line"></span><br><span class="line">   <span class="comment"># 调用save方法进行保存</span></span><br><span class="line">   user_message.save()</span><br></pre></td></tr></table></figure><ul><li>打上断点：如下图。</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180107/3b7aeEg0KE.png?imageslim" alt="mark"></p><ul><li>一直惦记f6单步调试，直到如下图：蓝色到<code>return</code>语句</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180107/m2fF7j38dC.png?imageslim" alt="mark"></p><p>可以在下方值窗口查看到值</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/bg6ICDcI9I.png?imageslim" alt="mark"></p><h3 id="Navicat进行验证"><a href="#Navicat进行验证" class="headerlink" title="Navicat进行验证"></a>Navicat进行验证</h3><blockquote><p>可以看到成功的添加了数据<code>mtianyan2</code></p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180107/DiBKcaJd8A.png?imageslim" alt="mark"></p><h3 id="如何从html的提交中取到数据并保存进数据库"><a href="#如何从html的提交中取到数据并保存进数据库" class="headerlink" title="如何从html的提交中取到数据并保存进数据库"></a>如何从html的提交中取到数据并保存进数据库</h3><p>templates/message_form.html：</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/glha3bHaC8.png?imageslim" alt="mark"></p><blockquote><p>method是post。action就是指向我们在urls.py中配置的<code>/form/</code><br><strong>前面必须加斜杠指根路径下form</strong><br>里面的input会自动把值传递给后台：这时我们就可以在getform中取到刚才传递过来的值。</p></blockquote><p>运行项目：然后输入需要填写的值。点击提交：出现403错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Forbidden (403)</span><br><span class="line">CSRF verification failed. Request aborted.</span><br></pre></td></tr></table></figure><blockquote><p>根据提示：我们的页面没有进行crsf的验证，这时django的安全机制，不允许任意form都往后台提交。</p></blockquote><p><strong>知识点：所以我们需要在html页面中加入csrf_token</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% csrf_token %&#125;</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180107/chCamk6JDk.png?imageslim" alt="mark"></p><p>原有那行删除掉。打上断点</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/3cCBcF96eC.png?imageslim" alt="mark"></p><p>刷新页面并提交。这时候在值窗口可以看到request对象下的POST中存放着我们提交的数据。内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;QueryDict: &#123;u&apos;message&apos;: [u&apos;\u54c8\u54c8&apos;], u&apos;address&apos;: [</span><br><span class="line">u&apos;\u897f\u5b89\u5e02&apos;], u&apos;csrfmiddlewaretoken&apos;: [</span><br><span class="line">u&apos;uIYSMOTWPJBPOPucRwd3uDaWtCzeEaem&apos;], u&apos;name&apos;: [</span><br><span class="line">u&apos;\u5929\u6daf\u660e\u6708\u7b19&apos;], u&apos;email&apos;: [u&apos;1147727180@qq.com&apos;]&#125;&gt;</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180107/3BL02H2ljG.png?imageslim" alt="mark"></p><blockquote><p>数据以dict：key-value 形式存储 key是由如下图html中的name所决定对应的。</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180107/c2lIdeH2A1.png?imageslim" alt="mark"></p><h3 id="数据库新增。"><a href="#数据库新增。" class="headerlink" title="数据库新增。"></a>数据库新增。</h3><p><code>request.POST</code>中数据取出，存入<code>user_message</code>对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># html表单部分</span></span><br><span class="line"></span><br><span class="line">   <span class="comment"># 此处对应html中的method="post"，表示我们只处理post请求</span></span><br><span class="line">   <span class="keyword">if</span> request.method == <span class="string">"POST"</span>:</span><br><span class="line">       <span class="comment"># 就是取字典里key对应value值而已。取name，取不到默认空</span></span><br><span class="line">       name = request.POST.get(<span class="string">'name'</span>, <span class="string">''</span>)</span><br><span class="line">       message = request.POST.get(<span class="string">'message'</span>, <span class="string">''</span>)</span><br><span class="line">       address = request.POST.get(<span class="string">'address'</span>, <span class="string">''</span>)</span><br><span class="line">       email = request.POST.get(<span class="string">'email'</span>, <span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">       <span class="comment"># 实例化对象</span></span><br><span class="line">       user_message = UserMessage()</span><br><span class="line"></span><br><span class="line">       <span class="comment"># 将html的值传入我们实例化的对象.</span></span><br><span class="line">       user_message.name = name</span><br><span class="line">       user_message.message = message</span><br><span class="line">       user_message.address = address</span><br><span class="line">       user_message.email = email</span><br><span class="line">       user_message.object_id = <span class="string">"ijkl"</span></span><br><span class="line"></span><br><span class="line">       <span class="comment"># 调用save方法进行保存</span></span><br><span class="line">       user_message.save()</span><br></pre></td></tr></table></figure><ul><li>打断点在下图位置：</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180107/gblC5dg219.png?imageslim" alt="mark"></p><ul><li>进入调试：点击点击method：是get请求。因为我们并没有按提交按钮，而是get这个网页</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180107/heblbcAf4h.png?imageslim" alt="mark"></p><ul><li>点击f8继续运行我们的项目 浏览器中填写表单内容点提交。</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180107/33ECK331eE.png?imageslim" alt="mark"></p><blockquote><p>因为这次是表单提交，已经变成了post方式。按<code>f6</code>进行单步调试。</p></blockquote><p>一直单步到如下图蓝色</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/4Ck700a9Ea.png?imageslim" alt="mark"></p><p>这时候值浏览窗口可以看到</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/i22jKb99Bh.png?imageslim" alt="mark"></p><blockquote><p>检查我们的user_message对象的属性是否已经全部添加进去，</p></blockquote><p>使用f8 继续项目并前往Navicat验证</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/0mJgFKbi9k.png?imageslim" alt="mark"></p><blockquote><p>可以看到我们的数据库中已经新增，标志着我们已经成功存入数据。</p></blockquote><h3 id="删除数据。"><a href="#删除数据。" class="headerlink" title="删除数据。"></a>删除数据。</h3><p>对于查询到的数据做删除：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法2 :filter取出指定条件值，逗号代表and 必须同时满足两个条件才返回。</span></span><br><span class="line">all_message = UserMessage.objects.filter(name=<span class="string">'mtianyan'</span>, address=<span class="string">'西安'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我的数据库里保存着可以匹配到该条数据的一行。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除操作：使用delete方法删除all_message</span></span><br><span class="line"></span><br><span class="line">all_message.delete()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> message <span class="keyword">in</span> all_message:</span><br><span class="line">        <span class="comment"># 删除取到的message对象</span></span><br><span class="line">        message.detele()</span><br><span class="line">        <span class="comment"># print message.name</span></span><br></pre></td></tr></table></figure><p>点击run并访问：<a href="http://127.0.0.1:8000/form/" target="_blank" rel="noopener">http://127.0.0.1:8000/form/</a><br>进入Navicat进行验证。</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/BamdmLI1Ec.png?imageslim" alt="mark"></p><blockquote><p>可以看到我们的那条mtianyan + 西安的数据已经被删除。</p></blockquote><p><strong>至此：我们已经学会了新增，删除，查询。</strong></p><p>本节结束github对应commit：</p><blockquote><p>django model的增删改数据库。本次内容截止教程3-4。 </p></blockquote><h2 id="3-5-django-url-templates配置"><a href="#3-5-django-url-templates配置" class="headerlink" title="3-5 django url templates配置"></a>3-5 django url templates配置</h2><blockquote><p>项目Github地址：<a href="https://github.com/mtianyan/DjangoGetStarted" target="_blank" rel="noopener">https://github.com/mtianyan/DjangoGetStarted</a><br>本节开始对应对应Github的commit：django model的增删改数据库。本次内容截止教程3-4。</p></blockquote><p>本节将介绍url的配置，以及如何将数据库数据填充回前台html页面。</p><p>情景：只允许用户修改<code>mtianyan</code>，如果没有就添加，如果有就回填使用户可以修改。</p><h3 id="取出数据"><a href="#取出数据" class="headerlink" title="取出数据"></a>取出数据</h3><p>message/views.py中的getform方法中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">message = <span class="keyword">None</span></span><br><span class="line">all_message = UserMessage.objects.filter(name=<span class="string">'mtianyan'</span>, address=<span class="string">'西安'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># if 判断是否存在数据</span></span><br><span class="line"><span class="keyword">if</span> all_message:</span><br><span class="line">    <span class="comment"># all_message是一个list，可以使用切片。</span></span><br><span class="line">    message = all_message[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><blockquote><p>这里注意把前几节写的删除掉</p></blockquote><h3 id="将数据回填至html中"><a href="#将数据回填至html中" class="headerlink" title="将数据回填至html中"></a>将数据回填至html中</h3><h4 id="修改return-render"><a href="#修改return-render" class="headerlink" title="修改return render"></a>修改return render</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">return render(request, &apos;message_form.html&apos;,&#123;</span><br><span class="line">        &quot;my_message&quot; : message</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>这里前面的”my_meassage”是我们可以自行命名的。会有一个<code>my_message</code>对象随着返回前端页面。</p></blockquote><h4 id="在前端页面中放入值。"><a href="#在前端页面中放入值。" class="headerlink" title="在前端页面中放入值。"></a>在前端页面中放入值。</h4><p>为input系列标签添加<code>value</code>: 使用<code>my_message.name</code>取到我们传递过来的<code>my_message</code>对象的属性值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input id=&quot;name&quot; type=&quot;text&quot; name=&quot;name&quot;  </span><br><span class="line">value=&quot;&#123;&#123; my_message.name &#125;&#125;&quot; class=&quot;error&quot; placeholder=&quot;请输入您的姓名&quot;/&gt;</span><br></pre></td></tr></table></figure><blockquote><p>请自行完成姓名，邮箱，联系地址三个<code>input</code>标签。</p></blockquote><p>为<code>textarea</code>标签添加值</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/F60Dl7jf93.png?imageslim" alt="mark"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;textarea id=&quot;message&quot; name=&quot;message&quot;  </span><br><span class="line">placeholder=&quot;请输入你的建议&quot;&gt;&#123;&#123; my_message.message &#125;&#125;&lt;/textarea&gt;</span><br></pre></td></tr></table></figure><p>运行项目，访问：<a href="http://127.0.0.1:8000/form/" target="_blank" rel="noopener">http://127.0.0.1:8000/form/</a></p><p><img src="http://myphoto.mtianyan.cn/blog/180107/27BFK0ieIL.png?imageslim" alt="mark"></p><blockquote><p>成功！！我们已经将后台数据库数据成功展示到前台。</p></blockquote><h3 id="template模板渲染中的一些用法。"><a href="#template模板渲染中的一些用法。" class="headerlink" title="template模板渲染中的一些用法。"></a>template模板渲染中的一些用法。</h3><blockquote><p>在我们的template模板中也就是form.html中，不允许我们写Python的语法，<br>它提供了一套自己的内建标签。</p></blockquote><p><a href="https://docs.djangoproject.com/en/2.0/ref/templates/builtins/" target="_blank" rel="noopener">官方文档中template内建标签用法传送门</a></p><h4 id="常用的几种模板标签介绍："><a href="#常用的几种模板标签介绍：" class="headerlink" title="常用的几种模板标签介绍："></a>常用的几种模板标签介绍：</h4><h5 id="if-else"><a href="#if-else" class="headerlink" title="if - else"></a><code>if - else</code></h5><p>官方提供模板如下：</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/mhJlLmCiLh.png?imageslim" alt="mark"></p><p>个人实践：</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/Ahch4LBcKd.png?imageslim" alt="mark"></p><p>满足if运行结果：</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/kBb2Ak6ec0.png?imageslim" alt="mark"></p><p>不满足if：如改为<code>my_message.name == &quot;mtianyan1&quot;</code>运行结果：</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/5c6fK8mDAK.png?imageslim" alt="mark"></p><h5 id="ifequal-amp-ifnotequal"><a href="#ifequal-amp-ifnotequal" class="headerlink" title="ifequal &amp; ifnotequal"></a><code>ifequal</code> &amp; <code>ifnotequal</code></h5><p><img src="http://myphoto.mtianyan.cn/blog/180107/he6fBLk1le.png?imageslim" alt="mark"></p><p>官方文档解释：<code>ifequal a b</code> 相当于<code>f a == b</code>.<code>ifnotequal</code>则相当于<code>if a != b</code></p><p>个人实践：<br><img src="http://myphoto.mtianyan.cn/blog/180107/ihKmHmCLcD.png?imageslim" alt="mark"></p><p>结果为：未找到中文昵称</p><h5 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h5><p><img src="http://myphoto.mtianyan.cn/blog/180107/DccKL0EB4C.png?imageslim" alt="mark"></p><p>官方文档解释：其实就是切片操作。从头开始切到第n个。</p><p>个人实践：</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/m8jJE8KEae.png?imageslim" alt="mark"></p><blockquote><p>本来<code>mtianyan</code> 与 <code>mtianyan1</code>是不同的，但是切片后前八位相同。<br>运行结果显示 ：<code>对应中文昵称：天涯明月笙</code></p></blockquote><h3 id="URl的别名设置技巧"><a href="#URl的别名设置技巧" class="headerlink" title="URl的别名设置技巧"></a>URl的别名设置技巧</h3><p>DjangoGetStarted/urls.py：</p><p>为<code>r&#39;^form/$&#39;</code>添加别名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url(<span class="string">r'^form/$'</span>, getform, name = <span class="string">"form_new"</span>)</span><br></pre></td></tr></table></figure><p>前往html中修改action地址为下面所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&quot;&#123;% url &quot;form_new&quot; %&#125;&quot; method=&quot;post&quot; class=&quot;smart-green&quot;&gt;</span><br></pre></td></tr></table></figure><p>这时我们如果改动urls.py中的<code>r&#39;^form/$&#39;</code>不需要再修改前端代码中值。</p><h3 id="url先后顺序问题"><a href="#url先后顺序问题" class="headerlink" title="url先后顺序问题"></a>url先后顺序问题</h3><p><strong>注意</strong>url匹配规则中一定不要忘记<code>/$</code>符号代表以<code>form/</code>结束的才会有效。不会向后继续匹配。比如没有<code>/$</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url(r&apos;^form&apos;, getform, name=&quot;form_new&quot;)</span><br></pre></td></tr></table></figure><p>这时我们进入浏览器访问时输入<code>http://127.0.0.1:8000/formemmm</code>都可以被响应。</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/aehl7G2K20.png?imageslim" alt="mark"></p><p>特别是如果底下还配置有被这个规则包含的条目，会产生被写在更靠前的拦截住得不到正确处理的Bug。</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/jm5AJLLmGd.png?imageslim" alt="mark"></p><blockquote><p>上图我们是想要让formtest响应admin.site.urls。但是会被form提前拦截住。</p></blockquote><p>所以我们一定要注意加上<code>/$</code>符号。</p><p>至此我们完成了留言板项目：学习到了Django必备的基础知识。<br>下一章我们将开始我们的进阶学习：开发在线教育平台网站。</p><p>本章结束：</p><blockquote><p>对应Commit: 留言板项目学习完成，本次内容截止教程3-5。完结，撒花。<br>项目Github地址：<a href="https://github.com/mtianyan/DjangoGetStarted" target="_blank" rel="noopener">https://github.com/mtianyan/DjangoGetStarted</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;小项目不扫何以扫天下 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;note success&quot;&gt;&lt;p&gt;使用Django+Xadmin打造在线教育平台&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第三章：通过留言板功能回顾django基础知识&lt;br&gt;通过做一个小留言板，学习django基础知识&lt;br&gt;教程仓库地址1: &lt;a href=&quot;https://github.com/mtianyan/DjangoGetStarted&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/mtianyan/DjangoGetStarted&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Django+Xadmin打造在线教育平台" scheme="http://blog.mtianyan.cn/categories/Django-Xadmin%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E5%B9%B3%E5%8F%B0/"/>
    
    
      <category term="Python" scheme="http://blog.mtianyan.cn/tags/Python/"/>
    
      <category term="Django" scheme="http://blog.mtianyan.cn/tags/Django/"/>
    
      <category term="在线教育平台" scheme="http://blog.mtianyan.cn/tags/%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E5%B9%B3%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>强力Django+杀手级Xadmin打造在线教育平台(二)</title>
    <link href="http://blog.mtianyan.cn/post/d2647be6.html"/>
    <id>http://blog.mtianyan.cn/post/d2647be6.html</id>
    <published>2018-01-06T20:08:18.000Z</published>
    <updated>2018-02-02T12:40:13.960Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>老话总是没错的，工欲善其事，苟…</p></blockquote><div class="note success"><p>使用Django+Xadmin打造在线教育平台</p><ul><li>第二章：windows下搭建开发环境<br>教你安装pycharm,mysql,navicat,python相关环境。<br>教程仓库地址1: <a href="https://github.com/mtianyan/DjangoGetStarted" target="_blank" rel="noopener">https://github.com/mtianyan/DjangoGetStarted</a></li></ul></div><a id="more"></a><h1 id="windows下搭建开发环境"><a href="#windows下搭建开发环境" class="headerlink" title="windows下搭建开发环境"></a>windows下搭建开发环境</h1><h2 id="2-1-pycharm-mysql-Navicat安装。"><a href="#2-1-pycharm-mysql-Navicat安装。" class="headerlink" title="2-1 pycharm,mysql,Navicat安装。"></a>2-1 pycharm,mysql,Navicat安装。</h2><p><strong>环境搭建：</strong></p><blockquote><ul><li>pycharm (我：PyCharm 2017.3.2)</li><li>mysql for windows(mysql-installer-community-5.7.20)</li><li>navicat for mysql(我：Navicat Premium）</li><li>python2.7</li></ul></blockquote><p> <strong>提醒：记住自己设置的mysql密码</strong></p><h3 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h3><p>百度”mysql for windows” 直接在百度软件中心下载即可</p><p><img src="http://myphoto.mtianyan.cn/blog/180106/J808E5JA1i.png?imageslim" alt="mark"></p><p>如果你的电脑跟我电脑一样空，推荐遵循我的：</p><ol><li>点击接受协议</li><li>选择Custom选项。(如果默认选项，会发生必要条件缺失：如我电脑没有VS和py3.4)</li></ol><p><img src="http://myphoto.mtianyan.cn/blog/180106/A7Cb96mEce.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180106/66L7DaJJCK.png?imageslim" alt="mark"></p><ul><li>下图页面点击<code>next</code>会显示我们不满足的条件，<code>back</code>后点击绿色箭头移除。</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180106/8C2KL0HaI4.png?imageslim" alt="mark"></p><ul><li>所有条件都达成，点击<code>Execute</code>，等待安装完成。</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180106/78kgLjJl4F.png?imageslim" alt="mark"></p><blockquote><p>均为绿色代表安装完成。</p></blockquote><ul><li>一直默认选择直到下图页面。设置密码，添加用户(可选)</li></ul><blockquote><p><strong>注意：记住自己设置的mysql密码</strong></p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180106/c8aLD2mdC4.png?imageslim" alt="mark"></p><blockquote><p>之后全部默认下一步。直到安装完成<code>Finish</code></p></blockquote><p>这时Navicat已经可以正常连接了。如果想让<code>mysql</code>命令在cmd下可使用。</p><p><code>C:\Program Files\MySQL\MySQL Server 5.7\bin</code> (自行替换为自己的mysql.exe地址)加入环境变量中。</p><p><img src="http://myphoto.mtianyan.cn/blog/180106/DL51BD687G.png?imageslim" alt="mark"></p><p>通过<code>mysql -uroot -p</code>命令可以进行登入mysql控制台。</p><p><img src="http://myphoto.mtianyan.cn/blog/180106/h1Aa2aJ0G4.png?imageslim" alt="mark"></p><h3 id="Navicat"><a href="#Navicat" class="headerlink" title="Navicat"></a>Navicat</h3><p>安装指南：下一步下一步。</p><p>下载地址：<a href="http://www.navicat.com.cn/download/navicat-for-mysql" target="_blank" rel="noopener">http://www.navicat.com.cn/download/navicat-for-mysql</a></p><p>我的安装目录: <code>C:\software\Navicat Premium 12</code></p><h3 id="PyCharm-2017-3-2"><a href="#PyCharm-2017-3-2" class="headerlink" title="PyCharm 2017.3.2"></a>PyCharm 2017.3.2</h3><p>pycharm官方下载链接：<a href="https://www.jetbrains.com/pycharm/download/#section=windows" target="_blank" rel="noopener">https://www.jetbrains.com/pycharm/download/#section=windows</a></p><p><strong>我们要选择专业版（Professional）</strong>因为只有专业版才能够新建django项目,免费社区版不能。</p><p><strong>为Pycharm添加解释器：</strong></p><p><code>setting</code> - <code>Project Interpreter</code>：</p><p><img src="http://oerdwodsk.bkt.clouddn.com/blog/180103/E72AIkEB07.png?imageslim" alt="mark"></p><p><img src="http://oerdwodsk.bkt.clouddn.com/blog/180103/D3jB3C6A9g.png?imageslim" alt="mark"></p><p>一直定位到 <code>python.exe</code> 点击确认。</p><h3 id="Python2-7安装"><a href="#Python2-7安装" class="headerlink" title="Python2.7安装"></a>Python2.7安装</h3><p>推荐阅读：<strong>Python开发环境搭建指南(Anaconda2,3共存)</strong></p><blockquote><p>推荐选择进阶版本, 方便升级到3.6。</p></blockquote><p><a href="http://blog.mtianyan.cn/post/230a7ad6.html">http://blog.mtianyan.cn/post/230a7ad6.html</a></p><h2 id="2-2-virtualenv安装和配置"><a href="#2-2-virtualenv安装和配置" class="headerlink" title="2-2 virtualenv安装和配置"></a>2-2 virtualenv安装和配置</h2><h3 id="virtualenv介绍"><a href="#virtualenv介绍" class="headerlink" title="virtualenv介绍"></a>virtualenv介绍</h3><blockquote><p>每个应用可能需要各自拥有一套<code>独立</code>的Python运行环境。virtualenv就是用来为一个应用创建一套<code>隔离</code>的Python运行环境。</p></blockquote><p><strong>virtualenv优点：</strong></p><p><img src="http://myphoto.mtianyan.cn/blog/180106/AmbE1564gJ.png?imageslim" alt="mark"></p><p>它是将全局Python解释器进行私有化复制。<br>如果不使用虚拟环境，默认的<code>pip</code>安装都会安装到同一个目录(java是把自己需要的包放到自己项目目录)，不同项目使用起来会产生问题</p><h3 id="安装virtualenv"><a href="#安装virtualenv" class="headerlink" title="安装virtualenv"></a>安装virtualenv</h3><p>进入cmd，（确保自己的pip已经可用）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenv</span><br><span class="line">virtualenv testvir</span><br><span class="line"><span class="comment"># 在当前用户目录(win+r %HOMEPATH%可查看)生成</span></span><br><span class="line">cd %homepath%</span><br><span class="line">cd testvir</span><br><span class="line">cd Scripts</span><br><span class="line">activate.bat <span class="comment">#激活</span></span><br><span class="line">pip list </span><br><span class="line">deactivate.bat</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180106/lCIHhf568m.png?imageslim" alt="mark"></p><p>默认使用<code>virtualenv testvir</code>该命令，会将虚拟环境创建在我们当前用户目录。</p><p><strong>注意：</strong>我的目录在桌面是我的cmder设置的、还请自行<code>cd %homepath%</code>前往自己的目录</p><p>这样直接使用步骤有写过于繁琐。所以我们使用<code>virtualenvwrapper</code></p><h3 id="virtualenvwrapper安装"><a href="#virtualenvwrapper安装" class="headerlink" title="virtualenvwrapper安装"></a>virtualenvwrapper安装</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenvwrapper-win</span><br><span class="line">pip install virtualenvwrapper(Linux)</span><br></pre></td></tr></table></figure><ul><li>创建虚拟环境</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv DjangoTest</span><br></pre></td></tr></table></figure><p>会创建在<code>C:\Users\mtian\Envs</code>当前用户目录下的Envs目录。</p><p>修改<code>mkvirtualenv</code>创建的目录：新增环境变量<code>WORKON_HOME</code></p><p><img src="http://myphoto.mtianyan.cn/blog/180106/A2im5He9fK.png?imageslim" alt="mark"></p><ul><li><p>退出激活状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure></li><li><p>知道有哪些虚拟环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">workon</span><br></pre></td></tr></table></figure></li><li><p>直接进入虚拟环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">workon DjangoTest</span><br></pre></td></tr></table></figure></li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180107/1cJK2F43I0.png?imageslim" alt="mark"></p><p><strong>注意</strong>前面的<code>(DjangoTest)</code>代表进入了虚拟环境。</p><p>执行<code>workon</code>命令之后，执行<code>pip install django==1.9.8</code>安装。</p><h2 id="2-3-Pycharm和Navicat的简单使用"><a href="#2-3-Pycharm和Navicat的简单使用" class="headerlink" title="2-3 Pycharm和Navicat的简单使用"></a>2-3 Pycharm和Navicat的简单使用</h2><h3 id="pycharm简单使用："><a href="#pycharm简单使用：" class="headerlink" title="pycharm简单使用："></a>pycharm简单使用：</h3><p><code>Setting -&gt; reopen</code>取消默认打开上一次项目</p><h4 id="新建项目并验证成功运行"><a href="#新建项目并验证成功运行" class="headerlink" title="新建项目并验证成功运行"></a>新建项目并验证成功运行</h4><ul><li>如何新建django项目：</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180106/d5a87Gid1f.png?imageslim" alt="mark"></p><blockquote><p>选择好自己的项目的解释器为我们新建的虚拟环境。</p></blockquote><p>新建<code>project</code>-&gt;<code>djangotestProj</code> 。别忘了为我们的虚拟环境安装<code>Django</code></p><ul><li>检查django环境是否安装好。<code>interpreter</code> </li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180106/6CjH0H1l5c.png?imageslim" alt="mark"></p><ul><li>点击导航栏的<code>run</code>可以直接运行我们的django项目</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180106/eKh4AC1mhB.png?imageslim" alt="mark"></p><blockquote><p>上图说明我们的django已经安装并且可以正常运行。</p></blockquote><p>点击浏览器打开<code>http://127.0.0.1:8000/</code>进行验证。</p><p><img src="http://myphoto.mtianyan.cn/blog/180106/0cFDmJdChd.png?imageslim" alt="mark"></p><p>出现上画面代表我们<strong>大功告成</strong></p><h4 id="设置eclipse快捷键-keymap"><a href="#设置eclipse快捷键-keymap" class="headerlink" title="设置eclipse快捷键 - keymap"></a>设置eclipse快捷键 - keymap</h4><p>选择<code>setting</code>搜索<code>keymap</code>设置<code>eclipse</code>快捷键</p><blockquote><p>比如 <code>ctrl + H</code> 全局搜索</p></blockquote><h4 id="Run-edit配置修改"><a href="#Run-edit配置修改" class="headerlink" title="Run edit配置修改"></a>Run edit配置修改</h4><p><img src="http://myphoto.mtianyan.cn/blog/180106/ifi4mGE7C9.png?imageslim" alt="mark"></p><p>点击上图中<code>run edit</code> 可对Django运行时的一些设置进行修改。</p><p>比如修改host为<code>0.0.0.0</code>，然后就可以设置监听本机ip。然后点击<code>run</code></p><p>进入<code>cmd</code>下输入<code>ipconfig</code>查询自己的ip</p><p><img src="http://myphoto.mtianyan.cn/blog/180106/6lCEGEAJjL.png?imageslim" alt="mark"></p><blockquote><p>例如我的是<code>192.168.0.4</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.168.0.4:8000/ 来访问。</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180106/7gBl6DHb6d.png?imageslim" alt="mark"></p><h4 id="目录颜色不同的原因"><a href="#目录颜色不同的原因" class="headerlink" title="目录颜色不同的原因"></a>目录颜色不同的原因</h4><p><img src="http://myphoto.mtianyan.cn/blog/180106/JAJCHgBflc.png?imageslim" alt="mark"></p><p>可以看到不同的目录颜色不同。这是我们可以进行设置的，为了可以做到智能提示。</p><p><img src="http://myphoto.mtianyan.cn/blog/180106/E2GFBe08Gb.png?imageslim" alt="mark"></p><p>右键可以将<code>template</code>目录<code>unmark</code></p><p><img src="http://myphoto.mtianyan.cn/blog/180106/3BicA3E8aj.png?imageslim" alt="mark"></p><p>可以看到上图目录是灰色的。但是我们<code>右键mark</code>为<code>source Root</code>目录，会变为蓝色。</p><p><img src="http://myphoto.mtianyan.cn/blog/180106/mLGD68DB8H.png?imageslim" alt="mark"></p><blockquote><p>这意味着我们在<code>import</code>时pycharm会根据设置智能提示。<br>如果不mark可能会出现很多我们在pycharm中报红色，<br>但是cmd确可以运行的情况。</p></blockquote><h3 id="navicat基本使用"><a href="#navicat基本使用" class="headerlink" title="navicat基本使用"></a>navicat基本使用</h3><h3 id="新建连接"><a href="#新建连接" class="headerlink" title="新建连接"></a>新建连接</h3><p><img src="http://myphoto.mtianyan.cn/blog/180106/D7FEGgIiC6.png?imageslim" alt="mark"></p><blockquote><p>点击新建一个mysql的连接。</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180106/hAB7KkaB29.png?imageslim" alt="mark"></p><blockquote><p>连接名自行设置，密码填自己安装mysql时设置的密码。</p></blockquote><h3 id="右键新建数据库"><a href="#右键新建数据库" class="headerlink" title="右键新建数据库"></a>右键新建数据库</h3><p><img src="http://myphoto.mtianyan.cn/blog/180106/maL6ccLG90.png?imageslim" alt="mark"></p><blockquote><p>数据库名自行设置，<code>utf-8</code> <code>utf_general_ci</code><br><strong>注意：这里请与图中选择一致。否则保存中文可能出错</strong></p></blockquote><h3 id="新建数据表"><a href="#新建数据表" class="headerlink" title="新建数据表"></a>新建数据表</h3><p>双击数据库<code>testdjango</code>使他变绿，然后选中表，然后右键新建表。或使用右侧<code>新建表</code>按钮</p><p><img src="http://myphoto.mtianyan.cn/blog/180106/Kd0cAeCj1H.png?imageslim" alt="mark"></p><p>输入必要的字段然后使用<code>ctrl + s</code> 进行保存并输入表名。</p><h3 id="增加数据"><a href="#增加数据" class="headerlink" title="增加数据"></a>增加数据</h3><blockquote><p>双击表，可以展示我们的数据，这时候我们可以自行修改值。<br>点击左下角可以新增更多行。并且状态栏会显示一些sql语句信息</p></blockquote><p><img src="http://myphoto.mtianyan.cn/blog/180106/GFCgBHH2fC.png?imageslim" alt="mark"></p><h3 id="设计表"><a href="#设计表" class="headerlink" title="设计表"></a>设计表</h3><p>右键设计表：我们可以添加字段</p><p><img src="http://myphoto.mtianyan.cn/blog/180106/ajiDfHmBim.png?imageslim" alt="mark"></p><h3 id="Sql语句查询"><a href="#Sql语句查询" class="headerlink" title="Sql语句查询"></a>Sql语句查询</h3><p>点击查询，新建查询。我们可以输入Sql语句进行查询。</p><p><img src="http://myphoto.mtianyan.cn/blog/180106/1b0h7dh3AC.png?imageslim" alt="mark"></p><h3 id="表的复制粘贴与数据库传输。数据库导入导出。"><a href="#表的复制粘贴与数据库传输。数据库导入导出。" class="headerlink" title="表的复制粘贴与数据库传输。数据库导入导出。"></a>表的复制粘贴与数据库传输。数据库导入导出。</h3><blockquote><p>Navicat支持我们把不同数据库的表之间的复制粘贴操作。<br>支持数据传输：点击工具数据传输</p></blockquote><p>导出：在数据库上右键我们可以<code>转储SQL文件</code>: 可以选择只转存结构。或连带数据一起。<br>导入：右键点击运行SQL文件。<br>对于表的操作：删除，清空等，在点击表的右键菜单里。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;老话总是没错的，工欲善其事，苟…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;note success&quot;&gt;&lt;p&gt;使用Django+Xadmin打造在线教育平台&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第二章：windows下搭建开发环境&lt;br&gt;教你安装pycharm,mysql,navicat,python相关环境。&lt;br&gt;教程仓库地址1: &lt;a href=&quot;https://github.com/mtianyan/DjangoGetStarted&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/mtianyan/DjangoGetStarted&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Django+Xadmin打造在线教育平台" scheme="http://blog.mtianyan.cn/categories/Django-Xadmin%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E5%B9%B3%E5%8F%B0/"/>
    
    
      <category term="Python" scheme="http://blog.mtianyan.cn/tags/Python/"/>
    
      <category term="Django" scheme="http://blog.mtianyan.cn/tags/Django/"/>
    
      <category term="在线教育平台" scheme="http://blog.mtianyan.cn/tags/%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E5%B9%B3%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>强力Django+杀手级Xadmin打造在线教育平台(一)</title>
    <link href="http://blog.mtianyan.cn/post/e4b77eed.html"/>
    <id>http://blog.mtianyan.cn/post/e4b77eed.html</id>
    <published>2018-01-06T19:08:18.000Z</published>
    <updated>2018-02-02T12:40:13.960Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>请开始你的表演是做一个项目的第一步</p></blockquote><div class="note "><p>使用Django+Xadmin打造在线教育平台</p><ul><li>第一章：项目介绍和课程介绍</li></ul><p>教程仓库地址1:<a href="https://github.com/mtianyan/DjangoGetStarted" target="_blank" rel="noopener">https://github.com/mtianyan/DjangoGetStarted</a></p></div><a id="more"></a><h1 id="项目演示和课程介绍"><a href="#项目演示和课程介绍" class="headerlink" title="项目演示和课程介绍"></a>项目演示和课程介绍</h1><p>Django是一个Python中Web开发的主流框架，被许多大型公司使用，如Google，豆瓣，YouTube，知乎，instagram:</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/a5h8mfid18.png?imageslim" alt="mark"></p><p>创业公司喜欢的web框架。严格按照互联网公司开发流程，写出优雅简练的代码。<br>循序渐进，细致入微。独立完成完整项目。学习完课程，找份Python web开发工作不在话下。</p><p>教程线上已部署地址: <a href="http://mxonline.mtianyan.cn" target="_blank" rel="noopener">http://mxonline.mtianyan.cn</a></p><p><strong>系统介绍：</strong></p><ul><li>系统具有完整的用户登录注册以及找回密码功能，拥有完整个人中心。</li><li>个人中心: 修改头像，修改密码，修改邮箱，可以看到我的课程以及我的收藏。可以删除收藏，我的消息。</li><li>导航栏: 公开课，授课讲师，授课机构，全局搜索。</li><li>点击<code>公开课</code>–&gt; 课程列表，排序-搜索。热门课程推荐，课程的分页。</li><li>点击<code>课程</code>–&gt; 课程详情页中对课程进行收藏，取消收藏。富文本展示课程内容。</li><li>点击<code>开始学习</code>–&gt; 课程的章节信息，课程的评论信息。课程资源的下载链接。</li><li>点击<code>授课讲师</code>–&gt;授课讲师列表页，对讲师进行人气排序以及分页，右边有讲师排行榜。</li><li>点击<code>讲师的详情页面</code>–&gt; 对讲师进行收藏和分享，以及讲师的全部课程。</li><li>导航栏: 授课机构有分页，排序筛选功能。</li><li>机构列表页右侧有快速提交我要学习的表单。</li><li>点击<code>机构</code>–&gt; 左侧：机构首页,机构课程，机构介绍，机构讲师。</li><li>后台管理系统可以<code>切换主题</code>。左侧每一个功能都有列表显示, 增删改查，筛选功能。</li><li>课程列表页可以对不同字段进行排序。选择多条记录进行删除操作。</li><li>课程列表页：过滤器-&gt;选择字段范围等,搜索,导出csv，xml，json。</li><li>课程新增页面上传图片，富文本的编辑。时间选择，添加章节，添加课程资源。</li><li>日志记录：记录后台人员的操作</li></ul><p>学完后还可以将本网站改造成<code>电商网站</code>,<code>在线旅游</code>等其他网站</p><p><img src="http://myphoto.mtianyan.cn/blog/180107/2A76h7im9k.png?imageslim" alt="mark"></p><h2 id="开发环境搭建任务"><a href="#开发环境搭建任务" class="headerlink" title="开发环境搭建任务"></a>开发环境搭建任务</h2><p>windows下通过<code>pycharm</code>和<code>virtualenv</code>搭建开发环境</p><h2 id="django基础知识回顾任务"><a href="#django基础知识回顾任务" class="headerlink" title="django基础知识回顾任务"></a>django基础知识回顾任务</h2><p>照顾基础薄弱同学: 通过留言板功能回顾django基础知识。</p><p><img src="http://myphoto.mtianyan.cn/blog/180106/c91fA7Lb5e.png?imageslim" alt="mark"></p><h2 id="数据库设计和xadmin搭建后台管理系统任务"><a href="#数据库设计和xadmin搭建后台管理系统任务" class="headerlink" title="数据库设计和xadmin搭建后台管理系统任务"></a>数据库设计和xadmin搭建后台管理系统任务</h2><p>通过业务分析设计<code>django</code>的每个<code>app</code>，设计<code>app</code>下的<code>model</code>。设计<code>外键关系</code>，通过django的<code>migrate</code>设计生成数据表。</p><p>然后将这些<code>model</code>注册到<code>xadmin</code>当中。为每个model配置<code>搜索</code>,<code>过滤字段</code>，以及<code>列表页的显示字段</code>。配置xadmin的<code>主题选择</code>功能。</p><p><img src="http://upload-images.jianshu.io/upload_images/1779926-5e9910e92bdef649.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="后台设计工作"></p><h2 id="系统功能模块实现任务"><a href="#系统功能模块实现任务" class="headerlink" title="系统功能模块实现任务"></a>系统功能模块实现任务</h2><p><strong>实现所有后台功能 &amp; 面试中经常被提及的web开发知识。</strong></p><p><strong>几乎所有的django常用模块：</strong></p><ul><li><code>setting</code>配置</li><li><code>url</code>配置</li><li><code>view</code>书写</li><li><code>model</code>设计</li><li><code>form</code>和<code>modelform</code>的使用</li><li><code>templates</code>模板的使用</li><li><code>django</code>常用的内置函数</li></ul><h2 id="web系统知识以及网络安全任务"><a href="#web系统知识以及网络安全任务" class="headerlink" title="web系统知识以及网络安全任务"></a>web系统知识以及网络安全任务</h2><p><strong>防止一些攻击问题：</strong></p><ul><li>sql注入</li><li>xss攻击</li><li>crsf攻击</li></ul><p>这些攻击的原理以及防护措施</p><h2 id="xadmin扩展知识"><a href="#xadmin扩展知识" class="headerlink" title="xadmin扩展知识"></a>xadmin扩展知识</h2><p><strong>掌握更多可定制功能:</strong></p><ul><li>权限管理</li><li>权限配置</li><li>权限，用户，组之间的关系。</li><li>xadmin常用插件</li><li>如何自定义xadmin插件</li><li>xadmin的富文本编辑功能</li><li>xadmin的excel导入功能。</li></ul><p>还会用到一些开源的django开发库。</p><p><img src="http://myphoto.mtianyan.cn/blog/180106/eGhG2Kk51D.png?imageslim" alt="mark"></p><p>不管是想全面学习Django还是想做一个线上教育平台都可以满足要求。学习完Django,我们对于学习其他框架和通过Django搭建我们自己的系统，都会成为很简单的事情。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;请开始你的表演是做一个项目的第一步&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;note &quot;&gt;&lt;p&gt;使用Django+Xadmin打造在线教育平台&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一章：项目介绍和课程介绍&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;教程仓库地址1:&lt;a href=&quot;https://github.com/mtianyan/DjangoGetStarted&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/mtianyan/DjangoGetStarted&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Django+Xadmin打造在线教育平台" scheme="http://blog.mtianyan.cn/categories/Django-Xadmin%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E5%B9%B3%E5%8F%B0/"/>
    
    
      <category term="Python" scheme="http://blog.mtianyan.cn/tags/Python/"/>
    
      <category term="Django" scheme="http://blog.mtianyan.cn/tags/Django/"/>
    
      <category term="在线教育平台" scheme="http://blog.mtianyan.cn/tags/%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E5%B9%B3%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>Python文件处理-专题笔记</title>
    <link href="http://blog.mtianyan.cn/post/deaf66c8.html"/>
    <id>http://blog.mtianyan.cn/post/deaf66c8.html</id>
    <published>2018-01-05T15:02:40.000Z</published>
    <updated>2018-02-02T12:40:13.956Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>走近Linux之走近文件 </p></blockquote><div class="note "><p> 任何语言都离不开对文件的操作，Python语言是如何来操作和管理文件的。掌握文件的基本概念、基本操作，了解文件属性、 linux 系统的文件管理机制及os模块对文件和目录的处理等相关内容。</p><ul><li>[√]慕课网Meshare_huang老师：Python文件处理</li></ul></div><a id="more"></a><p><img src="http://myphoto.mtianyan.cn/blog/180105/ja9K6H3IF2.png?imageslim" alt="mark"></p><h1 id="文件简介"><a href="#文件简介" class="headerlink" title="文件简介"></a>文件简介</h1><p>Python的文件处理:</p><p>初学者：推荐使用虚拟机<code>VMwareStation</code> + <code>Deepin</code></p><p>必备前置条件知识储备：</p><ol><li>Linux系统知识</li><li>Linux下Python开发环境</li><li>掌握Python基础知识</li></ol><p>Python文件概念：</p><p>文件： Python中文件是<strong>对象</strong>依赖我们的具体系统。</p><p>Linux文件：<strong>一切设备都可以看成文件</strong></p><ul><li>例如：磁盘文件，管道，网络Socket，外设等。</li></ul><p>文件属性：<code>用户</code>，<code>读</code>，<code>写</code>，<code>执行权限</code>；</p><p>在Linux控制台输入命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#cd进一个空目录</span><br><span class="line">cd Desktop/ </span><br><span class="line">#创建一个文件夹</span><br><span class="line">mkdir PythonFile </span><br><span class="line">cd PythonFile </span><br><span class="line">touch hello.py</span><br><span class="line">vim hello.py</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180105/8h45alB3E2.png?imageslim" alt="mark"></p><p>使用<code>i</code>进入<code>insert模式</code>进行插入代码。<br>插入完成后使用<code>esc</code>退出编辑模式，输入<code>:wq</code>进行保存。</p><p><img src="http://myphoto.mtianyan.cn/blog/180105/cl7b7hk3I8.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180105/a2mgcm26Ij.png?imageslim" alt="mark"></p><p>通过<code>ls -l</code>命令可以看到文件的一些基本属性：</p><ul><li>第一个横杠代表是一个文件，还是一个目录。<code>-</code>代表是一个文件，<code>d</code>代表是一个目录<br>如下图1为一个目录。<br><img src="http://myphoto.mtianyan.cn/blog/180105/6ceahk4A44.png?imageslim" alt="mark"></li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180106/bl7dk5hJh6.png?imageslim" alt="mark"></p><ul><li>第一组<code>rw-</code>代表当前用户对于当前文件有<code>读</code>有<code>写</code>没有<code>执行权限</code>。(<code>-</code>代表没有权限，<code>x</code>为可执行)</li><li>第二组<code>r--</code>：表示当前用户组对该文件有<code>读r</code> 没有<code>写w</code>的权限，没有<code>执行权限x</code></li><li><p>第三组<code>r--</code>：表示其他用户对该文件有<code>读r</code>权限，但没有<code>写w</code>和<code>执行x</code>权限</p></li><li><p>第一个<code>mtianyan</code>代表文件的<strong>拥有者</strong>是<code>mtianyan</code> </p></li><li>第二个<code>mtianyan</code> 代表这个文件所属的<strong>用户组</strong>是<code>mtianyan</code></li><li><code>21</code>代表文件的大小是<code>21字节</code> 后面的时间是文件的创建时间。后面是文件名。</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180106/9mEAieLhhB.png?imageslim" alt="mark"></p><p>可以看到我们最为<strong>当前用户</strong>现在没有该文件执行权限。</p><p>使用<code>chmod</code>为文件<strong>增加权限</strong>说明：</p><ul><li>如果给所有人添加可执行权限：<code>chmod a+x 文件名</code>；</li><li>如果给文件所有者添加可执行权限：<code>chmod u+x 文件名</code>；</li><li>如果给所在组添加可执行权限：<code>chmod g+x 文件名</code>；</li><li>如果给所在组以外的人添加可执行权限：<code>chmod o+x 文件名</code>；</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180106/jClleHm2L3.png?imageslim" alt="mark"></p><p>可以看到我们通过<code>chmod +x hello.py</code>为当前<code>用户</code>，<code>用户组</code>，<code>其他用户</code>都添加了执行权限</p><p>Linux下首行一定要加这句话：<code>!/usr/bin/Python</code>，<code>!/usr/bin/Python</code>是告诉操作系统执行这个脚本的时候，调用<code>/usr/bin</code>下的python解释器。</p><p><img src="http://myphoto.mtianyan.cn/blog/180106/8LlgeBbeF1.png?imageslim" alt="mark"></p><p>打印出了<code>Helloworld</code>好像有点问题。以后对Linux熟了再回来看。</p><p><img src="http://myphoto.mtianyan.cn/blog/180106/jeihD8Fk7d.png?imageslim" alt="mark"></p><p><code>python</code>命令是可以正常执行的。</p><h1 id="文件基础操作"><a href="#文件基础操作" class="headerlink" title="文件基础操作"></a>文件基础操作</h1><p>主要讲解文件打开及文件不同的打开方式、使用<code>read</code>,<code>readlines</code>及<code>迭代器</code>访问文件、文件写入方式及<code>写缓存</code>处理、文件关闭及由不关闭导致的问题、文件指针及文件指针操作</p><h2 id="文件打开方式"><a href="#文件打开方式" class="headerlink" title="文件打开方式"></a>文件打开方式</h2><h3 id="open"><a href="#open" class="headerlink" title="open()"></a>open()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open(name [,mode[buf]])</span><br></pre></td></tr></table></figure><ul><li><code>name</code> : 文件路径</li><li><code>mode</code> : 打开方式</li><li><code>buf</code>  : 缓冲buffering大小</li></ul><p><code>mode</code>方式有：<code>只读</code>，<code>只写</code>。<code>读写</code>。</p><h3 id="read"><a href="#read" class="headerlink" title="read()"></a>read()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">read([size])</span><br></pre></td></tr></table></figure><p>读取文件(读取<code>size个字节</code>，默认读取全部)</p><ul><li>如果文件长度大于size，我们就读size个长度。</li><li>如果文件长度小于size，我们就把文件读完。</li><li>如果没有设置size，默认全部读完。</li></ul><h3 id="readline"><a href="#readline" class="headerlink" title="readline()"></a>readline()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readline([size])</span><br></pre></td></tr></table></figure><p>读取一行</p><h3 id="readlines"><a href="#readlines" class="headerlink" title="readlines()"></a>readlines()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readlines([size])</span><br></pre></td></tr></table></figure><p>读取完文件(看到后面你就知道并不是)，返回每一行所组成的列表。我们就可以使用列表访问的方式，使用文件。</p><p>弊端：一次性读完，占用很大内存。</p><h3 id="write"><a href="#write" class="headerlink" title="write()"></a>write()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">write(str)</span><br></pre></td></tr></table></figure><p>将字符串写入文件</p><h3 id="writelines"><a href="#writelines" class="headerlink" title="writelines()"></a>writelines()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">writelines(sequence_of_strings) : 写多行到文件</span><br></pre></td></tr></table></figure><p><code>sequence_of_strings</code>是一个由字符型组成的列表。一次性写入多行。</p><p>输入<code>ipython</code>进入ipython环境</p><p><img src="http://myphoto.mtianyan.cn/blog/180106/bCBh622gFI.png?imageslim" alt="mark"></p><p><code>type(f)</code>可以看到打开的文件类型就是一个文件对象。</p><p><img src="http://myphoto.mtianyan.cn/blog/180106/dBiFhaIaFD.png?imageslim" alt="mark"></p><p>拥有的方法可以使用<code>f.</code> + <code>Tab</code>自动补齐</p><p><img src="http://myphoto.mtianyan.cn/blog/180106/lBDelEdGgl.png?imageslim" alt="mark"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error：File not open for writing</span><br></pre></td></tr></table></figure><p>这里因为我们使用的是<strong>默认无参数打开，此时我们并不拥有写权限。</strong></p><p>Python文件打开方式</p><table><thead><tr><th>mode</th><th>说明</th><th>说明</th></tr></thead><tbody><tr><td>‘r’</td><td>只读方式打开</td><td>文件必须存在</td></tr><tr><td>‘w’</td><td>只写方式打开</td><td>文件不存在创建文件;存在则清空内容</td></tr><tr><td>‘a’</td><td>追加方式打开</td><td>文件不存在创建文件</td></tr><tr><td>‘r+’/‘W+’</td><td>读写方式打开</td><td></td></tr><tr><td>‘a+’</td><td>追加和读写方式打开</td></tr></tbody></table><p><code>&#39;rb&#39;</code>,<code>&#39;wb&#39;</code>,<code>&#39;ab&#39;</code>,<code>&#39;rb+&#39;</code>,<code>&#39;wb+&#39;</code>,<code>&#39;ab+&#39;</code>:都是采用二进制方式打开。</p><h3 id="练习-39-r-39-39-w-39-39-a-39-39-r-39"><a href="#练习-39-r-39-39-w-39-39-a-39-39-r-39" class="headerlink" title="练习&#39;r&#39; &#39;w&#39; &#39;a&#39; &#39;r+&#39;"></a>练习<code>&#39;r&#39;</code> <code>&#39;w&#39;</code> <code>&#39;a&#39;</code> <code>&#39;r+&#39;</code></h3><p><img src="http://myphoto.mtianyan.cn/blog/180106/EhilmC7AHd.png?imageslim" alt="mark"></p><ul><li><strong>不带参数</strong>的<code>open</code>是用<strong>只读</strong>方式打开的，所以文件<strong>不存在会报错</strong>。</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180106/8BIFGCB5ge.png?imageslim" alt="mark"></p><ul><li>请<strong>注意关闭</strong>文件<code>f.close()</code>否则<code>cat</code>时文件内容会为空。</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180106/kh5BdJIF4h.png?imageslim" alt="mark"></p><ul><li>当我们<strong>再次</strong>打开文件使用<code>w</code>方式。已存在的文件会被<strong>清空</strong>才打开。</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180106/DJIDC4CcGE.png?imageslim" alt="mark"></p><ul><li>我们以<code>a</code>方式打开此时我们可以对于文件进行<strong>追加</strong>操作，原有内容并没有被清空<br>新增内容被添加到了<strong>最后</strong>。</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180106/03d8LcbEd0.png?imageslim" alt="mark"></p><ul><li>当我们以<code>r+</code>方式打开，我们新增的内容会从<strong>文件开始</strong>替换原有内容的一部分。</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180106/HiG3agaJdg.png?imageslim" alt="mark"></p><ul><li>当我们以<code>w+</code>方式打开，文件可以被<strong>读写</strong>。但是文件内容被清空。</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180106/C6k1K0ihlJ.png?imageslim" alt="mark"></p><ul><li>此时新文件可以被读写。</li></ul><p>使用二进制方式打开的使用方法与上面介绍的基本一致。</p><p>意义在于： <strong>比如读取一张图片的EXIF信息读取图片的长宽拍照日期</strong></p><p>如果我们以普通方式打开是以文本方式打开，不能读取到正确的内容。<br>当我们以二进制打开我们就可以读取到正确的<code>EXIF信息</code>。</p><p>学习了打开文件，读取文件，写入文件。文件打开方式的不同。</p><h2 id="文件读取方式"><a href="#文件读取方式" class="headerlink" title="文件读取方式"></a>文件读取方式</h2><h3 id="read-1"><a href="#read-1" class="headerlink" title="read()"></a>read()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">read([size])</span><br></pre></td></tr></table></figure><p>读取文件(读取<code>size个字节</code>，默认读取全部)</p><ul><li>如果文件长度大于size，我们就读size个长度。</li><li>如果文件长度小于size，我们就把文件读完。</li><li>如果没有设置size，默认全部读完。</li></ul><h3 id="readline-1"><a href="#readline-1" class="headerlink" title="readline()"></a>readline()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readline([size])</span><br></pre></td></tr></table></figure><p>读取一行</p><h4 id="示例操作"><a href="#示例操作" class="headerlink" title="示例操作"></a>示例操作</h4><p>首先使用<code>touch mtianyan.txt</code> 和 <code>vi mtianyan.txt</code><br>创建并写入内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">blog.mtianyan.cn</span><br><span class="line">blog.mtianyan.cn</span><br><span class="line">blog.mtianyan.cn</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180106/Ab332e9280.png?imageslim" alt="mark"></p><p>可以看出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">readline(size):</span><br><span class="line"><span class="keyword">if</span> len(line) &gt; size:</span><br><span class="line"><span class="keyword">return</span> size</span><br><span class="line"><span class="keyword">if</span> len(line) &lt; size:</span><br><span class="line"><span class="keyword">return</span> len(line)</span><br></pre></td></tr></table></figure><h3 id="readlines-1"><a href="#readlines-1" class="headerlink" title="readlines()"></a>readlines()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readlines([size])</span><br></pre></td></tr></table></figure><p>读取完文件(整数个buffer左右字节)，返回每一行所组成的列表。我们就可以使用列表访问的方式，使用文件。</p><p>弊端：一次性读完，占用很大内存。</p><h4 id="示例操作："><a href="#示例操作：" class="headerlink" title="示例操作："></a>示例操作：</h4><p><img src="http://myphoto.mtianyan.cn/blog/180106/Jd54A7e7jf.png?imageslim" alt="mark"></p><p>虽然设置了<code>size</code>为<code>1</code>,但是还是把所有都读出来了。</p><p><img src="http://myphoto.mtianyan.cn/blog/180106/27gh2mdJI2.png?imageslim" alt="mark"></p><p>输入<code>help(f.readlines)</code>查看定义：重复的调用<code>readline()</code>然后返回一个读到的行所组成的列表。</p><p>读取文件的大小：</p><ul><li>如果<code>size</code>小于<code>缓冲区</code>的大小，则读取<code>缓冲区大小</code>的数据</li><li>如果<code>size</code>大于<code>缓冲区</code>的大小，读取<code>size大小</code>的数据，但不是完全的等于size的大小，一般读取比size大的整行的数据.</li></ul><p>这个设置是python解释器内部的一个变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io</span><br><span class="line">io.DEFAULT_BUFFER_SIZE</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180106/2mGhG36mk0.png?imageslim" alt="mark"></p><p>设置参数小于<code>8192</code>每次能读取<code>8192</code>个字节。</p><ul><li>设置参数<code>大于</code>一个<code>8192</code>小于<code>2*8192=16384</code>。则读取两个<code>buffer</code>值.</li><li><code>BUFFER</code>都是一整个一整个读</li></ul><h4 id="Linux命令使用"><a href="#Linux命令使用" class="headerlink" title="Linux命令使用"></a>Linux命令使用</h4><p>使用<code>vi</code>打开文件。<code>y</code>是复制当前行，<code>yy</code>是复制光标所在的一整行.<br>如果复制了一行，则<code>p</code>是在光标所在行的下一行粘贴，<code>10000p</code>就是粘贴10000次</p><ul><li><p>命令<code>yy，10000p</code>复制<code>10000</code>行 .然后<code>:set nu</code> 显示行数</p></li><li><p><code>gg</code>： </p><ul><li>跳转到文件头 <code>:1</code> 或 <code>gg</code></li><li>跳转到<code>文件末尾行数+gg</code> <code>:$</code> <code>Shift+g</code></li><li>跳转到指定行,例跳转到123行：<code>123gg</code>或<code>:123</code>.</li></ul></li></ul><p>使用<code>ctrl+z</code>可将程序切换到后台。用<code>fg</code>可将后台程序切换到前台。</p><p><img src="http://myphoto.mtianyan.cn/blog/180106/FI1l8ggadI.png?imageslim" alt="mark"></p><p>可以看到此时的文件以及有十几万个字节了</p><p><img src="http://myphoto.mtianyan.cn/blog/180106/7agEmLFl9K.png?imageslim" alt="mark"></p><p>可以看出这时候不再是一次性把文件读取完了，而是读取了<code>482</code>行。</p><p><code>170051/100003</code>行，每行<code>17</code>个字节。</p><p><img src="http://myphoto.mtianyan.cn/blog/180106/l6FdaaKaAL.png?imageslim" alt="mark"></p><p>这时我们的<code>size</code>大于了缓冲区的大小<code>8192</code>。因此我们的<code>size</code>到了<code>8192</code>和<code>16384</code><br>之间。</p><p><strong>重点：系统数据是按着<code>整个buffer，整个buffer</code>来读的。此时系统会读取差不多<code>两个buffer</code>的数据。也就是<code>963*17 =16371</code> 。</strong></p><p>待探究</p><h4 id="iter-使用迭代器读取文件"><a href="#iter-使用迭代器读取文件" class="headerlink" title="iter: 使用迭代器读取文件"></a>iter: 使用迭代器读取文件</h4><p><img src="http://myphoto.mtianyan.cn/blog/180106/Ke4CkfKaiC.png?imageslim" alt="mark"></p><p>迭代器并不是把我们的文件全部存入了内存中。而是我们<strong>每使用一次<code>next</code>方法就会自动读取下一行。</strong>所以能在不消耗大量内存的情况下进行读取整个文件。</p><h2 id="文件写入与写缓存"><a href="#文件写入与写缓存" class="headerlink" title="文件写入与写缓存"></a>文件写入与写缓存</h2><h3 id="write-1"><a href="#write-1" class="headerlink" title="write()"></a>write()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">write(str)</span><br></pre></td></tr></table></figure><p>将字符串写入文件</p><h3 id="writelines-1"><a href="#writelines-1" class="headerlink" title="writelines()"></a>writelines()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">writelines(sequence_of_strings) : 写多行到文件</span><br></pre></td></tr></table></figure><p><code>sequence_of_strings</code>参数是一个<code>可迭代对象</code>:</p><ul><li>可以是字符串</li><li>可以是字符串所组成的元组。</li><li>可以是一个字符串所组成的迭代器。</li><li>也可是一个字符串组成的列表</li></ul><h3 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h3><p><img src="http://myphoto.mtianyan.cn/blog/180106/b33936E4h7.png?imageslim" alt="mark"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">37</span>]: cat test.txt</span><br><span class="line">test write</span><br><span class="line">In [<span class="number">38</span>]: f = open(<span class="string">"mtianyan.txt"</span>,<span class="string">'w'</span>)</span><br><span class="line">In [<span class="number">39</span>]: f.writelines(<span class="string">'123456'</span>)</span><br><span class="line">In [<span class="number">40</span>]: f.writelines((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">TypeError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-40</span><span class="number">-0</span>a3726375675&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 f.writelines((1,2,3))</span><br><span class="line"></span><br><span class="line">TypeError: writelines() argument must be a sequence of strings</span><br></pre></td></tr></table></figure><p>写入一个元组会报错 ：<strong>提示必须是由字符串组成的序列。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">41</span>]: f.writelines((<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>))</span><br><span class="line">In [<span class="number">42</span>]: f.writelines([<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>])</span><br><span class="line">In [<span class="number">43</span>]: f.close()</span><br><span class="line">In [<span class="number">44</span>]: cat test.txt</span><br><span class="line">test write</span><br><span class="line">In [<span class="number">45</span>]: cat mtianyan.txt</span><br><span class="line"><span class="number">123456123123</span></span><br></pre></td></tr></table></figure><p>可以看到我们都可以正常的写入由字符串组成的列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">46</span>]: f = open(<span class="string">"mtianyan.txt"</span>,<span class="string">'w'</span>)</span><br><span class="line">In [<span class="number">47</span>]: f.write(<span class="string">"11111"</span>)</span><br><span class="line">In [<span class="number">48</span>]: cat mtianyan.txt</span><br><span class="line"></span><br><span class="line">In [<span class="number">49</span>]:</span><br></pre></td></tr></table></figure><p>文件内容为空，因为我们没有使用<code>f.close()</code>将文件关闭。</p><p>Linux系统有一种<strong>写缓存机制</strong>。如果我们不主动调用<code>f.close()</code>或 <code>flush</code><br>他是不会写到磁盘文件的。</p><p><img src="http://myphoto.mtianyan.cn/blog/180106/8hddlFCjDk.png?imageslim" alt="mark"></p><p>写文件的过程中Python解释器进行<strong>系统调用</strong>。Linux系统内核将文件写入系统文件缓冲区。<br>当我们调用<code>f.close()</code>时，系统会更新文件到硬盘。</p><p>Python写磁盘的缓存机制</p><ol><li>主动调用<code>closed()</code>或<code>flush</code>方法。写缓存同步到磁盘</li><li>写入数据量大于或等于写缓存，写缓存同步到磁盘。（此时系统写缓存又清空，然后就又继续缓存直到<code>close()</code>)</li></ol><h4 id="实际操作-1"><a href="#实际操作-1" class="headerlink" title="实际操作"></a>实际操作</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">62</span>]: f = open(<span class="string">"mtianyan.txt"</span>,<span class="string">'w'</span>)</span><br><span class="line">In [<span class="number">63</span>]: f.write(<span class="string">'test write'</span>)</span><br><span class="line">In [<span class="number">64</span>]: cat mtianyan.txt</span><br><span class="line">In [<span class="number">65</span>]: f.flush()</span><br><span class="line">In [<span class="number">66</span>]: cat mtianyan.txt</span><br><span class="line">test write</span><br></pre></td></tr></table></figure><p>进行<code>flush()</code>操作时内容更新。</p><p><img src="http://myphoto.mtianyan.cn/blog/180106/LLDgdC8AIc.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180106/C73B4A1gIc.png?imageslim" alt="mark"></p><p>说明我的Linux的缓冲区就是这么大<code>147456</code><br>当我们执行<code>close</code>文件会变大。因为全部写进去了。</p><h2 id="文件关闭"><a href="#文件关闭" class="headerlink" title="文件关闭"></a>文件关闭</h2><ol><li>将<strong>写缓存</strong>同步到磁盘；</li><li>linux系统中每个进程<strong>打开的文件个数是有限的；</strong></li><li>如果打开文件数到了系统限制，在打开文件就会失败；</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mtianyan@mtianyan-deep:~/Desktop/PythonFile$ ps</span><br><span class="line">   PID TTY          TIME CMD</span><br><span class="line">  5587 pts/1    00:00:00 bash</span><br><span class="line">  5918 pts/1    00:00:02 ipython</span><br></pre></td></tr></table></figure><p>看到ipython进程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mtianyan@mtianyan-deep:~/Desktop/PythonFile$ cat /proc/5918/limits </span><br><span class="line">Limit                     Soft Limit           Hard Limit           Units     </span><br><span class="line">Max open files            1024                 1048576              files</span><br></pre></td></tr></table></figure><ul><li><code>file.fileno()</code>:文件描述符；每打开一个就会加1，直到1024失败<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n [3]: for i in range(1027):</span><br><span class="line">   ...:     f = open(&quot;mtianyan.txt&quot;,&apos;r&apos;)</span><br><span class="line">   ...:     print (&quot;%d：%d&quot; %(i,f.fileno()))</span><br></pre></td></tr></table></figure></li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180106/8iIjg1LI07.png?imageslim" alt="mark"></p><p>并没有起到效果。<code>fileno</code>在<code>10</code>和<code>12</code>不断来回</p><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1025</span>):</span><br><span class="line">    ...:     list_f.append(open(<span class="string">"mtianyan.txt"</span>,<span class="string">'w'</span>))</span><br><span class="line">    ...:     <span class="keyword">print</span> (<span class="string">"%d:%d"</span> %(i,list_f[i].fileno()))</span><br><span class="line">    ...:</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1010:1022</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">IOError                                   Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-10-dd5ee4024396&gt; in &lt;module&gt;()</span><br><span class="line">      1 for i in range(1025):</span><br><span class="line">----&gt; 2     list_f.append(open(&quot;mtianyan.txt&quot;,&apos;w&apos;))</span><br><span class="line">      3     print (&quot;%d:%d&quot; %(i,list_f[i].fileno()))</span><br><span class="line">      4 </span><br><span class="line"></span><br><span class="line">IOError: [Errno 24] Too many open files: &apos;mtianyan.txt&apos;</span><br></pre></td></tr></table></figure><p>因此我们需要养成<strong>良好编码习惯记得关闭文件。</strong></p><h2 id="文件指针。"><a href="#文件指针。" class="headerlink" title="文件指针。"></a>文件指针。</h2><ol><li>写入文件后，必须打开才能读取写入的内容</li><li>读取文件后，无法重新再次读取读取过的内容</li></ol><p>比如：写完文件必须关闭才能读到我们写入的内容。</p><p>文件指针用于定位我们当前文件所执行到的位置：</p><ul><li>使用<code>open()</code>打开时文件指针就在起始位置。 </li><li><code>read(3)</code>文件指针就会往后挪<code>3</code>个位置。指向<code>第四个位置</code>。</li><li><code>write(&#39;mtianyan&#39;)</code>就会从当前文件指针<code>4</code>开始写。文件指针就会移动<code>8个字节</code>。</li></ul><p>我们之前的问题都是因为我们无法使文件指针归于起始位置的，<br>下面我们学习自由操作文件指针：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">seek(offset[,whence]):移动文件指针</span><br><span class="line">offset 偏移量，可以为负数</span><br><span class="line">whence：偏移相对位置：</span><br><span class="line">os.SEEK_SET:相对文件的起始位置<span class="number">0</span></span><br><span class="line">os,SEEK_CUR:相对文件的当前位置<span class="number">1</span></span><br><span class="line">os.SEEK_END:相对文件的结尾位置<span class="number">2</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: f = open(<span class="string">'mtianyan.txt'</span>,<span class="string">'r+'</span>)</span><br><span class="line">In [<span class="number">2</span>]: <span class="keyword">import</span> os</span><br><span class="line">In [<span class="number">3</span>]: f.tell() </span><br><span class="line">Out[<span class="number">3</span>]: <span class="number">0</span></span><br></pre></td></tr></table></figure><p><code>f.tell()</code>（函数）返回当前文件的偏移返回的是一个整数，也许是一个长整数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">4</span>]: f.read(<span class="number">3</span>)</span><br><span class="line">Out[<span class="number">4</span>]: <span class="string">'tes'</span></span><br><span class="line">In [<span class="number">5</span>]: f.tell()</span><br><span class="line">Out[<span class="number">5</span>]: <span class="number">3</span></span><br><span class="line">In [<span class="number">6</span>]: f.seek(<span class="number">0</span>, os.SEEK_SET)</span><br><span class="line">In [<span class="number">7</span>]: f.tell()</span><br><span class="line">Out[<span class="number">7</span>]: <span class="number">0</span></span><br></pre></td></tr></table></figure><p>可以看出我们可以使用<code>f.seek(0, os.SEEK_SET)</code>来进行指针归零。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">8</span>]: f.seek(<span class="number">0</span>,os.SEEK_END)</span><br><span class="line">In [<span class="number">9</span>]: f.tell()</span><br><span class="line">Out[<span class="number">9</span>]: <span class="number">3139</span></span><br><span class="line">In [<span class="number">10</span>]: ls -l mtianyan.txt</span><br><span class="line">-rw-r--r-- <span class="number">1</span> mtianyan mtianyan <span class="number">3139</span> <span class="number">1</span>月   <span class="number">6</span> <span class="number">03</span>:<span class="number">58</span> mtianyan.txt</span><br><span class="line">In [<span class="number">11</span>]: f.read(<span class="number">5</span>)</span><br><span class="line">Out[<span class="number">11</span>]: <span class="string">''</span></span><br></pre></td></tr></table></figure><p>当然我们也可以把文件指针指到末尾去。文件指针已经在末尾了，向后继续读取会为空。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">12</span>]: f.seek(<span class="number">-5</span>,os.SEEK_END)</span><br><span class="line">In [<span class="number">13</span>]: f.read(<span class="number">5</span>)</span><br><span class="line">Out[<span class="number">13</span>]: <span class="string">'231\n\n'</span></span><br></pre></td></tr></table></figure><p>使用<code>f.seek(-5,os.SEEK_END)</code>可以将文件指针<strong>倒着</strong>移回去。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [14]: f.tell()</span><br><span class="line">Out[14]: 3139</span><br><span class="line">In [15]: f.seek(-5,os.SEEK_CUR)</span><br><span class="line">In [16]: f.tell()</span><br><span class="line">Out[16]: 3134</span><br></pre></td></tr></table></figure><p>读取<code>5</code>个之后，指针又跑到了<code>3139</code>：使用<code>f.seek(-5,os.SEEK_CUR)</code><br>又可以从当前位置往前移。</p><p>当文件<strong>偏移大于文件长度会</strong>出现的问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [17]: f.seek(0,os.SEEK_END)</span><br><span class="line">In [18]: f.tell()</span><br><span class="line">Out[18]: 3139</span><br><span class="line">In [19]: f.seek(-3140,os.SEEK_END)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">IOError                                   Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-19-331d0bc629ca&gt; in &lt;module&gt;()</span><br><span class="line">----&gt; 1 f.seek(-3140,os.SEEK_END)</span><br><span class="line"></span><br><span class="line">IOError: [Errno 22] Invalid argument</span><br></pre></td></tr></table></figure><p>会报错：告诉我们这是一个<strong>无效的参数。</strong>类似于索引越界等。</p><h1 id="文件属性及OS模块使用"><a href="#文件属性及OS模块使用" class="headerlink" title="文件属性及OS模块使用"></a>文件属性及OS模块使用</h1><p>讲解文件属性、标准文件、文件命令行参数、文件编码格式、使用os模块中方法对文件进行操作、使用os模块中的方法对目录进行操作</p><h2 id="文件属性编码格式"><a href="#文件属性编码格式" class="headerlink" title="文件属性编码格式"></a>文件属性编码格式</h2><h3 id="Python文件属性"><a href="#Python文件属性" class="headerlink" title="Python文件属性"></a>Python文件属性</h3><ul><li><code>file.fileno()</code>:文件描述符；每打开一个就会加1，直到1024失败</li><li><code>file.mode:</code>文件打开权限</li><li><code>file.encoding:</code>文件编码格式</li><li><code>file.closed:</code>文件是否关闭</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">20</span>]: f.fileno()</span><br><span class="line">Out[<span class="number">20</span>]: <span class="number">12</span></span><br><span class="line">In [<span class="number">21</span>]: f.closed</span><br><span class="line">Out[<span class="number">21</span>]: <span class="keyword">False</span></span><br><span class="line">In [<span class="number">22</span>]: f.mode</span><br><span class="line">Out[<span class="number">22</span>]: <span class="string">'r+'</span></span><br><span class="line">In [<span class="number">23</span>]: f.encoding</span><br></pre></td></tr></table></figure><p>没有返回值：为<code>ASCII</code>码文件。应该与系统相关。</p><h3 id="Python标准文件"><a href="#Python标准文件" class="headerlink" title="Python标准文件"></a>Python标准文件</h3><ul><li>文件标准输入：<code>sys.stdin</code>；</li><li>文件标准输出：<code>sys.stdout</code>；</li><li>文件标准错误：<code>sys.stderr</code>;</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">26</span>]: <span class="keyword">import</span> sys</span><br><span class="line">In [<span class="number">27</span>]: type(sys.stdin)</span><br><span class="line">Out[<span class="number">27</span>]: file</span><br><span class="line">In [<span class="number">28</span>]: sys.stdin.mode</span><br><span class="line">Out[<span class="number">28</span>]: <span class="string">'r'</span></span><br><span class="line">In [<span class="number">29</span>]: sys.stdin.read()</span><br></pre></td></tr></table></figure><p>系统的<code>sys.stdin</code>的<code>read()</code>是指从控制台读入数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [32]: sys.stdin.fileno()</span><br><span class="line">Out[32]: 0</span><br></pre></td></tr></table></figure><p>系统的<code>sys.stdin</code>的<code>fileno</code>为0。也就是我们启动一个进程，他<strong>首先</strong>会<strong>打开标准输入</strong>：从控制台读数据。</p><p><code>a = raw_input()</code> 其实内部是调用<code>sys.stdin</code>来读取数据的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [37]: sys.stdout.mode</span><br><span class="line">Out[37]: &apos;w&apos;</span><br><span class="line">In [38]: sys.stdout.write(&quot;1000&quot;)</span><br><span class="line">1000</span><br></pre></td></tr></table></figure><p><code>sys.stdout</code>只可以写，不可以读。写入相当于<strong>写入到控制台，会直接显示</strong>。</p><p><code>print</code>实际内部调用的是<code>stdout</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [39]: sys.stdout.fileno()</span><br><span class="line">Out[39]: 1</span><br></pre></td></tr></table></figure><p><code>sys.stdout</code>是系统在启动程序时<strong>第二个</strong>打开的。</p><p>也就是系统会先为我们<strong>打开输入</strong>，<strong>再打开输出</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">40</span>]: sys.stderr.mode</span><br><span class="line">Out[<span class="number">40</span>]: <span class="string">'w'</span></span><br><span class="line">In [<span class="number">41</span>]: sys.stderr.write(<span class="string">"error"</span>)</span><br><span class="line">error</span><br><span class="line">In [<span class="number">42</span>]: sys.stderr.fileno()</span><br><span class="line">Out[<span class="number">42</span>]: <span class="number">2</span></span><br></pre></td></tr></table></figure><p><code>sys.stderr</code>是系统在启动程序时第二个打开的。<br><strong>先开输入，再开输出。第三err输出。</strong></p><h3 id="Python文件命令行参数"><a href="#Python文件命令行参数" class="headerlink" title="Python文件命令行参数"></a>Python文件命令行参数</h3><p><code>sys</code>模块提供了<code>sys.argv</code>，通过该属性可以得到命令行参数</p><p>很多程序都是这么做的：比如加上<code>-v</code>,根据<strong>不同的参数完成不同的功能。</strong></p><p><code>sys.argv</code>是一个字符串组成的列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    print len(sys.argv)</span><br><span class="line">    for arg in sys.argv:</span><br><span class="line">        print arg</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">D:\mtianBlog\hexoBlog-Github\source\_posts\test.py</span><br></pre></td></tr></table></figure><p>直接运行,我们没有提供参数，打印出了当前文件的绝对路径文件名。</p><h3 id="Python文件编码方式。"><a href="#Python文件编码方式。" class="headerlink" title="Python文件编码方式。"></a>Python文件编码方式。</h3><p>使用普通方式打开文件：写入<code>u天涯明月笙</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [3]: f.write(u&apos;天涯明月笙&apos;)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">UnicodeEncodeError                        Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-3-3cd15b559bd9&gt; in &lt;module&gt;()</span><br><span class="line">----&gt; 1 f.write(u&apos;天涯明月笙&apos;)</span><br><span class="line"></span><br><span class="line">UnicodeEncodeError: &apos;ascii&apos; codec can&apos;t encode characters in position 0-4: ordinal not in range(128)</span><br></pre></td></tr></table></figure><p>会报错：<code>UnicodeEncodeError</code>因为我们的文件是<code>ascii</code>格式的。不能将<code>Unicode</code>字符串写入。</p><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: a = unicode.encode(<span class="string">u'天涯'</span>,<span class="string">'utf-8'</span>)</span><br><span class="line">In [<span class="number">2</span>]: a</span><br><span class="line">Out[<span class="number">2</span>]: <span class="string">'\xe5\xa4\xa9\xe6\xb6\xaf'</span></span><br><span class="line">In [<span class="number">3</span>]: f.write(a)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [7]: cat mtianyan.txt</span><br><span class="line">天涯</span><br></pre></td></tr></table></figure><p>我们可以用<code>codecs</code>模块提供方法创建制定编码格式文件.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line">f = codecs.open(<span class="string">'test.txt'</span>,<span class="string">'w'</span>,<span class="string">'utf-8'</span>)</span><br><span class="line">f.encoding</span><br></pre></td></tr></table></figure><p><code>open(fname,mode,encoding,errors,buffering):</code>使用指定编码格式打开文件</p><h2 id="linux文件系统"><a href="#linux文件系统" class="headerlink" title="linux文件系统"></a>linux文件系统</h2><p><strong>所有</strong>设备都可以看为文件:</p><ul><li>包括磁盘(ext2,ext4)文件,NFS文件系统，各种外设</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180106/12m2BBaiD8.png?imageslim" alt="mark"></p><p><code>虚拟文件系统</code>为文件提供<code>文件节点</code></p><p>每一个外设在内核中都有一个对应的<strong>驱动程序</strong>。通过<strong>系统调用</strong>对文件节点进行访问。把所有外设作为文件处理。</p><p><img src="http://myphoto.mtianyan.cn/blog/180106/f5HcLchgiF.png?imageslim" alt="mark"></p><p>在操作系统之上的Python解释器,Python程序跑在解释器中。</p><p><img src="http://myphoto.mtianyan.cn/blog/180106/I0167hf15I.png?imageslim" alt="mark"></p><p>使用<code>open()</code>会访问<code>文件节点</code>。设备节点对应虚拟文件系统的方法，这个文件系统与驱动绑定。<br>驱动会操作硬件设备。</p><h2 id="os模块对文件和目录进行操作"><a href="#os模块对文件和目录进行操作" class="headerlink" title="os模块对文件和目录进行操作"></a>os模块对文件和目录进行操作</h2><p>使用os模块来打开文件：</p><p><code>os.open(filename, flag [,mode])</code>打开文件</p><pre><code>- os.O_CREAT:创建文件- os.O_RDONLY:只读方式打开- os.O_WRONLY:只写方式打开- os.O_RDWR:读写方式打开</code></pre><p><code>os.read(fd, buffersize)</code>:读取文件，返回值为读取的内容<br><code>os.write(fd, string)</code>:写入文件 ,返回值是写入数据的大小<br><code>os.lseek(fd, pos, how)</code>: 文件指针操作<br><code>os.close(fd)</code>:关闭文件</p><p><code>umask</code>获取系统的默认权限。我的是<code>0022</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">14</span>]:fd = os.open(<span class="string">'mtianyan.txt'</span>,os.O_CREAT | os.O_RDWR)</span><br><span class="line">In [<span class="number">15</span>]: n = os.write(fd,<span class="string">"mtianyan"</span>)</span><br><span class="line">In [<span class="number">16</span>]: n</span><br><span class="line">Out[<span class="number">16</span>]: <span class="number">8</span></span><br><span class="line">In [<span class="number">17</span>]: os.lseek(fd,<span class="number">0</span>,os.SEEK_SET)</span><br><span class="line">Out[<span class="number">17</span>]: <span class="number">0</span></span><br><span class="line">In [<span class="number">18</span>]: os.read(fd,<span class="number">5</span>)</span><br><span class="line">Out[<span class="number">18</span>]: <span class="string">'mtian'</span></span><br><span class="line">Out[<span class="number">19</span>]: os.close()</span><br></pre></td></tr></table></figure><p>使用os是为了跨平台。</p><h3 id="os方法"><a href="#os方法" class="headerlink" title="os方法"></a>os方法</h3><table><thead><tr><th>os方法</th><th>说明</th></tr></thead><tbody><tr><td>os.access(path, mode)</td><td>判断该文件权限：F_OK存在,权限:R_OK ,W_OK, X_OK</td></tr><tr><td>os.listdir(path)</td><td>返回当path路径下所有文件名组成的列表</td></tr><tr><td>os.remove(path)</td><td>删除文件</td></tr><tr><td>os.rename(old, new)</td><td>修改文件或者目录名</td></tr><tr><td>os.mkdir(path[, mode])</td><td>创建目录</td></tr><tr><td>os.makedirs(path[, mode])</td><td>创建多级目录</td></tr><tr><td>os.removedirs(path)</td><td>删除多级目录</td></tr><tr><td>os.rmdir(path)</td><td>删除目录(目录必须空目录)</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">os.access(&apos;mtianyan,txt&apos;,os.R_OK)</span><br><span class="line">os.listdir(&apos;./&apos;)</span><br><span class="line">os.rename(&apos;test/&apos;,&apos;test1&apos;)</span><br></pre></td></tr></table></figure><h3 id="os-path方法"><a href="#os-path方法" class="headerlink" title="os.path方法"></a>os.path方法</h3><table><thead><tr><th>os.path方法</th><th>说明</th></tr></thead><tbody><tr><td>os.path.exists(path)</td><td>当前路径是否存在,也可以判断是否有该文件</td></tr><tr><td>os.path.isdir(s)</td><td>是否是一个目录</td></tr><tr><td>os.path.isfile(path)</td><td>是否是一个文件</td></tr><tr><td>os.path.getsize(filename)</td><td>返回文件大小，返回目录文件大小</td></tr><tr><td>os.path.dirname(p)</td><td>返回路径的目录</td></tr><tr><td>os.path.basename(p)</td><td>返回路径的文件名</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">os.path.exists(&apos;./mtianyan.txt&apos;)</span><br><span class="line"># True</span><br><span class="line">os.path.isdir(&apos;./&apos;&apos;)</span><br><span class="line"># True</span><br><span class="line">os.path.isdir(&apos;mtianyan.txt&apos;)</span><br><span class="line"># False</span><br><span class="line">os.path.isfile(&apos;mtianyan.txt&apos;)</span><br><span class="line"># True</span><br></pre></td></tr></table></figure><h1 id="文件练习"><a href="#文件练习" class="headerlink" title="文件练习"></a>文件练习</h1><p>使用Python来管理<code>ini</code>文件：实现<code>查询</code>，<code>添加</code>，<code>删除</code>，<code>保存</code>。</p><ul><li>掌握文件的基本操作</li><li>认识<code>ini</code>文件</li><li>了解<code>ConfigPaser</code></li></ul><h2 id="ini配置文件格式："><a href="#ini配置文件格式：" class="headerlink" title="ini配置文件格式："></a>ini配置文件格式：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">节： [session]</span><br><span class="line">参数(键=值)  name=value</span><br><span class="line"></span><br><span class="line">[port]</span><br><span class="line">port1 = 800</span><br><span class="line">port2 = 900</span><br></pre></td></tr></table></figure><p>定位带<code>port</code>这个节，然后找到。</p><h2 id="ConfigParser"><a href="#ConfigParser" class="headerlink" title="ConfigParser"></a>ConfigParser</h2><p>mtianyan.txt内容:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[userinfo]</span><br><span class="line">name = mtianyan</span><br><span class="line">pwd = abc</span><br><span class="line"></span><br><span class="line">[study]</span><br><span class="line">python = 15</span><br><span class="line">java_base = 20</span><br></pre></td></tr></table></figure></p><p>两个概念：<code>sections(大的分类)</code>和<code>option小的选项</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ConfigParser</span><br><span class="line">cfg = ConfigParser.ConfigParser()</span><br><span class="line"></span><br><span class="line">help(cfg.read)</span><br><span class="line"></span><br><span class="line">cfg.read(<span class="string">'mtianyan.txt'</span>)</span><br><span class="line"><span class="comment"># ['mtianyan.txt']</span></span><br><span class="line">cfg.sections() <span class="comment">#返回节点值：userinfo，study</span></span><br><span class="line"><span class="comment"># ['userinfo', 'study']</span></span><br><span class="line"><span class="keyword">for</span> se <span class="keyword">in</span> cfg.sections():</span><br><span class="line"><span class="keyword">print</span> se</span><br><span class="line"><span class="keyword">print</span> cfg.items(se)</span><br><span class="line"><span class="comment">#遍历出整个文件</span></span><br></pre></td></tr></table></figure></p><p>遍历结果如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">userinfo</span><br><span class="line">[(<span class="string">'name'</span>, <span class="string">'johntian'</span>), (<span class="string">'pwd'</span>, <span class="string">'abc'</span>)]</span><br><span class="line">study</span><br><span class="line">[(<span class="string">'python_base'</span>, <span class="string">'15'</span>), (<span class="string">'python_junior'</span>, <span class="string">'20'</span>), (<span class="string">'linux_base_'</span>, <span class="string">'15'</span>)]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cfg.set(<span class="string">'userinfo'</span>, <span class="string">'pwd'</span>, <span class="string">'1234567'</span>)     <span class="comment">#修改键值</span></span><br><span class="line">cg.set(<span class="string">'userinfo'</span>,<span class="string">'email'</span>,<span class="string">'1147727180.com'</span>)//增加键值</span><br><span class="line"></span><br><span class="line">cfg.remove_option(<span class="string">'user info'</span>,<span class="string">'email'</span>)  //删除键值</span><br></pre></td></tr></table></figure><h2 id="文件操作练习"><a href="#文件操作练习" class="headerlink" title="文件操作练习"></a>文件操作练习</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> ConfigParser</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">1: dump ini</span></span><br><span class="line"><span class="string">2: del section</span></span><br><span class="line"><span class="string">3: del item</span></span><br><span class="line"><span class="string">4: modify item</span></span><br><span class="line"><span class="string">5: add section</span></span><br><span class="line"><span class="string">6: save modify</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student_info</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, recordfile)</span>:</span></span><br><span class="line">        self.logfile = recordfile</span><br><span class="line">        self.cfg = ConfigParser.ConfigParser()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cfg_load</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.cfg.read(self.logfile)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cfg_dump</span><span class="params">(self)</span>:</span></span><br><span class="line">        se_list = self.cfg.sections()</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"**********************&gt;"</span></span><br><span class="line">        <span class="keyword">for</span> se <span class="keyword">in</span> se_list:</span><br><span class="line">            <span class="keyword">print</span> se</span><br><span class="line">            <span class="keyword">print</span> self.cfg.items(se)</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"&lt;*********************"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete_item</span><span class="params">(self, section, key)</span>:</span></span><br><span class="line">        self.cfg.remove_option(section, key)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete_section</span><span class="params">(self, sescion)</span>:</span></span><br><span class="line">        self.cfg.remove_option(section)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_section</span><span class="params">(self, section)</span>:</span></span><br><span class="line">        self.cfg.add_section(section)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_item</span><span class="params">(self, section, key, value)</span>:</span></span><br><span class="line">        self.cfg.set(section, key, value)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(self)</span>:</span></span><br><span class="line">        fp = open(self.logfile, <span class="string">'w'</span>)</span><br><span class="line">        self.cfg.write(fp)</span><br><span class="line">        fp.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    info = student_info(<span class="string">'mtianyan.txt'</span>)</span><br><span class="line">    info.cfg_load()</span><br><span class="line">    info.cfg_dump()</span><br><span class="line">    info.add_section(<span class="string">'userinfo'</span>)</span><br><span class="line">    info.set_item(<span class="string">'userinfo'</span>, <span class="string">'pwd'</span>, <span class="string">'abc'</span>)</span><br><span class="line">    info.cfg_dump()</span><br><span class="line">    info.add_section(<span class="string">'login'</span>)</span><br><span class="line">    info.set_item(<span class="string">'login'</span>, <span class="string">'2018-0106'</span>, <span class="string">'20'</span>)</span><br><span class="line">    info.cfg_dump()</span><br><span class="line">    info.save()</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">**********************&gt;</span><br><span class="line">**********************&gt;</span><br><span class="line">userinfo</span><br><span class="line">[(&apos;pwd&apos;, &apos;abc&apos;)]</span><br><span class="line">&lt;*********************</span><br><span class="line">**********************&gt;</span><br><span class="line">userinfo</span><br><span class="line">[(&apos;pwd&apos;, &apos;abc&apos;)]</span><br><span class="line">&lt;*********************</span><br><span class="line">login</span><br><span class="line">[(&apos;2018-0106&apos;, &apos;20&apos;)]</span><br><span class="line">&lt;*********************</span><br><span class="line">[Finished in 0.3s]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;走近Linux之走近文件 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;note &quot;&gt;&lt;p&gt; 任何语言都离不开对文件的操作，Python语言是如何来操作和管理文件的。掌握文件的基本概念、基本操作，了解文件属性、 linux 系统的文件管理机制及os模块对文件和目录的处理等相关内容。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[√]慕课网Meshare_huang老师：Python文件处理&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="python从入门到精通" scheme="http://blog.mtianyan.cn/categories/python%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/"/>
    
    
      <category term="Python" scheme="http://blog.mtianyan.cn/tags/Python/"/>
    
      <category term="文件处理" scheme="http://blog.mtianyan.cn/tags/%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/"/>
    
      <category term="专题笔记" scheme="http://blog.mtianyan.cn/tags/%E4%B8%93%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>用TravisCI持续集成自动部署Hexo博客的个人实践</title>
    <link href="http://blog.mtianyan.cn/post/90a759d5.html"/>
    <id>http://blog.mtianyan.cn/post/90a759d5.html</id>
    <published>2018-01-04T12:21:45.000Z</published>
    <updated>2018-02-02T12:40:13.964Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>优秀的程序员都是不用持续集成的 </p></blockquote><div class="note "><p> 前几天我面试了一个码农，连续几个专业问题他都没答上来。<br>尴尬之余，我问它：「你没有什么理想吗？你现在最渴望的事情是什么？」<br>码农转悠着大眼睛，不假思索道：「做一个持续集成的自动部署！」<br>真没想到在面试中居然还有这种操作。<br>我问为什么这能成为现阶段最渴望的事情。<br>他反问「你就没有改动代码频繁，deploy无数次到崩溃的夜晚吗？寂寞长夜，总想好好专心写写博客，宽慰下自己啊。」<br>今天我就要做为一个不优秀的程序员使用持续集成。</p></div><a id="more"></a><p>观看本教程的前置条件：</p><ol><li>已经配置好了hexo博客。拥有一个仓库如：<code>mtianyan.github.io</code>\</li><li>已经将博客的源码也<code>push</code>到了一个仓库如：<code>hexoBlog-Github</code></li><li>已经配置了使用gulp进行博文压缩。</li></ol><p>参考：推荐观看我的博文《Hexo+Next主题搭建博客安装美化及SEO优化指南》<code>中将博客源码备份到github或码云</code> 与 <code>使用gulp进行博文压缩</code></p><p>完成上述前置条件，虽然不是必须的，但是可以与我保持一致。减少错误。</p><p>部分内容转载来源参考博客: <a href="https://www.karlzhou.com/2016/05/28/travis-ci-deploy-blog/" target="_blank" rel="noopener">https://www.karlzhou.com/2016/05/28/travis-ci-deploy-blog/</a></p><p>个人对上面博客做了新版本的修订。我最近每天改动博客的内容。一会目录有问题，一会改了站点参数，主题参数，出现Bug,<br>不停的提交快崩溃了：寂寞长夜，总想好好专心写写博客，宽慰下自己啊。</p><p>本文是一次在这个命题下的个人实践记录：大部分文字转载自参考博客</p><p>通常更新一篇Hexo博客文章，基本流程是：</p><ol><li>本地新建post页面</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo n travis-ci-deploy-blog</span><br><span class="line">INFO  Created: e:\WORK\GitHub\think-diff.me.source\source\_posts\travis-ci-deploy-blog.md</span><br></pre></td></tr></table></figure><ol><li>在文本编辑器里用<code>markdown</code>语法编辑新建页面</li><li>本地生成public文件：<code>hexo g &amp;&amp; gulp</code></li><li>启动本地测试web server：<code>hexo s --debug</code></li><li>浏览器打开<code>http://localhost:4000/</code>, 浏览生成文章</li><li>如果满意，即可部署到Github存放page仓库里：<code>hexo d</code></li></ol><p>本文主要介绍如何利用<code>TravisCI</code>自动完成第<code>3-6</code>步.</p><h1 id="What-is-Travis-CI"><a href="#What-is-Travis-CI" class="headerlink" title="What is Travis CI?"></a>What is Travis CI?</h1><p>Travis CI</p><p><img src="http://myphoto.mtianyan.cn/blog/180104/9G63Bg3iaa.png?imageslim" alt="mark"></p><p><code>CI(Continuous Integration)</code>翻译为<code>持续集成</code>。<code>Travis CI</code>是一个提供<strong>持续集成功能</strong>的平台，在<code>Github</code>上，可以添加<code>Travis CI</code>，当有<code>code push</code>时候，会推送通知到<code>Travis</code>，根据设置的脚本运行指定任务。</p><p>目前有两个站点:</p><ol><li><p><code>Travis.org</code> 对于所有<code>public</code>项目完全免费</p></li><li><p><code>Travics.com</code> 只针对<code>private</code>项目，提供更多一些额外功能，如<code>cache</code>，并行<code>build</code>个数</p></li></ol><p>两个站点只能看到各自的项目，不能通用。</p><h1 id="Why-we-need-Travis-CI"><a href="#Why-we-need-Travis-CI" class="headerlink" title="Why we need Travis CI?"></a>Why we need Travis CI?</h1><p>有人可能会有疑问: 在本地写完博客，直接一个命令<code>hexo d</code>，不就搞定了么， 为啥要费力搞<code>CI</code>？</p><p>的确, 想用<code>TravisCI</code>来自动部署Hexo博客程序，需要不少设置（瞎折腾），为了给大伙信心，列举一些优点：</p><div class="note success"><p>优点1：直接在线编辑文件，立即生效</p></div><p>假设你已经发表了一篇文章，过了几天你在朋友机器上浏览发现有几个明显的错别字，对于有强迫症的，这是不能容忍的。 但你手头又没有完整的hexo+nodejs+git的开发环境，重新下载git，node，hexo配置会花费不少时间，特别不划算。</p><p>如果按照这篇完整折腾完，你可以直接用浏览器访问github个人项目仓库，直接编辑那篇post的原md文件，前后2分钟改完。 稍等片刻，你的博客就自动更新了。</p><div class="note success"><p>优点2：自动部署，同时部署到多个地方</p></div><p>在<code>gitcafe</code>是被收购之前，很多同学（包括我）都是托管在上面的，国内访问速度比<code>Github</code>快很多。<br>配合<code>DNS</code>根据<code>IP</code>位置可以自动选择导到<code>gitcafe</code>, 还是<code>github</code>，甚至你还可以部署到七牛云的静态网站。<br>利用<code>Travis CI</code>可同时更新多个仓库。</p><p>比如我的博客现在有两个站：一个部署在码云，一个部署在github。都需要我自己手动部署。</p><p>注：最后发现码云并不支持。emmmmm</p><div class="note success"><p>优点3：部署快捷方便</p></div><p>手动<code>deploy</code>需要推送<code>public</code>整个folder到github上，当后期网站文章、图片较多时候，对于天朝的网络，有时候连接github 就是不顺畅，经常要傻等不少上传时间。<br>有了CI，你可以只提交<code>post</code>文件里单独的<code>md</code>文件即可，很快很爽，谁用谁知道。</p><div class="note success"><p>优点4：bigger than bigger<br>build icon</p></div><p>你的项目<code>Readme</code>里面可以显示<code>CI build</code>图标，很酷有没有？<br>另外通过设置，可以在当<code>build失败</code>时<strong>自动发邮件提醒你。</strong><br>上面的图标，如果登陆后你在Github项目里，直接点击图标，会跳转到你当前项目build的log界面，很方便。</p><p>当然有了<code>CI</code>，你可以做很多事情，如<code>自动运行单元测试</code>，<code>成功后再deploy</code>等等。很多项目里的持续集成基本也是这个道理。</p><h1 id="How-to-use-Travis-CI-to-deploy-hexo-blog"><a href="#How-to-use-Travis-CI-to-deploy-hexo-blog" class="headerlink" title="How to use Travis CI to deploy hexo blog?"></a>How to use Travis CI to deploy hexo blog?</h1><p>原博主是使用private项目演示的，虽然我也就用学校邮箱加入了<code>Github</code>的<code>Education plan</code> 但是为了通用性，我本次做了<code>public</code>的实践。</p><h2 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h2><h3 id="准备Travis-CI账号-传送门：public项目-private项目-在登陆成功后"><a href="#准备Travis-CI账号-传送门：public项目-private项目-在登陆成功后" class="headerlink" title="准备Travis CI账号, 传送门：public项目, private项目, 在登陆成功后."></a>准备Travis CI账号, 传送门：<a href="https://travis-ci.org/" target="_blank" rel="noopener">public项目</a>, <a href="https://travis-ci.com/" target="_blank" rel="noopener">private项目</a>, 在登陆成功后.</h3><p><img src="http://myphoto.mtianyan.cn/blog/180104/A9fAbhaL19.png?imageslim" alt="mark"></p><p>如果发现没有<code>Repositories</code>，点击上图加号会看到自己的目录然后把想要持续集成的仓库开关打开，会自动hook到Github。</p><p><img src="http://myphoto.mtianyan.cn/blog/180105/l1HkKEIcjh.png?imageslim" alt="mark"></p><p>注意: 这里需要打开的是自己的</p><h3 id="准备Github-Personal-Access-Token。"><a href="#准备Github-Personal-Access-Token。" class="headerlink" title="准备Github Personal Access Token。"></a>准备Github Personal Access Token。</h3><p>在Github的setting页面，左侧面板选择<code>Developer settings</code>然后<code>Personal access tokens</code>, 右上角点击<code>Generate new token</code>。生成<code>token</code>时候需要确定<code>访问scope</code>，这里我们选择第一个<code>repo</code>即可。<strong>重要：生成的<code>token</code>只有第一次可见，一定要保存下来备用。</strong></p><p><img src="http://myphoto.mtianyan.cn/blog/180104/k9k94G963L.png?imageslim" alt="mark"></p><h3 id="可选操作：除非你对于Travis-CI保存你的密钥不信任，才需要做，否则可以直接跳过省事"><a href="#可选操作：除非你对于Travis-CI保存你的密钥不信任，才需要做，否则可以直接跳过省事" class="headerlink" title="(可选操作：除非你对于Travis CI保存你的密钥不信任，才需要做，否则可以直接跳过省事)"></a>(可选操作：除非你对于Travis CI保存你的密钥不信任，才需要做，否则可以直接跳过省事)</h3><p>推荐直接跳过：有点奇怪原博主加了密又自行设置了环境变量保存token。加密在最后都没有用到。。。</p><ul><li>准备<a href="https://github.com/travis-ci/travis.rb" target="_blank" rel="noopener">Travis命令行工具</a>，需要依赖ruby环境。对于Windows环境，可以使用这里的<a href="https://rubyinstaller.org/downloads/" target="_blank" rel="noopener">安装包</a>，安装完成后可用<code>ruby -v</code>检查。</li></ul><p>请安装<code>2.4.x</code>版本。</p><p><img src="http://myphoto.mtianyan.cn/blog/180104/3bjG0jfmc4.png?imageslim" alt="mark"></p><p><strong>注意</strong>不要安装<code>2.5</code>版本。暂时不支持。会报错:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR: Error installing travis: The last version of ffi (&gt;= 1.3.0) to support your Ruby &amp; RubyGems was 1.9.18. Try installing it with `gem install ffi -v 1.9.18` and then running the current command again ffi requires Ruby version &lt; 2.5, &gt;= 2.0. The current ruby version is 2.5.0.</span><br></pre></td></tr></table></figure><ul><li>安装命令行工具，参考这里<a href="https://github.com/travis-ci/travis.rb#installation" target="_blank" rel="noopener">官方文档</a>：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem install travis</span><br></pre></td></tr></table></figure><p>验证travis安装成功</p><p><img src="http://myphoto.mtianyan.cn/blog/180104/cgGbjIaA75.png?imageslim" alt="mark"></p><ul><li>用Github的用户名/密码登录这个命令行工具。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">travis login</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180104/BGK3J1449G.png?imageslim" alt="mark"></p><p>登陆成功后，开始加密，参考下面代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">travis encrypt -r &lt;github name&gt;/&lt;github repo&gt; GH_Token=XXX</span><br><span class="line"></span><br><span class="line">#sample：</span><br><span class="line">travis encrypt -r mtianyan/hexoBlog-Github GH_TOKEN=33ba3948bxxx</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180104/BcCm1JgH4B.png?imageslim" alt="mark"></p><p>把输出的<code>secure:&quot;xxxx&quot;</code>保存。可以在文件的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">env:</span><br><span class="line"> global:</span><br><span class="line">   - secure: `你加密后的`</span><br></pre></td></tr></table></figure><p><code>travis-ci</code>会自动对于你的密钥进行解密。当做加密前的环境变量:<code>GH_TOKEN</code></p><h3 id="配置-travis-yml（如果没有，新建"><a href="#配置-travis-yml（如果没有，新建" class="headerlink" title="配置.travis.yml（如果没有，新建)"></a>配置<code>.travis.yml</code>（如果没有，新建)</h3><p>添加环境变量来保护自己的github密钥。</p><p><img src="http://myphoto.mtianyan.cn/blog/180105/k5jdFhABe3.png?imageslim" alt="mark"></p><p>点击<code>more options</code> 选择 <code>setting</code>.</p><p><img src="http://myphoto.mtianyan.cn/blog/180105/i8KFECDafl.png?imageslim" alt="mark"></p><p>找到环境变量值。将自己在github得到的<code>个人token值</code> 作为<code>value</code>，<code>name</code>可以自行定义<br><code>Travis_Token</code></p><p><img src="http://myphoto.mtianyan.cn/blog/180105/Gjb2cI7287.png?imageslim" alt="mark"></p><p>下面<code>gulp</code>的压缩安装，参考我Hexo中教程的方法。<br>如果不需要压缩，可自行替换为<code>hexo g</code></p><p>我个人的<code>.travis.yml</code> 可供<a href="https://github.com/mtianyan/hexoBlog-Github/blob/master/.travis.yml" target="_blank" rel="noopener">参考</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">language: node_js  #设置语言</span><br><span class="line"></span><br><span class="line">node_js: stable  #设置相应的版本</span><br><span class="line"></span><br><span class="line">cache:</span><br><span class="line">    apt: true</span><br><span class="line">    directories:</span><br><span class="line">        - node_modules # 缓存不经常更改的内容</span><br><span class="line"></span><br><span class="line">before_install:</span><br><span class="line">    - export TZ=&apos;Asia/Shanghai&apos; # 更改时区</span><br><span class="line"></span><br><span class="line">install:</span><br><span class="line">  - npm install  #安装hexo及插件</span><br><span class="line"></span><br><span class="line">script:</span><br><span class="line">  - hexo clean  #清除</span><br><span class="line">  - hexo g &amp;&amp; gulp  #生成</span><br><span class="line"></span><br><span class="line">after_script:</span><br><span class="line">  - git clone https://$&#123;GH_REF&#125; .deploy_git  # GH_REF是最下面配置的仓库地址</span><br><span class="line">  - cd .deploy_git</span><br><span class="line">  - git checkout master</span><br><span class="line">  - cd ../</span><br><span class="line">  - mv .deploy_git/.git/ ./public/   # 这一步之前的操作是为了保留master分支的提交记录，不然每次git init的话只有1条commit</span><br><span class="line">  - cd ./public</span><br><span class="line">  - git config user.name &quot;mtianyan&quot;  #修改name</span><br><span class="line">  - git config user.email &quot;1147727180@qq.com&quot;  #修改email</span><br><span class="line">  - git add .</span><br><span class="line">  - git commit -m &quot;Travis CI Auto Builder at `date +&quot;%Y-%m-%d %H:%M&quot;`&quot;  # 提交记录包含时间 跟上面更改时区配合</span><br><span class="line">  - git push --force --quiet &quot;https://$&#123;Travis_Token&#125;@$&#123;GH_REF&#125;&quot; master:master  #Travis_Token是在Travis中配置环境变量的名称</span><br><span class="line"></span><br><span class="line">branches:</span><br><span class="line">  only:</span><br><span class="line">    - master  #只监测master分支，master是我的分支的名称，可根据自己情况设置</span><br><span class="line">env:</span><br><span class="line"> global:</span><br><span class="line">   - GH_REF: github.com/mtianyan/mtianyan.github.io.git  #设置GH_REF，注意更改yourname</span><br><span class="line"></span><br><span class="line"># configure notifications (email, IRC, campfire etc)</span><br><span class="line"># please update this section to your needs!</span><br><span class="line"># https://docs.travis-ci.com/user/notifications/</span><br><span class="line">notifications:</span><br><span class="line">  email:</span><br><span class="line">    - 1147727180@qq.com</span><br><span class="line">    - mtianyan@outlook.com</span><br><span class="line">  on_success: change</span><br><span class="line">  on_failure: always</span><br></pre></td></tr></table></figure><p>这里需要注意的是：<code>GH_REF</code>，这个地址其实就是你github上存放<code>静态博客最终文件的仓库地址</code>，末尾加上<code>.git</code>。</p><h3 id="集成build-icon，在Travis-CI控制台里，点击那个icon，选择markdown的样式，然后放到项目Readme里即可。"><a href="#集成build-icon，在Travis-CI控制台里，点击那个icon，选择markdown的样式，然后放到项目Readme里即可。" class="headerlink" title="集成build icon，在Travis CI控制台里，点击那个icon，选择markdown的样式，然后放到项目Readme里即可。"></a>集成<code>build icon</code>，在<code>Travis CI</code>控制台里，点击那个<code>icon</code>，选择<code>markdown</code>的样式，然后放到项目<code>Readme</code>里即可。</h3><p><img src="http://myphoto.mtianyan.cn/blog/180105/bl7HDma64l.png?imageslim" alt="mark"></p><h3 id="大功告成后的使用。"><a href="#大功告成后的使用。" class="headerlink" title="大功告成后的使用。"></a>大功告成后的使用。</h3><p>你可以在本地hexo源码目录内，使用命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -am &quot;实验&quot;</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>来将自己的博客源码提交至<code>github中的源码仓库</code> CI检测到你的源码更新改动会自动帮你编译<code>git push 到你的静态页面存放仓库</code></p><p><img src="http://myphoto.mtianyan.cn/blog/180105/j9fA5GhEfk.png?imageslim" alt="mark"></p><p>在<code>commit</code>记录中会显示<code>bulid</code>的状态。</p><p>注意：有点慢。毕竟他要在Ci的服务器上根据你的配置文件安装下载，然后使用它的虚拟机进行部署。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;优秀的程序员都是不用持续集成的 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;note &quot;&gt;&lt;p&gt; 前几天我面试了一个码农，连续几个专业问题他都没答上来。&lt;br&gt;尴尬之余，我问它：「你没有什么理想吗？你现在最渴望的事情是什么？」&lt;br&gt;码农转悠着大眼睛，不假思索道：「做一个持续集成的自动部署！」&lt;br&gt;真没想到在面试中居然还有这种操作。&lt;br&gt;我问为什么这能成为现阶段最渴望的事情。&lt;br&gt;他反问「你就没有改动代码频繁，deploy无数次到崩溃的夜晚吗？寂寞长夜，总想好好专心写写博客，宽慰下自己啊。」&lt;br&gt;今天我就要做为一个不优秀的程序员使用持续集成。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="运维环境配置" scheme="http://blog.mtianyan.cn/categories/%E8%BF%90%E7%BB%B4%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="Hexo" scheme="http://blog.mtianyan.cn/tags/Hexo/"/>
    
      <category term="环境搭建" scheme="http://blog.mtianyan.cn/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
      <category term="TravisCI" scheme="http://blog.mtianyan.cn/tags/TravisCI/"/>
    
  </entry>
  
  <entry>
    <title>Python装饰器-专题笔记</title>
    <link href="http://blog.mtianyan.cn/post/aaa76191.html"/>
    <id>http://blog.mtianyan.cn/post/aaa76191.html</id>
    <published>2018-01-04T08:41:46.000Z</published>
    <updated>2018-02-02T12:40:13.956Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>学会装饰器，Python更进阶 </p></blockquote><div class="note "><p> 函数作用域到闭包到装饰器讲解，及闭包和装饰器的运用。</p><ul><li>[√] 慕课网Meshare_huang老师: python进阶</li></ul></div><a id="more"></a><p><img src="http://myphoto.mtianyan.cn/blog/180104/J8Gm6gi9BF.png?imageslim" alt="mark"></p><h1 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h1><p>介绍 Python 的函数作用域，了解函数作用域 <code>LEGB</code> 间关系。</p><p>主要内容:</p><ul><li>函数作用域LEGB</li><li>闭包理解与使用</li><li>装饰器</li></ul><p><code>LEGB</code>: <code>L&gt;E&gt;G&gt;B</code></p><ul><li><code>L: local</code> 函数内部作用域</li><li><code>E: enclosing</code> 函数内部与内嵌函数之间(主要是内置函数对我们函数变量的一个引用，称之为闭包)</li><li><code>G: global</code> 全局作用域: 我们所定义的全局变量。</li><li><code>B: build-in</code> 内置作用域: Python解释器默认导入的一些变量。</li></ul><p><code>build-in</code>比如：<code>tuple</code>，<code>list</code>，<code>元组</code>等。</p><p>知识点： <code>LEGB</code>原则: 首先从<code>函数内部作用域</code>查找，然后去<code>enclosing作用域</code>中去查找,然后依次是<code>全局</code> 和<code>内置</code>。</p><p>例子(使用Python3.4版本 + sublimeText)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">passline = <span class="number">60</span>          <span class="comment">#passline 是全局变量（global）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(val)</span>:</span></span><br><span class="line"><span class="keyword">if</span> val &gt;= passline:</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'pass'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'failed'</span>)</span><br><span class="line"></span><br><span class="line">func(<span class="number">89</span>)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pass</span><br></pre></td></tr></table></figure><p>分析：</p><ul><li>当我们定义一个函数时，会引入一个作用域：<code>L: local</code>.</li><li>当我们对于<code>func</code>函数进行调用时，<code>val</code>就是我们的一个本地变量。</li><li>在函数内部并没有定义<code>passline</code> 的值。这个时候回去全局变量找查找。如果全局没有还会继续向上查找<code>B: build-in</code></li></ul><p>当总分变为150.我们的<code>passline</code>应该设为<code>90</code>,如果我们不想修改全局的<code>passline</code>,<br>我们可以在函数内部定义新的passline。因为<code>L&gt;G</code>,所以会以我们自己函数内部的<code>local</code>域为准。</p><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">passline = <span class="number">60</span>          <span class="comment">#passline 是全局变量（global）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(val)</span>:</span></span><br><span class="line">passline = <span class="number">90</span>      <span class="comment">#这里的passline是函数内部作用域(local)</span></span><br><span class="line"><span class="keyword">if</span> val &gt;= passline:</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'pass'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'failed'</span>)</span><br><span class="line"></span><br><span class="line">func(<span class="number">89</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">failed</span><br></pre></td></tr></table></figure><p>Python解释器查找顺序为<code>L--&gt;E--&gt;G--&gt;B</code>,如果已经找到，就不会找更上层。</p><p>如果我们需要拿到两个分数中的更大值。</p><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Max</span><span class="params">(val1,val2)</span>:</span></span><br><span class="line"><span class="keyword">return</span> max(val1,val2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (Max(<span class="number">90</span>,<span class="number">100</span>))</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">100</span><br></pre></td></tr></table></figure><p><code>Max</code>函数内部引用了一个内置函数方法<code>max</code>.这个内置方法在<code>Max</code>函数中以及整个文件中都没有定义。</p><p>这个<code>max</code>存在于我们的<code>build-in</code>.Python解释器在运行时会自动导入内置的方法。比如<code>list,tuple</code></p><p>函数内部的函数产生<code>enclosing</code>：</p><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">passline = <span class="number">60</span>          <span class="comment">#passline 是全局变量（global）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(val)</span>:</span></span><br><span class="line">passline = <span class="number">90</span>      <span class="comment">#这里的passline是函数内部作用域(local)</span></span><br><span class="line"><span class="keyword">if</span> val &gt;= passline:</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'pass'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'failed'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">in_func</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">print</span> (val)</span><br><span class="line"><span class="comment"># 调用方式1</span></span><br><span class="line">in_func()</span><br><span class="line"><span class="comment"># 调用方式2：将in_func()返回。这样我们就可以在外部调用。</span></span><br><span class="line">func(<span class="number">89</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">failed</span><br><span class="line">89</span><br></pre></td></tr></table></figure><p><code>val</code>变量的查找过程:  <code>print (val)</code> 中val的查找过程。</p><ul><li><code>in_func()</code>内部并没有定义这个<code>val</code>的值。也就是<code>local作用域</code>中没有这个值.</li><li>下一步我们就会去<code>enclosing</code>作用域查找。也就是我们的<code>func(val)</code>中引入的有val变量。</li><li>找到传入的<code>val</code>值<code>89</code></li></ul><h1 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包"></a>什么是闭包</h1><p>介绍什么是闭包，为什么使用闭包，闭包作用</p><h2 id="装饰器之闭包1"><a href="#装饰器之闭包1" class="headerlink" title="装饰器之闭包1"></a>装饰器之闭包1</h2><p><code>closure</code>：内部函数对<code>enclosig</code>作用域的变量进行引用</p><blockquote><p>概念：如果在一个内部函数里，对在<code>外部作用域（但不是在全局作用域）</code>也就是<code>enclosig</code>作用域的变量进行引用，那么内部函数就被认为是<code>闭包（closure）</code></p></blockquote><p>函数实质与属性</p><ul><li>函数是一个对象</li><li>函数执行完之后内部变量回收(如果我们中间产生一个变量，这个变量返回那么他不会被回收: 因为他的引用计数还补为0)</li><li>作为一个对象函数拥有自己的属性(闭包函数的特殊属性)</li><li>函数返回值</li></ul><p>正常的调用参考上一章代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">passline = <span class="number">60</span>          <span class="comment">#passline 是全局变量（global）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(val)</span>:</span></span><br><span class="line">passline = <span class="number">90</span>     </span><br><span class="line"><span class="keyword">if</span> val &gt;= passline:</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'pass'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'failed'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">in_func</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">print</span> (val)</span><br><span class="line">in_func()</span><br><span class="line"><span class="keyword">return</span> in_func <span class="comment"># in_func是func内部的一个函数对象。</span></span><br><span class="line">f = func(<span class="number">89</span>) <span class="comment">#使用f来接收返回值</span></span><br><span class="line">f() <span class="comment">#infunc</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">failed</span><br><span class="line">89</span><br><span class="line">89</span><br></pre></td></tr></table></figure><p><code>func</code>执行完成之后，他的<code>val</code>值就会消失。但是我们再次调用<code>f()</code><br>因为<code>infunc</code>的引用计数还没有归零。所以会一直保留。</p><ul><li>当我们这时候运行<code>f()</code>，<code>val</code>值是哪来的呢？</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> (f.__closure__)</span><br></pre></td></tr></table></figure><p>运行结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(&lt;cell at 0x0000000005236C48: int object at 0x00000000052169F8&gt;,)</span><br></pre></td></tr></table></figure></p><p>这里面有一个<code>int object</code> 地址为: <code>0x00000000052169F8</code></p><p>添加一行查看<code>传入func</code>的<code>val</code>的<code>id</code>值(<code>%x</code> 表示使用<code>16进制</code>打印。<code>id()</code>可打印出<code>val</code>的<code>id</code>)     </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def func(val):</span><br><span class="line">print (&apos;%x&apos;%id(val))</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180105/g5IG6mbE7m.png?imageslim" alt="mark"></p><p>可以看出<code>value</code>的<code>id</code>值和<code>__closure__</code>中的那个<code>int object</code>的值一样。</p><p>如果我引用了外部<code>enclosing</code>的值。会将该值保存在<code>函数的属性</code>中。<br>当我们调用<code>f()</code>时并没有去代码中查找。而是去函数的属性(<code>Local域</code>)中查找.</p><p>可以理解为在<code>in_func</code>定义的时候，函数属性中会添加<code>(val,)</code><br>这个属性的值是一个元组。是不能变得。</p><p>总分从<code>100</code>到<code>150</code>涉及到passline的取值问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">passline = <span class="number">60</span>  <span class="comment">#100      </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(val)</span>:</span></span><br><span class="line">passline = <span class="number">90</span> <span class="comment"># 150</span></span><br></pre></td></tr></table></figure><p>最常用的解决方案是定义两个函数分别处理:</p><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func_150</span><span class="params">(val)</span>:</span></span><br><span class="line">passline = <span class="number">90</span> <span class="comment"># 150    </span></span><br><span class="line"><span class="keyword">if</span> val &gt;= passline:</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'pass'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'failed'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func_100</span><span class="params">(val)</span>:</span></span><br><span class="line">passline = <span class="number">60</span> <span class="comment"># 150    </span></span><br><span class="line"><span class="keyword">if</span> val &gt;= passline:</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'pass'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'failed'</span>)</span><br><span class="line">func_100(<span class="number">89</span>) </span><br><span class="line">func_150(<span class="number">89</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pass</span><br><span class="line">failed</span><br></pre></td></tr></table></figure><p>上面两个函数在处理逻辑上基本一致，如果后期对于打印出来的信息要做修改，就得修改两遍。</p><p>如要为print添加数值的显示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func_150</span><span class="params">(val)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'%d pass'</span> %val)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func_100</span><span class="params">(val)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'%d pass'</span> %val)</span><br></pre></td></tr></table></figure><p>所有的改动都得做两遍。（这里想起了c++的模板）</p><p>进阶版修改:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">set_passline</span><span class="params">(passline)</span>:</span> <span class="comment">#passline = 60</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmp</span><span class="params">(val)</span>:</span> <span class="comment">#cmp 的__closure__属性中加入passline</span></span><br><span class="line"><span class="keyword">if</span> val &gt;= passline:</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'%x'</span>%id(passline))</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'pass'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'%x'</span>%id(passline))</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'failed'</span>)</span><br><span class="line"><span class="keyword">return</span> cmp</span><br><span class="line"></span><br><span class="line">f_100 = set_passline(<span class="number">60</span>)</span><br><span class="line">f_150 = set_passline(<span class="number">90</span>)</span><br><span class="line"><span class="keyword">print</span> (type(f_100)) <span class="comment"># f_100就是一个函数对象。__closure__属性中存放着passline</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (f_100.__closure__)</span><br><span class="line">f_100(<span class="number">89</span>)</span><br><span class="line"><span class="keyword">print</span> (f_150.__closure__)</span><br><span class="line">f_150(<span class="number">89</span>)</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180105/7DEIlh1eli.png?imageslim" alt="mark"></p><p>理解：闭包就是<code>内部函数(cmp)</code>对于<code>外层函数(set_passline)</code>变量(<code>passline</code>)的使用（也就是对<code>enclosing作用域变量</code>的使用），会将我们使用的这个变量(<code>passline</code>)放到我们的<code>__closure__</code>这个属性中。当我们内部函数处理时会直接对于这个属性值进行使用。</p><p>闭包的作用：</p><ul><li>封装</li><li>代码复用</li></ul><h2 id="装饰器之闭包2"><a href="#装饰器之闭包2" class="headerlink" title="装饰器之闭包2"></a>装饰器之闭包2</h2><p>上节我们接触到的<code>enclosing域</code>中的变量<code>passline</code>是一个整数，我们可不可以把它换成一个函数对象呢。</p><p>废话，当然可以。</p><p>例子： 求一组数据的总分和平均分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_sum</span><span class="params">(*arg)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> sum(arg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_average</span><span class="params">(*arg)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> sum(arg) / len(arg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(my_sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line">print(my_average(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">15</span><br><span class="line">3</span><br></pre></td></tr></table></figure><ul><li>此时如果我们的<code>my_average</code>需要加上一个对于传入参数不为0的判断。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(my_average())</span><br></pre></td></tr></table></figure><p>因为传入为空会报<code>除0</code>错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZeroDivisionError: integer division or modulo by zero</span><br></pre></td></tr></table></figure><ul><li>而我们如果想要给<code>my_sum</code>传一个字符串进去。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(my_sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="string">'6'</span>))</span><br></pre></td></tr></table></figure><p>会报错不支持<code>int</code>和<code>str</code>相加:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TypeError: unsupported operand type(s) for +: &apos;int&apos; and &apos;str&apos;</span><br></pre></td></tr></table></figure><p>说明我们的函数写的不够健全。我们还需要对于函数的参数进行判断。</p><ol><li>判断参数有没有长度。也就是不能为空。</li><li>对于参数的类型进行判断，限制为只是<code>int型</code></li></ol><p>普通版实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_sum</span><span class="params">(*arg)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(arg) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> val <span class="keyword">in</span> arg:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> isinstance(val, int):</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> sum(arg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_average</span><span class="params">(*arg)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(arg) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> val <span class="keyword">in</span> arg:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> isinstance(val, int):</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> sum(arg) / len(arg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(my_sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line">print(my_average(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line">print(my_sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="string">'6'</span>))</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">None</span><br><span class="line">3</span><br><span class="line">None</span><br></pre></td></tr></table></figure><p>可以看出两部分代码都有重合，我们使用进阶方法，使用闭包方式完成。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_sum</span><span class="params">(*arg)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'in mysum arg='</span>, arg)</span><br><span class="line">    <span class="keyword">return</span> sum(arg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_average</span><span class="params">(*arg)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'in my_average arg='</span>, arg)</span><br><span class="line">    <span class="keyword">return</span> sum(arg) / len(arg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dec</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">in_dec</span><span class="params">(*arg)</span>:</span>  <span class="comment"># my_sum -&gt; __closure__</span></span><br><span class="line">        <span class="keyword">print</span> (<span class="string">'in dec arg='</span>, arg)</span><br><span class="line">        <span class="keyword">if</span> len(arg) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> val <span class="keyword">in</span> arg:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> isinstance(val, int):</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> func(*arg)</span><br><span class="line">    <span class="keyword">return</span> in_dec</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># dec() return indec -&gt; my_sum;</span></span><br><span class="line"><span class="comment"># mysum = in_dec(*arg);</span></span><br><span class="line">my_sum = dec(my_sum)</span><br><span class="line">my_average = dec(my_average)</span><br><span class="line"></span><br><span class="line">print(my_sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line">print(my_sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="string">'6'</span>))</span><br><span class="line"><span class="comment"># print(my_average(1, 2, 3, 4, 5))</span></span><br><span class="line"><span class="comment"># print(my_average())</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(&apos;in dec arg=&apos;, (1, 2, 3, 4, 5))</span><br><span class="line">(&apos;in mysum arg=&apos;, (1, 2, 3, 4, 5))</span><br><span class="line">15</span><br><span class="line">(&apos;in dec arg=&apos;, (1, 2, 3, 4, 5, &apos;6&apos;))</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>我们把原有的重复的逻辑操作放进了我们的<code>in_dec</code>中。<br><code>def dec(func):</code>中<code>func</code>是我们传入的一个参数。因此我们调用这个函数时。我们可以指定它做什么</p><p>此时我们想要让<code>func()</code>对于<code>arg</code>进行处理。所以<code>return func(*arg)</code></p><p>函数名可以进行重新赋值：<code>my_sum = dec(my_sum)</code></p><ul><li>第一步我们调用的是<code>dec(func)</code>,调用之后将<code>my_sum</code>传了进去。因为在<code>in_dec</code>中我们对他进行了使用。所以我们的<code>in_dec</code>就是一个闭包。<ul><li>这个时候<code>my_sum</code>就已经作为<code>in_dec</code>的一个<code>__closure__</code> 属性被保存。那么在<code>in_dec</code>内部就可以直接使用<code>my_sum</code></li></ul></li><li>第二步<code>my_sum = dec(my_sum)</code>时。<code>my_sum</code>将保存<code>dec()</code>被调用后的返回值也就是<code>in_dec(*arg)</code>对象。</li></ul><p>具体执行函数： </p><ul><li>第一步是调用的<code>in_dec</code>函数</li><li>第二步是调用的<code>func</code>也就是<code>my_sum</code></li></ul><p>这里所有参数的处理都是<code>in_dec</code>处理的。所以当第二个直接返回<code>0</code>时，<code>my_sum</code>直接没有被调用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dec() return indec -&gt; my_sum;</span></span><br><span class="line"><span class="comment"># mysum = in_dec(*arg);</span></span><br></pre></td></tr></table></figure><h1 id="Python装饰器"><a href="#Python装饰器" class="headerlink" title="Python装饰器"></a>Python装饰器</h1><p>python装饰器</p><pre><code>- 装饰器用来装饰函数- 返回一个函数对象- 被装饰函数标识符指定返回的函数对象(A被装饰了，再用A接收被装饰后返会的新对象)被装饰的函数去哪了？- 语法糖 @deco</code></pre><p><code>my_sum = dec(my_sum)</code>执行过程：</p><ul><li><code>dec(my_sum)</code>将<code>my_sum</code>作为一个参数传给<code>dec</code>函数.</li><li><code>dec</code>函数内部有一个内置的函数<code>in_dec</code></li><li>内置函数作为返回值重新赋给了<code>my_sum</code></li></ul><p>理解：装饰器就是对于闭包的一个使用。Python提供了语法糖<code>@</code></p><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dec</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"call dec"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">in_dec</span><span class="params">(*arg)</span>:</span>  <span class="comment"># my_sum</span></span><br><span class="line">        <span class="keyword">print</span> (<span class="string">'in dec arg='</span>, arg)</span><br><span class="line">        <span class="keyword">if</span> len(arg) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> val <span class="keyword">in</span> arg:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> isinstance(val, int):</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> func(*arg)</span><br><span class="line">    <span class="keyword">return</span> in_dec</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@dec</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_sum</span><span class="params">(*arg)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'in mysum arg='</span>, arg)</span><br><span class="line">    <span class="keyword">return</span> sum(arg)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call dec</span><br></pre></td></tr></table></figure><p>并没有显式的调用任何方法，但是打印出了<code>call dec</code><br>因为<code>@dec</code>就相当于<code>my_sum = dec(my_sum)</code>已经进行了调用。此时的<code>my_sum</code>已经是装饰后的函数<code>in_dec</code>了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> (my_sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">15</span><br></pre></td></tr></table></figure><p><code>@dec</code>就相当于<code>my_sum = dec(my_sum)</code>，这是python解释器支持的语法糖。</p><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dec</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"call dec"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">in_dec</span><span class="params">(*arg)</span>:</span>  <span class="comment"># my_sum</span></span><br><span class="line"></span><br><span class="line">        print(<span class="string">'in dec arg='</span>, arg)</span><br><span class="line">        <span class="keyword">if</span> len(arg) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> val <span class="keyword">in</span> arg:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> isinstance(val, int):</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> func(*arg)</span><br><span class="line">    print(<span class="string">'return in_dec'</span>)</span><br><span class="line">    <span class="keyword">return</span> in_dec</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@dec</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_sum</span><span class="params">(*arg)</span>:</span>  <span class="comment"># my_sum = in_dec</span></span><br><span class="line">    print(<span class="string">'in mysum arg='</span>, arg)</span><br><span class="line">    <span class="keyword">return</span> sum(arg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(my_sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">call dec</span><br><span class="line">return in_dec</span><br><span class="line">(&apos;in dec arg=&apos;, (1, 2, 3, 4, 5))</span><br><span class="line">(&apos;in mysum arg=&apos;, (1, 2, 3, 4, 5))</span><br><span class="line">15</span><br></pre></td></tr></table></figure><p>装饰器就是对于我们的函数进行了功能的丰富。内部继续调用具体函数，<br>将新函数返回，并覆盖原函数变量。实质就是对于闭包的使用。<br><code>my_sum</code>当做<code>enclosing</code>域的变量。被内置函数<code>in_dec</code>所使用。</p><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">in_deco</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'in decp'</span>)</span><br><span class="line">        func()</span><br><span class="line">    print(<span class="string">'call deco'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@deco</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'in bar'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (type(bar))</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">call deco</span><br><span class="line">&lt;type &apos;NoneType&apos;&gt;</span><br></pre></td></tr></table></figure><p>因为我们在外层函数<code>deco</code>中返回的是<code>None</code></p><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">in_deco</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'in decp'</span>)</span><br><span class="line">        func()</span><br><span class="line">    print(<span class="string">'call deco'</span>)</span><br><span class="line">    <span class="keyword">return</span> in_deco</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@deco</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'in bar'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(type(bar))</span><br><span class="line">bar()</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">call deco</span><br><span class="line">&lt;type &apos;function&apos;&gt;</span><br><span class="line">in decp</span><br><span class="line">in bar</span><br></pre></td></tr></table></figure><p>给被装饰函数加上参数：第二个装饰器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@deco</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    print(<span class="string">'in bar'</span>, x + y)</span><br></pre></td></tr></table></figure><p>我们如果给被装饰函数加上了参数。那么也要对要返回的内置函数<code>in_deco</code>加上参数。<br>否则报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TypeError: bar() takes exactly 2 arguments (0 given)</span><br></pre></td></tr></table></figure><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">in_deco</span><span class="params">(x, y)</span>:</span></span><br><span class="line">        print(<span class="string">'in decp'</span>)</span><br><span class="line">        func(x, y)</span><br><span class="line">    print(<span class="string">'call deco'</span>)</span><br><span class="line">    <span class="keyword">return</span> in_deco</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@deco</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    print(<span class="string">'in bar'</span>, x + y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(type(bar))</span><br><span class="line">bar(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">call deco</span><br><span class="line">&lt;type &apos;function&apos;&gt;</span><br><span class="line">in decp</span><br><span class="line">(&apos;in bar&apos;, 3)</span><br></pre></td></tr></table></figure><p>要同时对于<code>in_deco(x, y)</code>和<code>func(x, y)</code>都加上参数。</p><p>假设我们是Python解释器：</p><ul><li>我们看到了<code>@deco</code>我们将会调用<code>deco()</code>然后将<code>bar</code>也就是被装饰函数作为参数传入。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">deco(bar) -&gt; indeco</span><br><span class="line">bar -&gt; in_deco  #(enclosing作用域)变量保存在in_deco的`__closure__`使用。</span><br><span class="line">bar() in_deco() 重新调用自己属性中的被装饰函数</span><br></pre></td></tr></table></figure><ul><li>调用之后<code>deco</code>会返回一个<code>in_deco</code>的函数对象。</li><li>现在根本没地方选的。只能存在原来的<code>bar</code>中。因此<code>bar</code>已经变成了<code>in_deco</code></li><li>而<code>in_deco</code>中调用的<code>func(x,y)</code>是存放在自己的<code>bar.__closure__</code>中了。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">in_deco</span><span class="params">(x, y)</span>:</span></span><br><span class="line">        print(<span class="string">'%x'</span> % id(func))</span><br><span class="line">        print(in_deco.__closure__)</span><br><span class="line">        print(<span class="string">'in deco'</span>)</span><br><span class="line">        func(x, y)</span><br><span class="line">    print(<span class="string">'call deco'</span>)</span><br><span class="line">    <span class="keyword">return</span> in_deco</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@deco</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    print(<span class="string">'%x'</span> % id(bar))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bar(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">call deco</span><br><span class="line">5491ba8</span><br><span class="line">(&lt;cell at 0x0000000004F66F78: function object at 0x0000000005491BA8&gt;, &lt;cell at 0x000000000546EA38: function object at 0x0000000005491C18&gt;)</span><br><span class="line">in deco</span><br><span class="line">5491c18</span><br></pre></td></tr></table></figure><p>可以看出<code>in_deco.__closure__</code>已经将<code>原始bar函数</code>进行了保存。</p><p>这里就有一个问题了？可以看出里面保存着两个变量。(第一个是一个函数对象<code>func</code>，第二个便是我们的<code>原始bar</code>)</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;学会装饰器，Python更进阶 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;note &quot;&gt;&lt;p&gt; 函数作用域到闭包到装饰器讲解，及闭包和装饰器的运用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[√] 慕课网Meshare_huang老师: python进阶&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="python从入门到精通" scheme="http://blog.mtianyan.cn/categories/python%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/"/>
    
    
      <category term="Python" scheme="http://blog.mtianyan.cn/tags/Python/"/>
    
      <category term="专题笔记" scheme="http://blog.mtianyan.cn/tags/%E4%B8%93%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
      <category term="装饰器" scheme="http://blog.mtianyan.cn/tags/%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    
  </entry>
  
</feed>
